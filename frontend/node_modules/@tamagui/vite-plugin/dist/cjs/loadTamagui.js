var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var loadTamagui_exports = {};
__export(loadTamagui_exports, {
  Static: () => Static,
  disableStatic: () => disableStatic,
  extractor: () => extractor,
  getStatic: () => getStatic,
  loadTamaguiBuildConfig: () => loadTamaguiBuildConfig,
  tamaguiOptions: () => tamaguiOptions
});
module.exports = __toCommonJS(loadTamagui_exports);
const importStatic = async () => (await import("@tamagui/static")).default;
let tamaguiOptions = null, Static = null, extractor = null, disableStatic = !1;
const getStatic = async () => Static || (Static = await importStatic(), Static);
let isLoading = null;
async function loadTamaguiBuildConfig(optionsIn, logger) {
  if (extractor) return;
  if (isLoading) return await isLoading;
  let resolve;
  isLoading = new Promise((res) => {
    resolve = res;
  });
  try {
    if (Static || (await getStatic(), tamaguiOptions = Static.loadTamaguiBuildConfigSync({
      ...optionsIn,
      platform: "web"
    }), disableStatic = !!tamaguiOptions.disable, extractor = Static.createExtractor({
      logger
    })), optionsIn?.disableWatchTamaguiConfig)
      return;
    extractor && await extractor.loadTamagui({
      components: ["tamagui"],
      platform: "web",
      ...tamaguiOptions
    });
  } finally {
    resolve(), isLoading = null;
  }
}
//# sourceMappingURL=loadTamagui.js.map
