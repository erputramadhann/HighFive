"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var plugin_exports = {};
__export(plugin_exports, {
  tamaguiPlugin: () => tamaguiPlugin
});
module.exports = __toCommonJS(plugin_exports);
var import_vite = require("vite"), import_extract = require("./extract"), import_loadTamagui = require("./loadTamagui");
const import_meta = {};
var resolve = function(name) {
  var _resolve, _this;
  return (_resolve = (_this = import_meta).resolve) === null || _resolve === void 0 ? void 0 : _resolve.call(_this, name).replace("file://", "");
};
function tamaguiPlugin() {
  var { optimize, disableResolveConfig, ...tamaguiOptionsIn } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, shouldAddCompiler = !!optimize, watcher, loaded = !1, enableNativeEnv = !!globalThis.__vxrnEnableNativeEnv, extensions = [
    ".web.mjs",
    ".web.js",
    ".web.jsx",
    ".web.ts",
    ".web.tsx",
    ".mjs",
    ".js",
    ".mts",
    ".ts",
    ".jsx",
    ".tsx",
    ".json"
  ];
  async function load() {
    if (!loaded && (loaded = !0, await (0, import_loadTamagui.loadTamaguiBuildConfig)(tamaguiOptionsIn), !import_loadTamagui.tamaguiOptions.disableWatchTamaguiConfig)) {
      if (!import_loadTamagui.Static)
        throw new Error("Not loaded");
      watcher = import_loadTamagui.Static.watchTamaguiConfig({
        components: [
          "tamagui"
        ],
        config: "./src/tamagui.config.ts",
        ...import_loadTamagui.tamaguiOptions
      }).catch(function(err) {
        console.error(` [Tamagui] Error watching config: ${err}`);
      });
    }
  }
  var compatPlugins = [
    {
      name: "tamagui-base-web-only",
      enforce: "pre",
      async buildEnd() {
        await (watcher == null ? void 0 : watcher.then(function(res) {
          res == null || res.dispose();
        }));
      },
      async transform(code, id) {
        if (id.includes("expo-linear-gradient"))
          return (0, import_vite.transformWithEsbuild)(code, id, {
            loader: "jsx",
            jsx: "automatic"
          });
      },
      // ðŸ‘ˆ
      async config(_, env) {
        if (await load(), !import_loadTamagui.tamaguiOptions)
          throw new Error("No options loaded");
        return {
          environments: {
            client: {
              define: {
                "process.env.TAMAGUI_IS_CLIENT": JSON.stringify(!0),
                "process.env.TAMAGUI_ENVIRONMENT": '"client"'
              }
            }
          },
          define: {
            // reanimated support
            _frameTimestamp: void 0,
            _WORKLET: !1,
            __DEV__: `${env.mode === "development"}`,
            "process.env.NODE_ENV": JSON.stringify(process.env.NODE_ENV || env.mode),
            "process.env.ENABLE_RSC": JSON.stringify(process.env.ENABLE_RSC || ""),
            "process.env.ENABLE_STEPS": JSON.stringify(process.env.ENABLE_STEPS || ""),
            "process.env.IS_STATIC": JSON.stringify(!1),
            ...env.mode === "production" && {
              "process.env.TAMAGUI_OPTIMIZE_THEMES": JSON.stringify(!0)
            }
          },
          resolve: disableResolveConfig || enableNativeEnv ? {} : {
            extensions,
            alias: {
              ...import_loadTamagui.tamaguiOptions.platform !== "native" && {
                "react-native/Libraries/Renderer/shims/ReactFabric": resolve("@tamagui/proxy-worm"),
                "react-native/Libraries/Utilities/codegenNativeComponent": resolve("@tamagui/proxy-worm"),
                "react-native-svg": resolve("@tamagui/react-native-svg"),
                ...!(!(import_loadTamagui.tamaguiOptions === null || import_loadTamagui.tamaguiOptions === void 0) && import_loadTamagui.tamaguiOptions.useReactNativeWebLite) && {
                  "react-native": resolve("react-native-web")
                }
              }
            }
          }
        };
      }
    },
    {
      name: "tamagui-rnw-lite-web-only",
      // enforce: 'pre',
      // resolveId(source) {
      //   const envName = this['environment']?.name as any // vite 5 + 6 compat
      //   if (isVite6 && envName !== 'client' && envName !== 'ssr') {
      //     return
      //   }
      //   if (source === 'react-native-svg') {
      //     return '@tamagui/react-native-svg'
      //   }
      //   console.log('cmon', source)
      //   if (tamaguiOptions?.useReactNativeWebLite) {
      //     if (/^react-native$/.test(source)) {
      //       return 'react-native-web'
      //     }
      //   } else {
      //     if (/^react-native$/.test(source)) {
      //       return '@tamagui/react-native-web-lite'
      //     }
      //   }
      // },
      config() {
        if (!(import_loadTamagui.tamaguiOptions === null || import_loadTamagui.tamaguiOptions === void 0) && import_loadTamagui.tamaguiOptions.useReactNativeWebLite) {
          var rnwl = resolve((import_loadTamagui.tamaguiOptions === null || import_loadTamagui.tamaguiOptions === void 0 ? void 0 : import_loadTamagui.tamaguiOptions.useReactNativeWebLite) === "without-animated" ? "@tamagui/react-native-web-lite/without-animated" : "@tamagui/react-native-web-lite"), rnwlSS = resolve("@tamagui/react-native-web-lite/dist/exports/StyleSheet/compiler/createReactDOMStyle");
          return {
            resolve: {
              alias: [
                // fix reanimated issue not finding this
                {
                  find: /react-native.*\/dist\/exports\/StyleSheet\/compiler\/createReactDOMStyle/,
                  replacement: rnwlSS
                },
                {
                  find: /^react-native$/,
                  replacement: rnwl
                },
                {
                  find: /^react-native\/(.*)$/,
                  replacement: rnwl
                },
                {
                  find: /^react-native-web$/,
                  replacement: rnwl
                },
                {
                  find: /^react-native-web\/(.*)$/,
                  replacement: rnwl
                }
              ]
            }
          };
        }
      }
    }
  ];
  return shouldAddCompiler ? [
    ...compatPlugins,
    (0, import_extract.tamaguiExtractPlugin)(tamaguiOptionsIn)
  ] : [
    ...compatPlugins
  ];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  tamaguiPlugin
});
//# sourceMappingURL=plugin.js.map
