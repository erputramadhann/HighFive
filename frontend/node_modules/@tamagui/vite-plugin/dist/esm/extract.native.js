import path from "node:path";
import { normalizePath } from "vite";
import { Static, disableStatic, extractor, loadTamaguiBuildConfig, tamaguiOptions } from "./loadTamagui.native.js";
import { createHash } from "node:crypto";
function tamaguiExtractPlugin(optionsIn) {
  if (optionsIn?.disable) return {
    name: "tamagui-extract"
  };
  var getHash = function (input) {
      return createHash("sha1").update(input).digest("base64");
    },
    clearCompilerCache = function () {
      memoryCache = {}, cacheSize = 0;
    },
    memoryCache = {},
    cacheSize = 0,
    cssMap = /* @__PURE__ */new Map(),
    config,
    server,
    virtualExt = ".tamagui.css",
    getAbsoluteVirtualFileId = function (filePath) {
      return filePath.startsWith(config.root) ? filePath : normalizePath(path.join(config.root, filePath));
    };
  function isVite6AndNotClient(environment) {
    return environment?.name && environment.name !== "client";
  }
  function isVite6Native(environment) {
    return environment?.name && (environment.name === "ios" || environment.name === "android");
  }
  function invalidateModule(absoluteId) {
    if (server) {
      var {
          moduleGraph
        } = server,
        modules = moduleGraph.getModulesByFile(absoluteId);
      if (modules) {
        var _iteratorNormalCompletion = !0,
          _didIteratorError = !1,
          _iteratorError = void 0;
        try {
          for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
            var module = _step.value;
            moduleGraph.invalidateModule(module), module.lastHMRTimestamp = module.lastInvalidationTimestamp || Date.now();
          }
        } catch (err) {
          _didIteratorError = !0, _iteratorError = err;
        } finally {
          try {
            !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
          } finally {
            if (_didIteratorError) throw _iteratorError;
          }
        }
      }
    }
  }
  return {
    name: "tamagui-extract",
    enforce: "pre",
    configureServer(_server) {
      server = _server;
    },
    async buildStart() {
      await loadTamaguiBuildConfig(optionsIn);
    },
    buildEnd() {
      extractor === null || extractor === void 0 || extractor.cleanupBeforeExit();
    },
    config(userConf) {
      var _userConf, _userConf_optimizeDeps;
      (_userConf = userConf).optimizeDeps || (_userConf.optimizeDeps = {}), (_userConf_optimizeDeps = userConf.optimizeDeps).include || (_userConf_optimizeDeps.include = []), userConf.optimizeDeps.include.push("@tamagui/core/inject-styles");
    },
    async configResolved(resolvedConfig) {
      config = resolvedConfig;
    },
    async resolveId(source) {
      if (!isVite6Native(this.environment) && !(!(tamaguiOptions === null || tamaguiOptions === void 0) && tamaguiOptions.disableServerOptimization && isVite6AndNotClient(this.environment))) {
        var [validId, query] = source.split("?");
        if (validId.endsWith(virtualExt)) {
          var absoluteId = source.startsWith(config.root) ? source : getAbsoluteVirtualFileId(validId);
          if (cssMap.has(absoluteId)) return absoluteId + (query ? `?${query}` : "");
        }
      }
    },
    /**
    * TODO
    *
    *   mainFields module:jsx breaks, so lets just have a mapping here
    *   where we load() and map it to the jsx path before transform
    *
    */
    async load(id) {
      if (!disableStatic && !isVite6Native(this.environment) && !(!(tamaguiOptions === null || tamaguiOptions === void 0) && tamaguiOptions.disableServerOptimization && isVite6AndNotClient(this.environment))) {
        var [validId] = id.split("?");
        return cssMap.get(validId);
      }
    },
    transform: {
      order: "pre",
      async handler(code, id) {
        if (!disableStatic && !isVite6Native(this.environment) && !(!(tamaguiOptions === null || tamaguiOptions === void 0) && tamaguiOptions.disableServerOptimization && isVite6AndNotClient(this.environment))) {
          var [validId] = id.split("?");
          if (validId.endsWith(".tsx")) {
            var firstCommentIndex = code.indexOf("// "),
              {
                shouldDisable,
                shouldPrintDebug
              } = Static.getPragmaOptions({
                source: firstCommentIndex >= 0 ? code.slice(firstCommentIndex) : "",
                path: validId
              });
            if (shouldPrintDebug) {
              var _this_environment;
              console.trace(`Current file: ${id} in environment: ${(_this_environment = this.environment) === null || _this_environment === void 0 ? void 0 : _this_environment.name}, shouldDisable: ${shouldDisable}`), console.info(`

Original source:
${code}

`);
            }
            if (!shouldDisable) {
              var cacheEnv = this.environment.name === "client" || this.environment.name === "ssr" ?
                // same cache key for ssr and web since they are the same
                "web" : this.environment.name,
                cacheKey = getHash(`${cacheEnv}${code}${id}`),
                cached = memoryCache[cacheKey];
              if (cached) return cached;
              var extracted = await Static.extractToClassNames({
                extractor,
                source: code,
                sourcePath: validId,
                options: tamaguiOptions,
                shouldPrintDebug
              });
              if (extracted) {
                var rootRelativeId = `${validId}${virtualExt}`,
                  absoluteId = getAbsoluteVirtualFileId(rootRelativeId),
                  source = extracted.js;
                extracted.styles && (this.addWatchFile(rootRelativeId), server && cssMap.has(absoluteId) && invalidateModule(rootRelativeId), source = `${source}
import "${rootRelativeId}";`, cssMap.set(absoluteId, extracted.styles));
                var codeOut = source.toString(),
                  out = {
                    code: codeOut,
                    map: extracted.map
                  };
                return cacheSize += codeOut.length, cacheSize > 26214400 && clearCompilerCache(), memoryCache[cacheKey] = out, out;
              }
            }
          }
        }
      }
    }
  };
}
export { tamaguiExtractPlugin };
//# sourceMappingURL=extract.native.js.map
