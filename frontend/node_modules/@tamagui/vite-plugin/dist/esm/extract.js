import path from "node:path";
import { normalizePath } from "vite";
import {
  Static,
  disableStatic,
  extractor,
  loadTamaguiBuildConfig,
  tamaguiOptions
} from "./loadTamagui";
import { createHash } from "node:crypto";
function tamaguiExtractPlugin(optionsIn) {
  if (optionsIn?.disable)
    return {
      name: "tamagui-extract"
    };
  const getHash = (input) => createHash("sha1").update(input).digest("base64"), clearCompilerCache = () => {
    memoryCache = {}, cacheSize = 0;
  };
  let memoryCache = {}, cacheSize = 0;
  const cssMap = /* @__PURE__ */ new Map();
  let config, server;
  const virtualExt = ".tamagui.css", getAbsoluteVirtualFileId = (filePath) => filePath.startsWith(config.root) ? filePath : normalizePath(path.join(config.root, filePath));
  function isVite6AndNotClient(environment) {
    return environment?.name && environment.name !== "client";
  }
  function isVite6Native(environment) {
    return environment?.name && (environment.name === "ios" || environment.name === "android");
  }
  function invalidateModule(absoluteId) {
    if (!server) return;
    const { moduleGraph } = server, modules = moduleGraph.getModulesByFile(absoluteId);
    if (modules)
      for (const module of modules)
        moduleGraph.invalidateModule(module), module.lastHMRTimestamp = module.lastInvalidationTimestamp || Date.now();
  }
  return {
    name: "tamagui-extract",
    enforce: "pre",
    configureServer(_server) {
      server = _server;
    },
    async buildStart() {
      await loadTamaguiBuildConfig(optionsIn);
    },
    buildEnd() {
      extractor?.cleanupBeforeExit();
    },
    config(userConf) {
      userConf.optimizeDeps ||= {}, userConf.optimizeDeps.include ||= [], userConf.optimizeDeps.include.push("@tamagui/core/inject-styles");
    },
    async configResolved(resolvedConfig) {
      config = resolvedConfig;
    },
    async resolveId(source) {
      if (isVite6Native(this.environment) || tamaguiOptions?.disableServerOptimization && isVite6AndNotClient(this.environment))
        return;
      const [validId, query] = source.split("?");
      if (!validId.endsWith(virtualExt))
        return;
      const absoluteId = source.startsWith(config.root) ? source : getAbsoluteVirtualFileId(validId);
      if (cssMap.has(absoluteId))
        return absoluteId + (query ? `?${query}` : "");
    },
    /**
     * TODO
     *
     *   mainFields module:jsx breaks, so lets just have a mapping here
     *   where we load() and map it to the jsx path before transform
     *
     */
    async load(id) {
      if (disableStatic || isVite6Native(this.environment) || tamaguiOptions?.disableServerOptimization && isVite6AndNotClient(this.environment))
        return;
      const [validId] = id.split("?");
      return cssMap.get(validId);
    },
    transform: {
      order: "pre",
      async handler(code, id) {
        if (disableStatic || isVite6Native(this.environment) || tamaguiOptions?.disableServerOptimization && isVite6AndNotClient(this.environment))
          return;
        const [validId] = id.split("?");
        if (!validId.endsWith(".tsx"))
          return;
        const firstCommentIndex = code.indexOf("// "), { shouldDisable, shouldPrintDebug } = Static.getPragmaOptions({
          source: firstCommentIndex >= 0 ? code.slice(firstCommentIndex) : "",
          path: validId
        });
        if (shouldPrintDebug && (console.trace(
          `Current file: ${id} in environment: ${this.environment?.name}, shouldDisable: ${shouldDisable}`
        ), console.info(`

Original source:
${code}

`)), shouldDisable)
          return;
        const cacheEnv = this.environment.name === "client" || this.environment.name === "ssr" ? (
          // same cache key for ssr and web since they are the same
          "web"
        ) : this.environment.name, cacheKey = getHash(`${cacheEnv}${code}${id}`), cached = memoryCache[cacheKey];
        if (cached)
          return cached;
        const extracted = await Static.extractToClassNames({
          extractor,
          source: code,
          sourcePath: validId,
          options: tamaguiOptions,
          shouldPrintDebug
        });
        if (!extracted)
          return;
        const rootRelativeId = `${validId}${virtualExt}`, absoluteId = getAbsoluteVirtualFileId(rootRelativeId);
        let source = extracted.js;
        extracted.styles && (this.addWatchFile(rootRelativeId), server && cssMap.has(absoluteId) && invalidateModule(rootRelativeId), source = `${source}
import "${rootRelativeId}";`, cssMap.set(absoluteId, extracted.styles));
        const codeOut = source.toString(), out = {
          code: codeOut,
          map: extracted.map
        };
        return cacheSize += codeOut.length, cacheSize > 26214400 && clearCompilerCache(), memoryCache[cacheKey] = out, out;
      }
    }
  };
}
export {
  tamaguiExtractPlugin
};
//# sourceMappingURL=extract.js.map
