import { transformWithEsbuild } from "vite";
import { tamaguiExtractPlugin } from "./extract.mjs";
import { Static, loadTamaguiBuildConfig, tamaguiOptions } from "./loadTamagui.mjs";
const resolve = name => import.meta.resolve?.(name).replace("file://", "");
function tamaguiPlugin({
  optimize,
  disableResolveConfig,
  ...tamaguiOptionsIn
} = {}) {
  const shouldAddCompiler = !!optimize;
  let watcher,
    loaded = !1;
  const enableNativeEnv = !!globalThis.__vxrnEnableNativeEnv,
    extensions = [".web.mjs", ".web.js", ".web.jsx", ".web.ts", ".web.tsx", ".mjs", ".js", ".mts", ".ts", ".jsx", ".tsx", ".json"];
  async function load() {
    if (!loaded && (loaded = !0, await loadTamaguiBuildConfig(tamaguiOptionsIn), !tamaguiOptions.disableWatchTamaguiConfig)) {
      if (!Static) throw new Error("Not loaded");
      watcher = Static.watchTamaguiConfig({
        components: ["tamagui"],
        config: "./src/tamagui.config.ts",
        ...tamaguiOptions
      }).catch(err => {
        console.error(` [Tamagui] Error watching config: ${err}`);
      });
    }
  }
  const compatPlugins = [{
    name: "tamagui-base-web-only",
    enforce: "pre",
    async buildEnd() {
      await watcher?.then(res => {
        res?.dispose();
      });
    },
    async transform(code, id) {
      if (id.includes("expo-linear-gradient")) return transformWithEsbuild(code, id, {
        loader: "jsx",
        jsx: "automatic"
        // ðŸ‘ˆ
      });
    },
    async config(_, env) {
      if (await load(), !tamaguiOptions) throw new Error("No options loaded");
      return {
        environments: {
          client: {
            define: {
              "process.env.TAMAGUI_IS_CLIENT": JSON.stringify(!0),
              "process.env.TAMAGUI_ENVIRONMENT": '"client"'
            }
          }
        },
        define: {
          // reanimated support
          _frameTimestamp: void 0,
          _WORKLET: !1,
          __DEV__: `${env.mode === "development"}`,
          "process.env.NODE_ENV": JSON.stringify(process.env.NODE_ENV || env.mode),
          "process.env.ENABLE_RSC": JSON.stringify(process.env.ENABLE_RSC || ""),
          "process.env.ENABLE_STEPS": JSON.stringify(process.env.ENABLE_STEPS || ""),
          "process.env.IS_STATIC": JSON.stringify(!1),
          ...(env.mode === "production" && {
            "process.env.TAMAGUI_OPTIMIZE_THEMES": JSON.stringify(!0)
          })
        },
        resolve: disableResolveConfig || enableNativeEnv ? {} : {
          extensions,
          alias: {
            ...(tamaguiOptions.platform !== "native" && {
              "react-native/Libraries/Renderer/shims/ReactFabric": resolve("@tamagui/proxy-worm"),
              "react-native/Libraries/Utilities/codegenNativeComponent": resolve("@tamagui/proxy-worm"),
              "react-native-svg": resolve("@tamagui/react-native-svg"),
              ...(!tamaguiOptions?.useReactNativeWebLite && {
                "react-native": resolve("react-native-web")
              })
            })
          }
        }
      };
    }
  }, {
    name: "tamagui-rnw-lite-web-only",
    // enforce: 'pre',
    // resolveId(source) {
    //   const envName = this['environment']?.name as any // vite 5 + 6 compat
    //   if (isVite6 && envName !== 'client' && envName !== 'ssr') {
    //     return
    //   }
    //   if (source === 'react-native-svg') {
    //     return '@tamagui/react-native-svg'
    //   }
    //   console.log('cmon', source)
    //   if (tamaguiOptions?.useReactNativeWebLite) {
    //     if (/^react-native$/.test(source)) {
    //       return 'react-native-web'
    //     }
    //   } else {
    //     if (/^react-native$/.test(source)) {
    //       return '@tamagui/react-native-web-lite'
    //     }
    //   }
    // },
    config() {
      if (tamaguiOptions?.useReactNativeWebLite) {
        const rnwl = resolve(tamaguiOptions?.useReactNativeWebLite === "without-animated" ? "@tamagui/react-native-web-lite/without-animated" : "@tamagui/react-native-web-lite"),
          rnwlSS = resolve("@tamagui/react-native-web-lite/dist/exports/StyleSheet/compiler/createReactDOMStyle");
        return {
          resolve: {
            alias: [
            // fix reanimated issue not finding this
            {
              find: /react-native.*\/dist\/exports\/StyleSheet\/compiler\/createReactDOMStyle/,
              replacement: rnwlSS
            }, {
              find: /^react-native$/,
              replacement: rnwl
            }, {
              find: /^react-native\/(.*)$/,
              replacement: rnwl
            }, {
              find: /^react-native-web$/,
              replacement: rnwl
            }, {
              find: /^react-native-web\/(.*)$/,
              replacement: rnwl
            }]
          }
        };
      }
    }
  }];
  return shouldAddCompiler ? [...compatPlugins, tamaguiExtractPlugin(tamaguiOptionsIn)] : [...compatPlugins];
}
export { tamaguiPlugin };
//# sourceMappingURL=plugin.mjs.map
