const importStatic = async () => (await import("@tamagui/static")).default;
let tamaguiOptions = null,
  Static = null,
  extractor = null,
  disableStatic = !1;
const getStatic = async () => Static || (Static = await importStatic(), Static);
let isLoading = null;
async function loadTamaguiBuildConfig(optionsIn, logger) {
  if (extractor) return;
  if (isLoading) return await isLoading;
  let resolve;
  isLoading = new Promise(res => {
    resolve = res;
  });
  try {
    if (Static || (await getStatic(), tamaguiOptions = Static.loadTamaguiBuildConfigSync({
      ...optionsIn,
      platform: "web"
    }), disableStatic = !!tamaguiOptions.disable, extractor = Static.createExtractor({
      logger
    })), optionsIn?.disableWatchTamaguiConfig) return;
    extractor && (await extractor.loadTamagui({
      components: ["tamagui"],
      platform: "web",
      ...tamaguiOptions
    }));
  } finally {
    resolve(), isLoading = null;
  }
}
export { Static, disableStatic, extractor, getStatic, loadTamaguiBuildConfig, tamaguiOptions };
//# sourceMappingURL=loadTamagui.mjs.map
