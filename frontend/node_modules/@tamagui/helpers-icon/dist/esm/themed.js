import {
  getTokenValue,
  getVariable,
  Text,
  usePropsAndStyle
} from "@tamagui/core";
import React from "react";
import { jsx } from "react/jsx-runtime";
React.keep;
function themed(Component, optsIn = {}) {
  const opts = {
    defaultThemeColor: process.env.DEFAULT_ICON_THEME_COLOR || "$color",
    defaultStrokeWidth: 2,
    fallbackColor: "#000",
    resolveValues: process.env.TAMAGUI_ICON_COLOR_RESOLVE || "auto",
    ...optsIn
  };
  return (propsIn) => {
    const [props, style, theme] = usePropsAndStyle(propsIn, {
      ...opts,
      forComponent: Text,
      resolveValues: opts.resolveValues
    }), defaultColor = opts.defaultThemeColor, colorIn = style.color || (defaultColor ? theme[defaultColor] : void 0) || (props.disableTheme ? null : theme.color) || opts.fallbackColor, color = getVariable(colorIn), size = typeof props.size == "string" ? getTokenValue(props.size, "size") : props.size, strokeWidth = typeof props.strokeWidth == "string" ? getTokenValue(props.strokeWidth, "size") : props.strokeWidth ?? `${opts.defaultStrokeWidth}`, finalProps = {
      ...props,
      color,
      size,
      strokeWidth,
      style
    };
    return /* @__PURE__ */ jsx(Component, { ...finalProps });
  };
}
export {
  themed
};
//# sourceMappingURL=themed.js.map
