import { jsx as _jsx } from "react/jsx-runtime";
import { getTokenValue, getVariable, Text, usePropsAndStyle } from "@tamagui/core";
import React from "react";
React.keep;
function themed(Component) {
  var optsIn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
    opts = {
      defaultThemeColor: process.env.DEFAULT_ICON_THEME_COLOR || "$color",
      defaultStrokeWidth: 2,
      fallbackColor: "#000",
      resolveValues: process.env.TAMAGUI_ICON_COLOR_RESOLVE || "auto",
      ...optsIn
    },
    wrapped = function (propsIn) {
      var [props, style, theme] = usePropsAndStyle(propsIn, {
          ...opts,
          forComponent: Text,
          resolveValues: opts.resolveValues
        }),
        defaultColor = opts.defaultThemeColor,
        colorIn = style.color || (defaultColor ? theme[defaultColor] : void 0) || (props.disableTheme ? null : theme.color) || opts.fallbackColor,
        color = getVariable(colorIn),
        size = typeof props.size == "string" ? getTokenValue(props.size, "size") : props.size,
        _props_strokeWidth,
        strokeWidth = typeof props.strokeWidth == "string" ? getTokenValue(props.strokeWidth, "size") : (_props_strokeWidth = props.strokeWidth) !== null && _props_strokeWidth !== void 0 ? _props_strokeWidth : `${opts.defaultStrokeWidth}`,
        finalProps = {
          ...props,
          color,
          size,
          strokeWidth,
          style
        };
      return /* @__PURE__ */_jsx(Component, {
        ...finalProps
      });
    };
  return wrapped;
}
export { themed };
//# sourceMappingURL=themed.native.js.map
