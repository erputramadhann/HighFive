import { useContext, useEffect, useId, useMemo } from "react";
import { ZIndexHardcodedContext, ZIndexStackContext } from "./context.native.js";
var ZIndicesByContext = {},
  useStackedZIndex = function (props) {
    var _ZIndicesByContext,
      _stackingContextLevel,
      {
        stackZIndex,
        zIndex: zIndexProp
      } = props,
      id = useId(),
      stackingContextLevel = useContext(ZIndexStackContext),
      hardcoded = useContext(ZIndexHardcodedContext);
    (_ZIndicesByContext = ZIndicesByContext)[_stackingContextLevel = stackingContextLevel] || (_ZIndicesByContext[_stackingContextLevel] = {});
    var stackContext = ZIndicesByContext[stackingContextLevel],
      zIndex = useMemo(function () {
        if (typeof zIndexProp == "number") return zIndexProp;
        if (stackZIndex) {
          if (hardcoded) return hardcoded + 1;
          var highest = Object.values(stackContext).reduce(function (acc, cur) {
              return Math.max(acc, cur);
            }, 0),
            found = stackingContextLevel * 5e3 + highest + 1;
          return typeof stackZIndex == "number" ? stackZIndex + found : found;
        }
        return 1;
      }, [stackingContextLevel, zIndexProp, stackZIndex]);
    return useEffect(function () {
      if (stackZIndex) return stackContext[id] = zIndex, function () {
        delete stackContext[id];
      };
    }, [zIndex]), zIndex;
  };
export { useStackedZIndex };
//# sourceMappingURL=useStackedZIndex.native.js.map
