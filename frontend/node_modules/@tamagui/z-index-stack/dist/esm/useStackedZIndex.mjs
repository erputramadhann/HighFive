import { useContext, useEffect, useId, useMemo } from "react";
import { ZIndexHardcodedContext, ZIndexStackContext } from "./context.mjs";
const ZIndicesByContext = {},
  useStackedZIndex = props => {
    const {
        stackZIndex,
        zIndex: zIndexProp
      } = props,
      id = useId(),
      stackingContextLevel = useContext(ZIndexStackContext),
      hardcoded = useContext(ZIndexHardcodedContext);
    ZIndicesByContext[stackingContextLevel] ||= {};
    const stackContext = ZIndicesByContext[stackingContextLevel],
      zIndex = useMemo(() => {
        if (typeof zIndexProp == "number") return zIndexProp;
        if (stackZIndex) {
          if (hardcoded) return hardcoded + 1;
          const highest = Object.values(stackContext).reduce((acc, cur) => Math.max(acc, cur), 0),
            found = stackingContextLevel * 5e3 + highest + 1;
          return typeof stackZIndex == "number" ? stackZIndex + found : found;
        }
        return 1;
      }, [stackingContextLevel, zIndexProp, stackZIndex]);
    return useEffect(() => {
      if (stackZIndex) return stackContext[id] = zIndex, () => {
        delete stackContext[id];
      };
    }, [zIndex]), zIndex;
  };
export { useStackedZIndex };
//# sourceMappingURL=useStackedZIndex.mjs.map
