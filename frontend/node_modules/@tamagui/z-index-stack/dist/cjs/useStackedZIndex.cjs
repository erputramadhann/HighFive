var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: !0
    });
  },
  __copyProps = (to, from, except, desc) => {
    if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
    return to;
  };
var __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
  value: !0
}), mod);
var useStackedZIndex_exports = {};
__export(useStackedZIndex_exports, {
  useStackedZIndex: () => useStackedZIndex
});
module.exports = __toCommonJS(useStackedZIndex_exports);
var import_react = require("react"),
  import_context = require("./context.cjs");
const ZIndicesByContext = {},
  useStackedZIndex = props => {
    const {
        stackZIndex,
        zIndex: zIndexProp
      } = props,
      id = (0, import_react.useId)(),
      stackingContextLevel = (0, import_react.useContext)(import_context.ZIndexStackContext),
      hardcoded = (0, import_react.useContext)(import_context.ZIndexHardcodedContext);
    ZIndicesByContext[stackingContextLevel] ||= {};
    const stackContext = ZIndicesByContext[stackingContextLevel],
      zIndex = (0, import_react.useMemo)(() => {
        if (typeof zIndexProp == "number") return zIndexProp;
        if (stackZIndex) {
          if (hardcoded) return hardcoded + 1;
          const highest = Object.values(stackContext).reduce((acc, cur) => Math.max(acc, cur), 0),
            found = stackingContextLevel * 5e3 + highest + 1;
          return typeof stackZIndex == "number" ? stackZIndex + found : found;
        }
        return 1;
      }, [stackingContextLevel, zIndexProp, stackZIndex]);
    return (0, import_react.useEffect)(() => {
      if (stackZIndex) return stackContext[id] = zIndex, () => {
        delete stackContext[id];
      };
    }, [zIndex]), zIndex;
  };