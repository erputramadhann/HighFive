import {
  AnimatePresence,
  PresenceChild,
  isServerSide,
  useConstant,
  useForceUpdate
} from "./chunk-KNEZWNEE.js";
import {
  ActivityIndicator_default,
  Dimensions,
  Image_default,
  Keyboard_default,
  Linking_default,
  PanResponder_default,
  Platform_default,
  ScrollView_default,
  Switch_default,
  TextInput_default,
  View_default
} from "./chunk-X5ANYYL7.js";
import "./chunk-ZNYOO7SA.js";
import {
  ComponentContext,
  Configuration,
  FontLanguage,
  Slot,
  Slottable,
  Spacer,
  Stack,
  Stack2,
  StyleObjectIdentifier,
  StyleObjectProperty,
  StyleObjectPseudo,
  StyleObjectRules,
  StyleObjectValue,
  TamaguiProvider,
  Text,
  Text2,
  Theme,
  Unspaced,
  View,
  View2,
  clamp,
  composeEventHandlers,
  composeRefs,
  concatClassName,
  createComponent,
  createFont,
  createMedia,
  createShallowSetState,
  createShorthands,
  createStyledContext,
  createTamagui,
  createTheme,
  createTokens,
  createVariable,
  currentPlatform,
  ensureThemeVariable,
  forceUpdateThemes,
  getCSSStylesAtomic,
  getConfig,
  getMedia,
  getShorthandValue,
  getThemeCSSRules,
  getThemes,
  getToken,
  getTokenValue,
  getTokens,
  getVariable,
  getVariableName,
  getVariableValue,
  insertFont,
  isAndroid,
  isChrome,
  isClient,
  isIos,
  isServer,
  isTamaguiComponent,
  isTamaguiElement,
  isTouchable,
  isVariable,
  isWeb,
  isWebTouchable,
  matchMedia,
  mediaObjectToString,
  mediaQueryConfig,
  mediaState,
  mergeProps,
  proxyThemeToParents,
  setConfig,
  setRef,
  setupDev,
  setupReactNative,
  shouldRenderNativePlatform,
  simpleHash,
  spacedChildren,
  stylePropsAll,
  stylePropsText,
  stylePropsTextOnly,
  stylePropsTransform,
  stylePropsUnitless,
  stylePropsView,
  styled,
  themeable,
  tokenCategories,
  updateConfig,
  useComposedRefs,
  useConfiguration,
  useDidFinishSSR,
  useEvent,
  useGet,
  useIsTouchDevice,
  useIsomorphicLayoutEffect,
  useMedia,
  useProps,
  usePropsAndStyle,
  useStyle,
  useTheme,
  useThemeName,
  validPseudoKeys,
  validStyles,
  variableToString,
  withStaticProperties
} from "./chunk-N2HKXBPT.js";
import {
  PresenceContext,
  ResetPresence,
  isPresent,
  useIsPresent,
  usePresence
} from "./chunk-4IITRGBK.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import "./chunk-O7W6VYJS.js";
import {
  require_react_dom
} from "./chunk-TH7NCS4R.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@tamagui/use-controllable-state/dist/esm/useControllableState.mjs
var React = __toESM(require_react(), 1);

// node_modules/@tamagui/start-transition/dist/esm/index.mjs
var import_react = __toESM(require_react(), 1);
var startTransition = (callback) => {
  (0, import_react.startTransition)(callback);
};

// node_modules/@tamagui/use-controllable-state/dist/esm/useControllableState.mjs
var emptyCallbackFn = (_) => _();
function useControllableState({
  prop,
  defaultProp,
  onChange,
  strategy = "prop-wins",
  preventUpdate,
  transition
}) {
  const [state, setState] = React.useState(prop ?? defaultProp), previous = React.useRef(state), propWins = strategy === "prop-wins" && prop !== void 0, value = propWins ? prop : state, onChangeCb = useEvent(onChange || idFn), transitionFn = transition ? startTransition : emptyCallbackFn;
  React.useEffect(() => {
    prop !== void 0 && (previous.current = prop, transitionFn(() => {
      setState(prop);
    }));
  }, [prop]), React.useEffect(() => {
    propWins || state !== previous.current && (previous.current = state, onChangeCb(state));
  }, [onChangeCb, state, propWins]);
  const setter = useEvent((next) => {
    if (!preventUpdate) if (propWins) {
      const nextValue = typeof next == "function" ? next(previous.current) : next;
      onChangeCb(nextValue);
    } else transitionFn(() => {
      setState(next);
    });
  });
  return [value, setter];
}
var idFn = () => {
};

// node_modules/@tamagui/collapsible/dist/esm/Collapsible.mjs
var React2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var COLLAPSIBLE_NAME = "Collapsible";
var {
  Provider: CollapsibleProvider,
  useStyledContext: useCollapsibleContext
} = createStyledContext();
var _Collapsible = React2.forwardRef((props, forwardedRef) => {
  const {
    __scopeCollapsible,
    open: openProp,
    defaultOpen,
    disabled,
    onOpenChange,
    ...collapsibleProps
  } = props, [open = false, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return (0, import_jsx_runtime.jsx)(CollapsibleProvider, {
    scope: __scopeCollapsible,
    disabled,
    contentId: React2.useId(),
    open,
    onOpenToggle: React2.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
    children: (0, import_jsx_runtime.jsx)(Stack, {
      "data-state": getState(open),
      "data-disabled": disabled ? "" : void 0,
      ...collapsibleProps,
      ref: forwardedRef
    })
  });
});
_Collapsible.displayName = COLLAPSIBLE_NAME;
var TRIGGER_NAME = "CollapsibleTrigger";
var CollapsibleTriggerFrame = styled(Stack, {
  name: TRIGGER_NAME,
  tag: "button"
});
var CollapsibleTrigger = CollapsibleTriggerFrame.styleable((props, forwardedRef) => {
  const {
    __scopeCollapsible,
    children,
    ...triggerProps
  } = props, context2 = useCollapsibleContext(__scopeCollapsible);
  return (0, import_jsx_runtime.jsx)(CollapsibleTriggerFrame, {
    "aria-controls": context2.contentId,
    "aria-expanded": context2.open || false,
    "data-state": getState(context2.open),
    "data-disabled": context2.disabled ? "" : void 0,
    disabled: context2.disabled,
    ...triggerProps,
    ref: forwardedRef,
    onPress: composeEventHandlers(props.onPress, context2.onOpenToggle),
    children: typeof children == "function" ? children({
      open: context2.open
    }) : children
  });
});
CollapsibleTrigger.displayName = TRIGGER_NAME;
var CONTENT_NAME = "CollapsibleContent";
var CollapsibleContentFrame = styled(Stack, {
  name: CONTENT_NAME
});
var CollapsibleContent = CollapsibleContentFrame.styleable((props, forwardedRef) => {
  const {
    forceMount,
    children,
    // @ts-expect-error
    __scopeCollapsible,
    ...contentProps
  } = props, context2 = useCollapsibleContext(__scopeCollapsible);
  return (0, import_jsx_runtime.jsx)(AnimatePresence, {
    ...contentProps,
    children: forceMount || context2.open ? (0, import_jsx_runtime.jsx)(CollapsibleContentFrame, {
      ref: forwardedRef,
      ...contentProps,
      children: (0, import_jsx_runtime.jsx)(ResetPresence, {
        children
      })
    }) : null
  });
});
CollapsibleContent.displayName = CONTENT_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
var Collapsible = withStaticProperties(_Collapsible, {
  Trigger: CollapsibleTrigger,
  Content: CollapsibleContent
});

// node_modules/@tamagui/collection/dist/esm/Collection.mjs
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
function createCollection(name) {
  const {
    Provider: CollectionProviderImpl,
    useStyledContext: useCollectionContext
  } = createStyledContext({
    collectionRef: {
      current: null
    },
    itemMap: /* @__PURE__ */ new Map()
  }), CollectionProvider = (props) => {
    const {
      __scopeCollection,
      children
    } = props, ref = import_react2.default.useRef(null), itemMap = import_react2.default.useRef(/* @__PURE__ */ new Map()).current;
    return (0, import_jsx_runtime2.jsx)(CollectionProviderImpl, {
      scope: __scopeCollection,
      itemMap,
      collectionRef: ref,
      children
    });
  };
  CollectionProvider.displayName = "CollectionProvider";
  const COLLECTION_SLOT_NAME = name + "CollectionSlot", CollectionSlot = import_react2.default.forwardRef((props, forwardedRef) => {
    const {
      __scopeCollection,
      children
    } = props, context2 = useCollectionContext(__scopeCollection), composedRefs = useComposedRefs(forwardedRef, context2.collectionRef);
    return (0, import_jsx_runtime2.jsx)(Slot, {
      ref: composedRefs,
      children
    });
  });
  CollectionSlot.displayName = COLLECTION_SLOT_NAME;
  const ITEM_SLOT_NAME = name + "CollectionItemSlot", ITEM_DATA_ATTR = "data-collection-item", CollectionItemSlot = import_react2.default.forwardRef((props, forwardedRef) => {
    const {
      __scopeCollection,
      children,
      ...itemData
    } = props, ref = import_react2.default.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), context2 = useCollectionContext(__scopeCollection);
    return import_react2.default.useEffect(() => (context2.itemMap.set(ref, {
      ref,
      ...itemData
    }), () => void context2.itemMap.delete(ref))), (0, import_jsx_runtime2.jsx)(Slot, {
      [ITEM_DATA_ATTR]: "",
      ref: composedRefs,
      children
    });
  });
  CollectionItemSlot.displayName = ITEM_SLOT_NAME;
  function useCollection3(__scopeCollection) {
    const context2 = useCollectionContext(__scopeCollection);
    return import_react2.default.useCallback(() => {
      if (!isWeb) return [];
      const collectionNode = context2.collectionRef.current;
      if (!collectionNode) return [];
      const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      return Array.from(context2.itemMap.values()).sort((a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current));
    }, [context2.collectionRef, context2.itemMap]);
  }
  return [{
    Provider: CollectionProvider,
    Slot: CollectionSlot,
    ItemSlot: CollectionItemSlot
  }, useCollection3];
}

// node_modules/@tamagui/stacks/dist/esm/getElevation.mjs
var getElevation = (size4, extras) => {
  if (!size4) return;
  const {
    tokens
  } = extras, token = tokens.size[size4], sizeNum = isVariable(token) ? +token.val : size4;
  return getSizedElevation(sizeNum, extras);
};
var getSizedElevation = (val, {
  theme,
  tokens
}) => {
  let num = 0;
  if (val === true) {
    const val2 = getVariableValue(tokens.size.true);
    typeof val2 == "number" ? num = val2 : num = 10;
  } else num = +val;
  if (num === 0) return;
  const [height, shadowRadius] = [Math.round(num / 4 + 1), Math.round(num / 2 + 2)];
  return {
    shadowColor: theme.shadowColor,
    shadowRadius,
    shadowOffset: {
      height,
      width: 0
    },
    ...isAndroid ? {
      elevationAndroid: 2 * height
    } : {}
  };
};

// node_modules/@tamagui/stacks/dist/esm/Stacks.mjs
var fullscreenStyle = {
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};
var getInset = (val) => val && typeof val == "object" ? val : {
  top: val,
  left: val,
  bottom: val,
  right: val
};
var variants = {
  fullscreen: {
    true: fullscreenStyle
  },
  elevation: {
    "...size": getElevation,
    ":number": getElevation
  },
  inset: getInset
};
var YStack = styled(View2, {
  flexDirection: "column",
  variants
});
YStack.displayName = "YStack";
var XStack = styled(View2, {
  flexDirection: "row",
  variants
});
XStack.displayName = "XStack";
var ZStack = styled(YStack, {
  position: "relative"
}, {
  neverFlatten: true,
  isZStack: true
});
ZStack.displayName = "ZStack";

// node_modules/@tamagui/get-token/dist/esm/index.mjs
var defaultOptions = {
  shift: 0,
  bounds: [0]
};
var getSize = (size4, options) => getTokenRelative("size", size4, options);
var getSpace = (space, options) => getTokenRelative("space", space, options);
var cacheVariables = {};
var cacheWholeVariables = {};
var cacheKeys = {};
var cacheWholeKeys = {};
var stepTokenUpOrDown = (type, current, options = defaultOptions) => {
  var _a, _b;
  const tokens = getTokens({
    prefixed: true
  })[type];
  if (!(type in cacheVariables)) {
    cacheKeys[type] = [], cacheVariables[type] = [], cacheWholeKeys[type] = [], cacheWholeVariables[type] = [];
    const sorted = Object.keys(tokens).map((k) => tokens[k]).sort((a, b) => a.val - b.val);
    for (const token of sorted) cacheKeys[type].push(token.key), cacheVariables[type].push(token);
    const sortedExcludingHalfSteps = sorted.filter((x) => !x.key.endsWith(".5"));
    for (const token of sortedExcludingHalfSteps) cacheWholeKeys[type].push(token.key), cacheWholeVariables[type].push(token);
  }
  const isString = typeof current == "string", tokensOrdered = (options.excludeHalfSteps ? isString ? cacheWholeKeys : cacheWholeVariables : isString ? cacheKeys : cacheVariables)[type], min2 = ((_a = options.bounds) == null ? void 0 : _a[0]) ?? 0, max2 = ((_b = options.bounds) == null ? void 0 : _b[1]) ?? tokensOrdered.length - 1, currentIndex = tokensOrdered.indexOf(current);
  let shift4 = options.shift || 0;
  shift4 && (current === "$true" || isVariable(current) && current.name === "true") && (shift4 += shift4 > 0 ? 1 : -1);
  const index3 = Math.min(max2, Math.max(min2, currentIndex + shift4)), found = tokensOrdered[index3];
  return (typeof found == "string" ? tokens[found] : found) || tokens.$true;
};
var getTokenRelative = stepTokenUpOrDown;

// node_modules/@tamagui/get-button-sized/dist/esm/index.mjs
var getButtonSized = (val, {
  tokens,
  props
}) => {
  if (!val || props.circular) return;
  if (typeof val == "number") return {
    paddingHorizontal: val * 0.25,
    height: val,
    borderRadius: props.circular ? 1e5 : val * 0.2
  };
  const xSize = getSpace(val), radiusToken = tokens.radius[val] ?? tokens.radius.$true;
  return {
    paddingHorizontal: xSize,
    height: val,
    borderRadius: props.circular ? 1e5 : radiusToken
  };
};

// node_modules/@tamagui/stacks/dist/esm/variants.mjs
var elevate = {
  true: (_, extras) => getElevation(extras.props.size, extras)
};
var bordered = (val, {
  props
}) => ({
  // TODO size it with size in '...size'
  borderWidth: typeof val == "number" ? val : 1,
  borderColor: "$borderColor",
  ...props.hoverTheme && {
    hoverStyle: {
      borderColor: "$borderColorHover"
    }
  },
  ...props.pressTheme && {
    pressStyle: {
      borderColor: "$borderColorPress"
    }
  },
  ...props.focusTheme && {
    focusStyle: {
      borderColor: "$borderColorFocus"
    }
  }
});
var padded = {
  true: (_, extras) => {
    const {
      tokens,
      props
    } = extras;
    return {
      padding: tokens.space[props.size] || tokens.space.$true
    };
  }
};
var radiused = {
  true: (_, extras) => {
    const {
      tokens,
      props
    } = extras;
    return {
      borderRadius: tokens.radius[props.size] || tokens.radius.$true
    };
  }
};
var circularStyle = {
  borderRadius: 1e5,
  padding: 0
};
var circular = {
  true: (_, {
    props,
    tokens
  }) => {
    if (!("size" in props)) return circularStyle;
    const size4 = typeof props.size == "number" ? props.size : tokens.size[props.size];
    return {
      ...circularStyle,
      width: size4,
      height: size4,
      maxWidth: size4,
      maxHeight: size4,
      minWidth: size4,
      minHeight: size4
    };
  }
};
var hoverTheme = {
  true: {
    hoverStyle: {
      backgroundColor: "$backgroundHover",
      borderColor: "$borderColorHover"
    }
  },
  false: {}
};
var pressTheme = {
  true: {
    cursor: "pointer",
    pressStyle: {
      backgroundColor: "$backgroundPress",
      borderColor: "$borderColorPress"
    }
  },
  false: {}
};
var focusTheme = {
  true: {
    focusStyle: {
      backgroundColor: "$backgroundFocus",
      borderColor: "$borderColorFocus"
    }
  },
  false: {}
};

// node_modules/@tamagui/stacks/dist/esm/SizableStack.mjs
var SizableStack = styled(XStack, {
  name: "SizableStack",
  variants: {
    unstyled: {
      true: {
        hoverTheme: false,
        pressTheme: false,
        focusTheme: false,
        elevate: false,
        bordered: false
      }
    },
    hoverTheme,
    pressTheme,
    focusTheme,
    circular,
    elevate,
    bordered,
    size: {
      "...size": (val, extras) => getButtonSized(val, extras)
    }
  }
});

// node_modules/@tamagui/stacks/dist/esm/ThemeableStack.mjs
var chromelessStyle = {
  backgroundColor: "transparent",
  borderColor: "transparent",
  shadowColor: "transparent",
  hoverStyle: {
    borderColor: "transparent"
  }
};
var themeableVariants = {
  backgrounded: {
    true: {
      backgroundColor: "$background"
    }
  },
  radiused,
  hoverTheme,
  pressTheme,
  focusTheme,
  circular,
  padded,
  elevate,
  bordered,
  transparent: {
    true: {
      backgroundColor: "transparent"
    }
  },
  chromeless: {
    true: chromelessStyle,
    all: {
      ...chromelessStyle,
      hoverStyle: chromelessStyle,
      pressStyle: chromelessStyle,
      focusStyle: chromelessStyle
    }
  }
};
var ThemeableStack = styled(YStack, {
  variants: themeableVariants
});

// node_modules/@tamagui/stacks/dist/esm/NestingContext.mjs
var import_react3 = __toESM(require_react(), 1);
var ButtonNestingContext = import_react3.default.createContext(false);

// node_modules/@tamagui/get-font-sized/dist/esm/index.mjs
var getFontSized = (sizeTokenIn = "$true", {
  font,
  fontFamily,
  props
}) => {
  var _a, _b, _c, _d, _e, _f;
  if (!font) return {
    fontSize: sizeTokenIn
  };
  const sizeToken = sizeTokenIn === "$true" ? getDefaultSizeToken(font) : sizeTokenIn, style = {}, fontSize = font.size[sizeToken], lineHeight = (_a = font.lineHeight) == null ? void 0 : _a[sizeToken], fontWeight = (_b = font.weight) == null ? void 0 : _b[sizeToken], letterSpacing = (_c = font.letterSpacing) == null ? void 0 : _c[sizeToken], textTransform = (_d = font.transform) == null ? void 0 : _d[sizeToken], fontStyle = props.fontStyle ?? ((_e = font.style) == null ? void 0 : _e[sizeToken]), color = props.color ?? ((_f = font.color) == null ? void 0 : _f[sizeToken]);
  return fontStyle && (style.fontStyle = fontStyle), textTransform && (style.textTransform = textTransform), fontFamily && (style.fontFamily = fontFamily), fontWeight && (style.fontWeight = fontWeight), letterSpacing && (style.letterSpacing = letterSpacing), fontSize && (style.fontSize = fontSize), lineHeight && (style.lineHeight = lineHeight), color && (style.color = color), props.debug && props.debug === "verbose" && (console.groupCollapsed("  🔹 getFontSized", sizeTokenIn, sizeToken), isClient && console.info({
    style,
    props,
    font
  }), console.groupEnd()), style;
};
var cache = /* @__PURE__ */ new WeakMap();
function getDefaultSizeToken(font) {
  if (typeof font == "object" && cache.has(font)) return cache.get(font);
  const sizeTokens = "$true" in font.size ? font.size : getTokens().size, sizeDefault = sizeTokens.$true, sizeDefaultSpecific = sizeDefault ? Object.keys(sizeTokens).find((x) => x !== "$true" && sizeTokens[x].val === sizeDefault.val) : null;
  return !sizeDefault || !sizeDefaultSpecific ? (console.warn(`No default size is set in your tokens for the "true" key, fonts will be inconsistent.

      Fix this by having consistent tokens across fonts and sizes and setting a true key for your size tokens, or
      set true keys for all your font tokens: "size", "lineHeight", "fontStyle", etc.`), Object.keys(font.size)[3]) : (cache.set(font, sizeDefaultSpecific), sizeDefaultSpecific);
}

// node_modules/@tamagui/text/dist/esm/SizableText.mjs
var SizableText = styled(Text, {
  name: "SizableText",
  fontFamily: "$body",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        color: "$color"
      }
    },
    size: getFontSized
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
SizableText.staticConfig.variants.fontFamily = {
  "...": (_val, extras) => {
    const sizeProp = extras.props.size, fontSizeProp = extras.props.fontSize, size4 = sizeProp === "$true" && fontSizeProp ? fontSizeProp : extras.props.size || "$true";
    return getFontSized(size4, extras);
  }
};

// node_modules/@tamagui/text/dist/esm/Paragraph.mjs
var Paragraph = styled(SizableText, {
  name: "Paragraph",
  tag: "p",
  userSelect: "auto",
  color: "$color",
  size: "$true",
  whiteSpace: "normal"
});

// node_modules/@tamagui/text/dist/esm/Headings.mjs
var Heading = styled(Paragraph, {
  tag: "span",
  name: "Heading",
  accessibilityRole: "header",
  fontFamily: "$heading",
  size: "$8",
  margin: 0
});
var H1 = styled(Heading, {
  name: "H1",
  tag: "h1",
  variants: {
    unstyled: {
      false: {
        size: "$10"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var H2 = styled(Heading, {
  name: "H2",
  tag: "h2",
  variants: {
    unstyled: {
      false: {
        size: "$9"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var H3 = styled(Heading, {
  name: "H3",
  tag: "h3",
  variants: {
    unstyled: {
      false: {
        size: "$8"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var H4 = styled(Heading, {
  name: "H4",
  tag: "h4",
  variants: {
    unstyled: {
      false: {
        size: "$7"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var H5 = styled(Heading, {
  name: "H5",
  tag: "h5",
  variants: {
    unstyled: {
      false: {
        size: "$6"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var H6 = styled(Heading, {
  name: "H6",
  tag: "h6",
  variants: {
    unstyled: {
      false: {
        size: "$5"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});

// node_modules/@tamagui/text/dist/esm/wrapChildrenInText.mjs
var import_react4 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function wrapChildrenInText(TextComponent, propsIn, extraProps) {
  const {
    children,
    textProps,
    size: size4,
    noTextWrap,
    color,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    textAlign,
    fontStyle,
    maxFontSizeMultiplier
  } = propsIn;
  if (noTextWrap || !children) return [children];
  const props = {
    ...extraProps
  };
  return color && (props.color = color), fontFamily && (props.fontFamily = fontFamily), fontSize && (props.fontSize = fontSize), fontWeight && (props.fontWeight = fontWeight), letterSpacing && (props.letterSpacing = letterSpacing), textAlign && (props.textAlign = textAlign), size4 && (props.size = size4), fontStyle && (props.fontStyle = fontStyle), maxFontSizeMultiplier && (props.maxFontSizeMultiplier = maxFontSizeMultiplier), import_react4.default.Children.toArray(children).map((child, index3) => typeof child == "string" ? (
    // so "data-disable-theme" is a hack to fix themeInverse, don't ask me why
    (0, import_jsx_runtime3.jsx)(TextComponent, {
      ...props,
      ...textProps,
      children: child
    }, index3)
  ) : child);
}

// node_modules/@tamagui/use-direction/dist/esm/useDirection.mjs
var React6 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var DirectionContext = React6.createContext(void 0);
function useDirection(localDir) {
  const globalDir = React6.useContext(DirectionContext);
  return localDir || globalDir || "ltr";
}

// node_modules/@tamagui/accordion/dist/esm/Accordion.mjs
var React7 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var ACCORDION_NAME = "Accordion";
var ACCORDION_KEYS = ["Home", "End", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"];
var [Collection, useCollection] = createCollection(ACCORDION_NAME);
var ACCORDION_CONTEXT = "Accordion";
var AccordionComponent = React7.forwardRef((props, forwardedRef) => {
  const {
    type,
    ...accordionProps
  } = props, singleProps = accordionProps, multipleProps = accordionProps;
  return (0, import_jsx_runtime5.jsx)(Collection.Provider, {
    __scopeCollection: props.__scopeAccordion || ACCORDION_CONTEXT,
    children: type === "multiple" ? (0, import_jsx_runtime5.jsx)(AccordionImplMultiple, {
      ...multipleProps,
      ref: forwardedRef
    }) : (0, import_jsx_runtime5.jsx)(AccordionImplSingle, {
      ...singleProps,
      ref: forwardedRef
    })
  });
});
AccordionComponent.displayName = ACCORDION_NAME;
AccordionComponent.propTypes = {
  type(props) {
    const value = props.value || props.defaultValue;
    return props.type && !["single", "multiple"].includes(props.type) ? new Error("Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.") : props.type === "multiple" && typeof value == "string" ? new Error("Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.") : props.type === "single" && Array.isArray(value) ? new Error("Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.") : null;
  }
};
var {
  Provider: AccordionValueProvider,
  useStyledContext: useAccordionValueContext
} = createStyledContext();
var {
  Provider: AccordionCollapsibleProvider,
  useStyledContext: useAccordionCollapsibleContext
} = createStyledContext();
var AccordionImplSingle = React7.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    control,
    onValueChange = () => {
    },
    collapsible = false,
    ...accordionSingleProps
  } = props, [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue || "",
    onChange: onValueChange
  });
  return (0, import_jsx_runtime5.jsx)(AccordionValueProvider, {
    scope: props.__scopeAccordion,
    value: value ? [value] : [],
    onItemOpen: setValue,
    onItemClose: React7.useCallback(() => collapsible && setValue(""), [setValue, collapsible]),
    children: (0, import_jsx_runtime5.jsx)(AccordionCollapsibleProvider, {
      scope: props.__scopeAccordion,
      collapsible,
      children: (0, import_jsx_runtime5.jsx)(AccordionImpl, {
        ...accordionSingleProps,
        ref: forwardedRef
      })
    })
  });
});
var AccordionImplMultiple = React7.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...accordionMultipleProps
  } = props, [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue || [],
    onChange: onValueChange
  }), handleItemOpen = React7.useCallback((itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]), [setValue]), handleItemClose = React7.useCallback((itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)), [setValue]);
  return (0, import_jsx_runtime5.jsx)(AccordionValueProvider, {
    scope: props.__scopeAccordion,
    value: value || [],
    onItemOpen: handleItemOpen,
    onItemClose: handleItemClose,
    children: (0, import_jsx_runtime5.jsx)(AccordionCollapsibleProvider, {
      scope: props.__scopeAccordion,
      collapsible: true,
      children: (0, import_jsx_runtime5.jsx)(AccordionImpl, {
        ...accordionMultipleProps,
        ref: forwardedRef
      })
    })
  });
});
var {
  Provider: AccordionImplProvider,
  useStyledContext: useAccordionContext
} = createStyledContext();
var AccordionImpl = React7.forwardRef((props, forwardedRef) => {
  const {
    __scopeAccordion,
    disabled,
    dir,
    orientation = "vertical",
    ...accordionProps
  } = props, accordionRef = React7.useRef(null), composedRef = useComposedRefs(accordionRef, forwardedRef), getItems = useCollection(__scopeAccordion || ACCORDION_CONTEXT), isDirectionLTR = useDirection(dir) === "ltr", handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {
    var _a;
    if (!ACCORDION_KEYS.includes(event.key)) return;
    const target = event.target, triggerCollection = getItems().filter((item) => {
      var _a2;
      return !((_a2 = item.ref.current) == null ? void 0 : _a2.disabled);
    }), triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target), triggerCount = triggerCollection.length;
    if (triggerIndex === -1) return;
    event.preventDefault();
    let nextIndex = triggerIndex;
    const homeIndex = 0, endIndex = triggerCount - 1, moveNext = () => {
      nextIndex = triggerIndex + 1, nextIndex > endIndex && (nextIndex = homeIndex);
    }, movePrev = () => {
      nextIndex = triggerIndex - 1, nextIndex < homeIndex && (nextIndex = endIndex);
    };
    switch (event.key) {
      case "Home":
        nextIndex = homeIndex;
        break;
      case "End":
        nextIndex = endIndex;
        break;
      case "ArrowRight":
        orientation === "horizontal" && (isDirectionLTR ? moveNext() : movePrev());
        break;
      case "ArrowDown":
        orientation === "vertical" && moveNext();
        break;
      case "ArrowLeft":
        orientation === "horizontal" && (isDirectionLTR ? movePrev() : moveNext());
        break;
      case "ArrowUp":
        orientation === "vertical" && movePrev();
        break;
    }
    const clampedIndex = nextIndex % triggerCount;
    (_a = triggerCollection[clampedIndex].ref.current) == null ? void 0 : _a.focus();
  });
  return (0, import_jsx_runtime5.jsx)(AccordionImplProvider, {
    scope: __scopeAccordion,
    disabled,
    direction: dir,
    orientation,
    children: (0, import_jsx_runtime5.jsx)(Collection.Slot, {
      __scopeCollection: __scopeAccordion || ACCORDION_CONTEXT,
      children: (0, import_jsx_runtime5.jsx)(YStack, {
        "data-orientation": orientation,
        ref: composedRef,
        ...accordionProps,
        ...isWeb && {
          onKeyDown: handleKeyDown
        }
      })
    })
  });
});
var ITEM_NAME = "AccordionItem";
var {
  Provider: AccordionItemProvider,
  useStyledContext: useAccordionItemContext
} = createStyledContext();
var AccordionItem = React7.forwardRef((props, forwardedRef) => {
  const {
    __scopeAccordion,
    value,
    ...accordionItemProps
  } = props, accordionContext = useAccordionContext(__scopeAccordion), valueContext = useAccordionValueContext(__scopeAccordion), triggerId = React7.useId(), open = value && valueContext.value.includes(value) || false, disabled = accordionContext.disabled || props.disabled;
  return (0, import_jsx_runtime5.jsx)(AccordionItemProvider, {
    scope: __scopeAccordion,
    open,
    disabled,
    triggerId,
    children: (0, import_jsx_runtime5.jsx)(Collapsible, {
      "data-orientation": accordionContext.orientation,
      "data-state": open ? "open" : "closed",
      __scopeCollapsible: __scopeAccordion || ACCORDION_CONTEXT,
      ...accordionItemProps,
      ref: forwardedRef,
      disabled,
      open,
      onOpenChange: (open2) => {
        open2 ? valueContext.onItemOpen(value) : valueContext.onItemClose(value);
      }
    })
  });
});
AccordionItem.displayName = ITEM_NAME;
var HEADER_NAME = "AccordionHeader";
var AccordionHeader = React7.forwardRef((props, forwardedRef) => {
  const {
    __scopeAccordion,
    ...headerProps
  } = props, accordionContext = useAccordionContext(__scopeAccordion), itemContext = useAccordionItemContext(__scopeAccordion);
  return (0, import_jsx_runtime5.jsx)(H1, {
    "data-orientation": accordionContext.orientation,
    "data-state": getState2(itemContext.open),
    "data-disabled": itemContext.disabled ? "" : void 0,
    ...headerProps,
    ref: forwardedRef
  });
});
AccordionHeader.displayName = HEADER_NAME;
var AccordionTriggerFrame = styled(Collapsible.Trigger, {
  variants: {
    unstyled: {
      false: {
        cursor: "pointer",
        backgroundColor: "$background",
        borderColor: "$borderColor",
        borderWidth: 1,
        padding: "$true",
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        },
        pressStyle: {
          backgroundColor: "$backgroundPress"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var AccordionTrigger = AccordionTriggerFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeAccordion,
    ...triggerProps
  } = props, accordionContext = useAccordionContext(__scopeAccordion), itemContext = useAccordionItemContext(__scopeAccordion), collapsibleContext = useAccordionCollapsibleContext(__scopeAccordion);
  return (0, import_jsx_runtime5.jsx)(Collection.ItemSlot, {
    __scopeCollection: __scopeAccordion || ACCORDION_CONTEXT,
    children: (0, import_jsx_runtime5.jsx)(AccordionTriggerFrame, {
      __scopeCollapsible: __scopeAccordion || ACCORDION_CONTEXT,
      "aria-disabled": itemContext.open && !collapsibleContext.collapsible || void 0,
      "data-orientation": accordionContext.orientation,
      id: itemContext.triggerId,
      ...triggerProps,
      ref: forwardedRef
    })
  });
});
var AccordionContentFrame = styled(Collapsible.Content, {
  variants: {
    unstyled: {
      false: {
        padding: "$true",
        backgroundColor: "$background"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var AccordionContent = AccordionContentFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeAccordion,
    ...contentProps
  } = props, accordionContext = useAccordionContext(__scopeAccordion), itemContext = useAccordionItemContext(__scopeAccordion);
  return (0, import_jsx_runtime5.jsx)(AccordionContentFrame, {
    role: "region",
    "aria-labelledby": itemContext.triggerId,
    "data-orientation": accordionContext.orientation,
    __scopeCollapsible: __scopeAccordion || ACCORDION_CONTEXT,
    ...contentProps,
    ref: forwardedRef
  });
});
var HeightAnimator = View.styleable((props, ref) => {
  const itemContext = useAccordionItemContext(), {
    children,
    ...rest
  } = props, [height, setHeight] = React7.useState(0), onLayout = useEvent(({
    nativeEvent
  }) => {
    nativeEvent.layout.height && setHeight(nativeEvent.layout.height);
  });
  return (0, import_jsx_runtime5.jsx)(View, {
    ref,
    height: itemContext.open ? height : 0,
    ...rest,
    children: (0, import_jsx_runtime5.jsx)(View, {
      position: "absolute",
      width: "100%",
      onLayout,
      children
    })
  });
});
function getState2(open) {
  return open ? "open" : "closed";
}
var Accordion = withStaticProperties(AccordionComponent, {
  Trigger: AccordionTrigger,
  Header: AccordionHeader,
  Content: AccordionContent,
  Item: AccordionItem,
  HeightAnimator
});

// node_modules/@tamagui/z-index-stack/dist/esm/useStackedZIndex.mjs
var import_react6 = __toESM(require_react(), 1);

// node_modules/@tamagui/z-index-stack/dist/esm/context.mjs
var import_react5 = __toESM(require_react(), 1);
var ZIndexStackContext = (0, import_react5.createContext)(1);
var ZIndexHardcodedContext = (0, import_react5.createContext)(void 0);

// node_modules/@tamagui/z-index-stack/dist/esm/useStackedZIndex.mjs
var ZIndicesByContext = {};
var useStackedZIndex = (props) => {
  const {
    stackZIndex,
    zIndex: zIndexProp
  } = props, id = (0, import_react6.useId)(), stackingContextLevel = (0, import_react6.useContext)(ZIndexStackContext), hardcoded = (0, import_react6.useContext)(ZIndexHardcodedContext);
  ZIndicesByContext[stackingContextLevel] || (ZIndicesByContext[stackingContextLevel] = {});
  const stackContext = ZIndicesByContext[stackingContextLevel], zIndex = (0, import_react6.useMemo)(() => {
    if (typeof zIndexProp == "number") return zIndexProp;
    if (stackZIndex) {
      if (hardcoded) return hardcoded + 1;
      const highest = Object.values(stackContext).reduce((acc, cur) => Math.max(acc, cur), 0), found = stackingContextLevel * 5e3 + highest + 1;
      return typeof stackZIndex == "number" ? stackZIndex + found : found;
    }
    return 1;
  }, [stackingContextLevel, zIndexProp, stackZIndex]);
  return (0, import_react6.useEffect)(() => {
    if (stackZIndex) return stackContext[id] = zIndex, () => {
      delete stackContext[id];
    };
  }, [zIndex]), zIndex;
};

// node_modules/@tamagui/z-index-stack/dist/esm/StackZIndex.mjs
var import_react7 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var StackZIndexContext = ({
  children,
  zIndex
}) => {
  const existing = (0, import_react7.useContext)(ZIndexStackContext);
  let content = (0, import_jsx_runtime6.jsx)(ZIndexStackContext.Provider, {
    value: existing + 1,
    children
  });
  return typeof zIndex < "u" && (content = (0, import_jsx_runtime6.jsx)(ZIndexHardcodedContext.Provider, {
    value: zIndex,
    children: content
  })), content;
};

// node_modules/@tamagui/polyfill-dev/index.js
if (typeof globalThis["__DEV__"] === "undefined") {
  globalThis["__DEV__"] = true;
}

// node_modules/@tamagui/portal/dist/esm/Portal.mjs
var React8 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);

// node_modules/@tamagui/portal/dist/esm/helpers.mjs
var getStackedZIndexProps = (propsIn) => ({
  stackZIndex: propsIn.stackZIndex,
  zIndex: resolveViewZIndex(propsIn.zIndex)
});
var resolveViewZIndex = (zIndex) => typeof zIndex > "u" || zIndex === "unset" ? void 0 : typeof zIndex == "number" ? zIndex : getTokenValue(zIndex, "zIndex");

// node_modules/@tamagui/portal/dist/esm/Portal.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var Portal = React8.memo((propsIn) => {
  var _a;
  if (isServer) return null;
  const {
    host = (_a = globalThis.document) == null ? void 0 : _a.body,
    stackZIndex,
    children,
    ...props
  } = propsIn, zIndex = useStackedZIndex(getStackedZIndexProps(propsIn));
  return (0, import_react_dom.createPortal)((0, import_jsx_runtime7.jsx)(YStack, {
    contain: "strict",
    fullscreen: true,
    position: "fixed",
    maxWidth: "100vw",
    maxHeight: "100vh",
    pointerEvents: "none",
    ...props,
    zIndex,
    children
  }), host);
});

// node_modules/@tamagui/portal/dist/esm/GorhomPortal.mjs
var import_react8 = __toESM(require_react(), 1);

// node_modules/@tamagui/portal/dist/esm/constants.mjs
var IS_FABRIC = typeof global < "u" && !!(global._IS_FABRIC ?? global.nativeFabricUIManager);
var USE_NATIVE_PORTAL = process.env.TAMAGUI_USE_NATIVE_PORTAL && process.env.TAMAGUI_USE_NATIVE_PORTAL !== "false" ? true : !isAndroid && !IS_FABRIC;
var allPortalHosts = /* @__PURE__ */ new Map();
var portalListeners = {};

// node_modules/@tamagui/portal/dist/esm/GorhomPortal.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var ACTIONS = ((ACTIONS2) => (ACTIONS2[ACTIONS2.REGISTER_HOST = 0] = "REGISTER_HOST", ACTIONS2[ACTIONS2.DEREGISTER_HOST = 1] = "DEREGISTER_HOST", ACTIONS2[ACTIONS2.ADD_UPDATE_PORTAL = 2] = "ADD_UPDATE_PORTAL", ACTIONS2[ACTIONS2.REMOVE_PORTAL = 3] = "REMOVE_PORTAL", ACTIONS2))(ACTIONS || {});
var INITIAL_STATE = {};
var registerHost = (state, hostName) => (hostName in state || (state[hostName] = []), state);
var deregisterHost = (state, hostName) => (delete state[hostName], state);
var addUpdatePortal = (state, hostName, portalName, node) => {
  hostName in state || (state = registerHost(state, hostName));
  const index3 = state[hostName].findIndex((item) => item.name === portalName);
  return index3 !== -1 ? state[hostName][index3].node = node : state[hostName].push({
    name: portalName,
    node
  }), state;
};
var removePortal = (state, hostName, portalName) => {
  if (!(hostName in state)) return console.info(`Failed to remove portal '${portalName}', '${hostName}' was not registered!`), state;
  const index3 = state[hostName].findIndex((item) => item.name === portalName);
  return index3 !== -1 && state[hostName].splice(index3, 1), state;
};
var reducer = (state, action) => {
  const {
    type
  } = action;
  switch (type) {
    case 0:
      return registerHost({
        ...state
      }, action.hostName);
    case 1:
      return deregisterHost({
        ...state
      }, action.hostName);
    case 2:
      return addUpdatePortal({
        ...state
      }, action.hostName, action.portalName, action.node);
    case 3:
      return removePortal({
        ...state
      }, action.hostName, action.portalName);
    default:
      return state;
  }
};
var PortalStateContext = (0, import_react8.createContext)(null);
var PortalDispatchContext = (0, import_react8.createContext)(null);
var usePortalState = (hostName) => {
  const state = (0, import_react8.useContext)(PortalStateContext);
  if (state === null) throw new Error("'PortalStateContext' cannot be null, please add 'PortalProvider' to the root component.");
  return state[hostName] || [];
};
var usePortal = (hostName = "root") => {
  const dispatch = (0, import_react8.useContext)(PortalDispatchContext);
  if (dispatch === null) throw new Error("'PortalDispatchContext' cannot be null, please add 'PortalProvider' to the root component.");
  const registerHost2 = (0, import_react8.useCallback)(() => {
    dispatch({
      type: 0,
      hostName
    });
  }, []), deregisterHost2 = (0, import_react8.useCallback)(() => {
    dispatch({
      type: 1,
      hostName
    });
  }, []), addUpdatePortal2 = (0, import_react8.useCallback)((name, node) => {
    dispatch({
      type: 2,
      hostName,
      portalName: name,
      node
    });
  }, []), removePortal2 = (0, import_react8.useCallback)((name) => {
    dispatch({
      type: 3,
      hostName,
      portalName: name
    });
  }, []);
  return {
    registerHost: registerHost2,
    deregisterHost: deregisterHost2,
    addPortal: addUpdatePortal2,
    updatePortal: addUpdatePortal2,
    removePortal: removePortal2
  };
};
var PortalProviderComponent = ({
  rootHostName = "root",
  shouldAddRootHost = true,
  children
}) => {
  const [state, dispatch] = (0, import_react8.useReducer)(reducer, INITIAL_STATE), transitionDispatch = (0, import_react8.useMemo)(() => (value) => {
    startTransition(() => {
      dispatch(value);
    });
  }, [dispatch]);
  return (0, import_jsx_runtime8.jsx)(PortalDispatchContext.Provider, {
    value: transitionDispatch,
    children: (0, import_jsx_runtime8.jsxs)(PortalStateContext.Provider, {
      value: state,
      children: [children, shouldAddRootHost && (0, import_jsx_runtime8.jsx)(PortalHost, {
        name: rootHostName
      })]
    })
  });
};
var PortalProvider = (0, import_react8.memo)(PortalProviderComponent);
PortalProvider.displayName = "PortalProvider";
var defaultRenderer = (children) => (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, {
  children
});
var PortalHost = (0, import_react8.memo)(function(props) {
  return isWeb ? (0, import_jsx_runtime8.jsx)(PortalHostWeb, {
    ...props
  }) : (0, import_jsx_runtime8.jsx)(PortalHostNonNative, {
    ...props
  });
});
function PortalHostWeb(props) {
  const [mounted, setMounted] = (0, import_react8.useState)(false);
  return (0, import_react8.useEffect)(() => (setMounted(true), () => {
    setMounted(false), allPortalHosts.delete(props.name);
  }), [props.name]), (0, import_jsx_runtime8.jsx)("div", {
    style: {
      display: "contents"
    },
    ref: (node) => {
      var _a;
      node && mounted && (allPortalHosts.set(props.name, node), (_a = portalListeners[props.name]) == null ? void 0 : _a.forEach((x) => x(node)));
    }
  });
}
function PortalHostNonNative(props) {
  const {
    name,
    forwardProps,
    render = defaultRenderer
  } = props, state = usePortalState(name), {
    registerHost: registerHost2,
    deregisterHost: deregisterHost2
  } = usePortal(props.name);
  return (0, import_react8.useEffect)(() => {
    if (!(typeof window > "u")) return registerHost2(), () => {
      deregisterHost2();
    };
  }, []), render(forwardProps ? state.map((item) => {
    let next = item.node;
    const {
      children,
      ...restForwardProps
    } = forwardProps;
    return forwardProps ? import_react8.default.Children.map(next, (child) => import_react8.default.isValidElement(child) ? import_react8.default.cloneElement(child, {
      key: child.key,
      ...restForwardProps
    }) : child) : next;
  }) : state.map((item) => item.node));
}

// node_modules/@tamagui/portal/dist/esm/GorhomPortalItem.mjs
var import_react9 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var GorhomPortalItem = (props) => {
  if (!props.hostName) throw new Error("No name");
  const cur = allPortalHosts.get(props.hostName), [node, setNode] = (0, import_react9.useState)(cur);
  return cur && node !== cur && setNode(cur), (0, import_react9.useEffect)(() => {
    var _a, _b;
    if (!props.hostName || node) return;
    const listener = (node2) => {
      setNode(node2);
    };
    return (_a = portalListeners)[_b = props.hostName] || (_a[_b] = /* @__PURE__ */ new Set()), portalListeners[props.hostName].add(listener), () => {
      var _a2;
      (_a2 = portalListeners[props.hostName]) == null ? void 0 : _a2.delete(listener);
    };
  }, [node]), node ? (0, import_react_dom2.createPortal)(props.children, node) : null;
};

// node_modules/@tamagui/adapt/dist/esm/Adapt.mjs
var import_react10 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var CurrentAdaptContextScope = (0, import_react10.createContext)("");
var AdaptContext = createStyledContext({
  Contents: null,
  scopeName: "",
  portalName: "",
  platform: null,
  setPlatform: (x) => {
  },
  when: null,
  setChildren: null,
  setWhen: () => {
  }
});
var ProvideAdaptContext = ({
  children,
  ...context2
}) => {
  const scope = context2.scopeName || "";
  return (0, import_jsx_runtime9.jsx)(CurrentAdaptContextScope.Provider, {
    value: scope,
    children: (0, import_jsx_runtime9.jsx)(AdaptContext.Provider, {
      scope,
      ...context2,
      children
    })
  });
};
var useAdaptContext = (scope = "") => {
  const contextScope = (0, import_react10.useContext)(CurrentAdaptContextScope);
  return AdaptContext.useStyledContext(scope === "" && contextScope || scope);
};
var AdaptPortals = /* @__PURE__ */ new Map();
var AdaptParent = ({
  children,
  Contents,
  scope,
  portal
}) => {
  const portalName = `AdaptPortal${scope}`, id = (0, import_react10.useId)();
  let FinalContents = Contents || AdaptPortals.get(id);
  FinalContents || (FinalContents = () => (0, import_jsx_runtime9.jsx)(PortalHost, {
    name: portalName,
    forwardProps: typeof portal == "boolean" ? void 0 : portal == null ? void 0 : portal.forwardProps
  }), AdaptPortals.set(id, FinalContents)), (0, import_react10.useEffect)(() => () => {
    AdaptPortals.delete(id);
  }, []);
  const [when, setWhen] = import_react10.default.useState(null), [platform2, setPlatform] = import_react10.default.useState(null), [children2, setChildren] = import_react10.default.useState(null);
  return (0, import_jsx_runtime9.jsx)(ProvideAdaptContext, {
    Contents: FinalContents,
    when,
    platform: platform2,
    setPlatform,
    setWhen,
    setChildren,
    portalName,
    scopeName: scope,
    children
  });
};
var AdaptContents = ({
  scope,
  ...rest
}) => {
  const context2 = useAdaptContext(scope);
  if (!(context2 == null ? void 0 : context2.Contents)) throw new Error(false ? "tamagui.dev/docs/intro/errors#warning-002" : "You're rendering a Tamagui <Adapt /> component without nesting it inside a parent that is able to adapt.");
  return import_react10.default.createElement(context2.Contents, {
    ...rest,
    key: "stable"
  });
};
AdaptContents.shouldForwardSpace = true;
var Adapt = withStaticProperties(function(props) {
  const {
    platform: platform2,
    when,
    children,
    scope
  } = props, context2 = useAdaptContext(scope), scopeName = scope ?? context2.scopeName, enabled = useAdaptIsActiveGiven(props);
  useIsomorphicLayoutEffect(() => {
    var _a, _b;
    (_a = context2 == null ? void 0 : context2.setWhen) == null ? void 0 : _a.call(context2, when || enabled), (_b = context2 == null ? void 0 : context2.setPlatform) == null ? void 0 : _b.call(context2, platform2 || null);
  }, [when, platform2, context2, enabled]), useIsomorphicLayoutEffect(() => () => {
    var _a, _b;
    (_a = context2 == null ? void 0 : context2.setWhen) == null ? void 0 : _a.call(context2, null), (_b = context2 == null ? void 0 : context2.setPlatform) == null ? void 0 : _b.call(context2, null);
  }, []);
  let output;
  if (typeof children == "function") {
    const Component = context2 == null ? void 0 : context2.Contents;
    output = children(Component ? (0, import_jsx_runtime9.jsx)(Component, {}) : null);
  } else output = children;
  return useIsomorphicLayoutEffect(() => {
    typeof children == "function" && output !== void 0 && (context2 == null ? void 0 : context2.setChildren(output));
  }, [output]), (0, import_jsx_runtime9.jsx)(StackZIndexContext, {
    children: (0, import_jsx_runtime9.jsx)(CurrentAdaptContextScope.Provider, {
      value: scopeName,
      children: enabled ? output : null
    })
  });
}, {
  Contents: AdaptContents
});
var AdaptPortalContents = (props) => {
  const {
    portalName
  } = useAdaptContext(props.scope);
  return (0, import_jsx_runtime9.jsx)(GorhomPortalItem, {
    hostName: portalName,
    children: props.children
  });
};
var useAdaptIsActiveGiven = ({
  when,
  platform: platform2
}) => {
  const media = useMedia();
  if (when == null && platform2 == null) return false;
  let enabled = false;
  return platform2 === "touch" ? enabled = isTouchable : platform2 === "native" ? enabled = !isWeb : platform2 === "web" ? enabled = isWeb : platform2 === "ios" ? enabled = isIos : platform2 === "android" && (enabled = isAndroid), platform2 && enabled == false ? false : (when && typeof when == "string" && (enabled = media[when]), enabled);
};
var useAdaptIsActive = (scope) => {
  const props = useAdaptContext(scope);
  return useAdaptIsActiveGiven(props);
};

// node_modules/@tamagui/create-context/dist/esm/create-context.mjs
var React11 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
function createContext6(rootComponentName, defaultContext) {
  const Context = React11.createContext(defaultContext);
  function Provider(props) {
    const {
      children,
      ...context2
    } = props, value = React11.useMemo(() => context2, Object.values(context2));
    return (0, import_jsx_runtime10.jsx)(Context.Provider, {
      value,
      children
    });
  }
  function useContext15(consumerName) {
    const context2 = React11.useContext(Context);
    if (context2) return context2;
    if (defaultContext !== void 0) return defaultContext;
    throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
  }
  return [Provider, useContext15];
}
function createContextScope(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function createContext22(rootComponentName, defaultContext) {
    const BaseContext = React11.createContext(defaultContext), index3 = defaultContexts.length;
    defaultContexts = [...defaultContexts, defaultContext];
    function Provider(props) {
      var _a;
      const {
        scope,
        children,
        ...context2
      } = props, Context = ((_a = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a[index3]) || BaseContext, value = React11.useMemo(() => context2, Object.values(context2));
      return (0, import_jsx_runtime10.jsx)(Context.Provider, {
        value,
        children
      });
    }
    function useContext15(consumerName, scope, options) {
      var _a;
      const Context = ((_a = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a[index3]) || BaseContext, context2 = React11.useContext(Context);
      if (context2) return context2;
      if (defaultContext !== void 0) return defaultContext;
      const missingContextMessage = `\`${consumerName}\` must be used within \`${rootComponentName}\``;
      if (options == null ? void 0 : options.fallback) return (options == null ? void 0 : options.warn) !== false && console.warn(missingContextMessage), options.fallback;
      throw new Error(missingContextMessage);
    }
    return [Provider, useContext15];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => React11.createContext(defaultContext));
    return function(scope) {
      const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
      return React11.useMemo(() => ({
        [`__scope${scopeName}`]: {
          ...scope,
          [scopeName]: contexts
        }
      }), [scope, contexts]);
    };
  };
  return createScope.scopeName = scopeName, [createContext22, composeContextScopes(createScope, ...createContextScopeDeps)];
}
function composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1) return baseScope;
  const createScope = () => {
    const scopeHooks = scopes.map((createScope2) => ({
      useScope: createScope2(),
      scopeName: createScope2.scopeName
    }));
    return function(overrideScopes) {
      const nextScopes = scopeHooks.reduce((nextScopes2, {
        useScope,
        scopeName
      }) => {
        const currentScope = useScope(overrideScopes)[`__scope${scopeName}`];
        return {
          ...nextScopes2,
          ...currentScope
        };
      }, {});
      return React11.useMemo(() => ({
        [`__scope${baseScope.scopeName}`]: nextScopes
      }), [nextScopes]);
    };
  };
  return createScope.scopeName = baseScope.scopeName, createScope;
}

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = /* @__PURE__ */ new WeakMap();
var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
var markerMap = {};
var lockCount = 0;
var unwrapHost = function(node) {
  return node && (node.host || unwrapHost(node.parentNode));
};
var correctTargets = function(parent, targets) {
  return targets.map(function(target) {
    if (parent.contains(target)) {
      return target;
    }
    var correctedTarget = unwrapHost(target);
    if (correctedTarget && parent.contains(correctedTarget)) {
      return correctedTarget;
    }
    console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
    return null;
  }).filter(function(x) {
    return Boolean(x);
  });
};
var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  if (!markerMap[markerName]) {
    markerMap[markerName] = /* @__PURE__ */ new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = /* @__PURE__ */ new Set();
  var elementsToStop = new Set(targets);
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node) {
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        try {
          var attr2 = node.getAttribute(controlAttribute);
          var alreadyHidden = attr2 !== null && attr2 !== "false";
          var counterValue = (counterMap.get(node) || 0) + 1;
          var markerValue = (markerCounter.get(node) || 0) + 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          hiddenNodes.push(node);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node, true);
          }
          if (markerValue === 1) {
            node.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node.setAttribute(controlAttribute, "true");
          }
        } catch (e) {
          console.error("aria-hidden: cannot operate on ", node, e);
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node) {
      var counterValue = counterMap.get(node) - 1;
      var markerValue = markerCounter.get(node) - 1;
      counterMap.set(node, counterValue);
      markerCounter.set(node, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node)) {
          node.removeAttribute(controlAttribute);
        }
        uncontrolledNodes.delete(node);
      }
      if (!markerValue) {
        node.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = /* @__PURE__ */ new WeakMap();
      counterMap = /* @__PURE__ */ new WeakMap();
      uncontrolledNodes = /* @__PURE__ */ new WeakMap();
      markerMap = {};
    }
  };
};
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
  var activeParentNode = parentNode || getDefaultParent(originalTarget);
  if (!activeParentNode) {
    return function() {
      return null;
    };
  }
  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
  return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
};

// node_modules/@tamagui/aria-hidden/dist/esm/AriaHidden.mjs
var hideOthers2 = hideOthers;

// node_modules/@tamagui/use-callback-ref/dist/esm/index.mjs
var React12 = __toESM(require_react(), 1);
function useCallbackRef(callback) {
  const callbackRef = React12.useRef(callback);
  return React12.useEffect(() => {
    callbackRef.current = callback;
  }), React12.useMemo(() => (...args) => {
    var _a;
    return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);
  }, []);
}

// node_modules/@tamagui/use-escape-keydown/dist/esm/index.mjs
var import_react11 = __toESM(require_react(), 1);
function useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);
  import_react11.default.useEffect(() => {
    const handleKeyDown = (event) => {
      event.key === "Escape" && onEscapeKeyDown(event);
    };
    return ownerDocument.addEventListener("keydown", handleKeyDown), () => {
      ownerDocument.removeEventListener("keydown", handleKeyDown);
    };
  }, [onEscapeKeyDown, ownerDocument]);
}

// node_modules/@tamagui/dismissable/dist/esm/Dismissable.mjs
var React14 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function dispatchDiscreteCustomEvent(target, event) {
  target && ReactDOM.flushSync(() => target.dispatchEvent(event));
}
var DISMISSABLE_LAYER_NAME = "Dismissable";
var CONTEXT_UPDATE = "dismissable.update";
var POINTER_DOWN_OUTSIDE = "dismissable.pointerDownOutside";
var FOCUS_OUTSIDE = "dismissable.focusOutside";
var originalBodyPointerEvents;
var DismissableContext = React14.createContext({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
});
var Dismissable = React14.forwardRef((props, forwardedRef) => {
  const {
    disableOutsidePointerEvents = false,
    forceUnmount,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    onDismiss,
    ...layerProps
  } = props, context2 = React14.useContext(DismissableContext), [node, setNode] = React14.useState(null), [, force] = React14.useState({}), composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2)), layers = Array.from(context2.layers), [highestLayerWithOutsidePointerEventsDisabled] = [...context2.layersWithOutsidePointerEventsDisabled].slice(-1), highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled), index3 = node ? layers.indexOf(node) : -1, isBodyPointerEventsDisabled = context2.layersWithOutsidePointerEventsDisabled.size > 0, isPointerEventsEnabled = index3 >= highestLayerWithOutsidePointerEventsDisabledIndex, pointerDownOutside = usePointerDownOutside((event) => {
    const target = event.target, isPointerDownOnBranch = [...context2.branches].some((branch) => branch.contains(target));
    !isPointerEventsEnabled || isPointerDownOnBranch || (onPointerDownOutside == null ? void 0 : onPointerDownOutside(event), onInteractOutside == null ? void 0 : onInteractOutside(event), event.defaultPrevented || (onDismiss == null ? void 0 : onDismiss()));
  }), focusOutside = useFocusOutside((event) => {
    const target = event.target;
    [...context2.branches].some((branch) => branch.contains(target)) || (onFocusOutside == null ? void 0 : onFocusOutside(event), onInteractOutside == null ? void 0 : onInteractOutside(event), event.defaultPrevented || (onDismiss == null ? void 0 : onDismiss()));
  });
  return useEscapeKeydown((event) => {
    index3 === context2.layers.size - 1 && (onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event), !event.defaultPrevented && onDismiss && (event.preventDefault(), onDismiss()));
  }), React14.useEffect(() => {
    if (node) return disableOutsidePointerEvents && (context2.layersWithOutsidePointerEventsDisabled.size === 0 && (originalBodyPointerEvents = document.body.style.pointerEvents, document.body.style.pointerEvents = "none"), context2.layersWithOutsidePointerEventsDisabled.add(node)), context2.layers.add(node), dispatchUpdate(), () => {
      disableOutsidePointerEvents && context2.layersWithOutsidePointerEventsDisabled.size === 1 && (document.body.style.pointerEvents = originalBodyPointerEvents);
    };
  }, [node, disableOutsidePointerEvents, context2]), React14.useEffect(() => {
    if (!forceUnmount) return () => {
      node && (context2.layers.delete(node), context2.layersWithOutsidePointerEventsDisabled.delete(node), dispatchUpdate());
    };
  }, [node, context2, forceUnmount]), React14.useEffect(() => {
    const handleUpdate = () => {
      force({});
    };
    return document.addEventListener(CONTEXT_UPDATE, handleUpdate), () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
  }, []), (0, import_jsx_runtime11.jsx)("div", {
    ...layerProps,
    ref: composedRefs,
    style: {
      display: "contents",
      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
      // @ts-ignore
      ...props.style
    },
    onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
    onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
    onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
  });
});
Dismissable.displayName = DISMISSABLE_LAYER_NAME;
var BRANCH_NAME = "DismissableBranch";
var DismissableBranch = React14.forwardRef((props, forwardedRef) => {
  const context2 = React14.useContext(DismissableContext), ref = React14.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref);
  return React14.useEffect(() => {
    const node = ref.current;
    if (node) return context2.branches.add(node), () => {
      context2.branches.delete(node);
    };
  }, [context2.branches]), (0, import_jsx_runtime11.jsx)("div", {
    style: {
      display: "contents"
    },
    ...props,
    ref: composedRefs
  });
});
DismissableBranch.displayName = BRANCH_NAME;
function usePointerDownOutside(onPointerDownOutside) {
  const handlePointerDownOutside = useEvent(onPointerDownOutside), isPointerInsideReactTreeRef = React14.useRef(false), handleClickRef = React14.useRef(() => {
  });
  return React14.useEffect(() => {
    const handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent = function() {
          handleAndDispatchCustomEvent(POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
            discrete: true
          });
        };
        const eventDetail = {
          originalEvent: event
        };
        event.pointerType === "touch" ? (document.removeEventListener("click", handleClickRef.current), handleClickRef.current = handleAndDispatchPointerDownOutsideEvent, document.addEventListener("click", handleClickRef.current, {
          once: true
        })) : handleAndDispatchPointerDownOutsideEvent();
      }
      isPointerInsideReactTreeRef.current = false;
    }, timerId = setTimeout(() => {
      document.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId), document.removeEventListener("pointerdown", handlePointerDown), document.removeEventListener("click", handleClickRef.current);
    };
  }, [handlePointerDownOutside]), {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: () => {
      isPointerInsideReactTreeRef.current = true;
    }
  };
}
function useFocusOutside(onFocusOutside) {
  const handleFocusOutside = useEvent(onFocusOutside), isFocusInsideReactTreeRef = React14.useRef(false);
  return React14.useEffect(() => {
    const handleFocus = (event) => {
      event.target && !isFocusInsideReactTreeRef.current && handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, {
        originalEvent: event
      }, {
        discrete: false
      });
    };
    return document.addEventListener("focusin", handleFocus), () => document.removeEventListener("focusin", handleFocus);
  }, [handleFocusOutside]), {
    onFocusCapture: () => {
      isFocusInsideReactTreeRef.current = true;
    },
    onBlurCapture: () => {
      isFocusInsideReactTreeRef.current = false;
    }
  };
}
function dispatchUpdate() {
  const event = new CustomEvent(CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function handleAndDispatchCustomEvent(name, handler, detail, {
  discrete
}) {
  const target = detail.originalEvent.target, event = new CustomEvent(name, {
    bubbles: false,
    cancelable: true,
    detail
  });
  handler && target.addEventListener(name, handler, {
    once: true
  }), discrete ? dispatchDiscreteCustomEvent(target, event) : target.dispatchEvent(event);
}

// node_modules/@tamagui/focus-scope/dist/esm/FocusScope.mjs
var React15 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
var EVENT_OPTIONS = {
  bubbles: false,
  cancelable: true
};
var FocusScope = React15.forwardRef(function(props, forwardedRef) {
  const childProps = useFocusScope(props, forwardedRef);
  return typeof props.children == "function" ? (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, {
    children: props.children(childProps)
  }) : React15.cloneElement(React15.Children.only(props.children), childProps);
});
function useFocusScope(props, forwardedRef) {
  const {
    loop = false,
    enabled = true,
    trapped = false,
    onMountAutoFocus: onMountAutoFocusProp,
    onUnmountAutoFocus: onUnmountAutoFocusProp,
    forceUnmount,
    children,
    ...scopeProps
  } = props, [container, setContainer] = React15.useState(null), onMountAutoFocus = useEvent(onMountAutoFocusProp), onUnmountAutoFocus = useEvent(onUnmountAutoFocusProp), lastFocusedElementRef = React15.useRef(null), setContainerTransition = React15.useCallback((node) => {
    startTransition(() => {
      setContainer(node);
    });
  }, [setContainer]), composedRefs = useComposedRefs(forwardedRef, setContainerTransition), focusScope = React15.useRef({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  React15.useEffect(() => {
    if (!enabled || !trapped) return;
    const controller = new AbortController();
    function handleFocusIn(event) {
      if (focusScope.paused || !container) return;
      const target = event.target;
      container.contains(target) ? (target == null ? void 0 : target.addEventListener("blur", handleBlur, {
        signal: controller.signal
      }), lastFocusedElementRef.current = target) : focus(lastFocusedElementRef.current, {
        select: true
      });
    }
    function handleFocusOut(event) {
      controller.abort(), !(focusScope.paused || !container) && (container.contains(event.relatedTarget) || focus(lastFocusedElementRef.current, {
        select: true
      }));
    }
    function handleBlur() {
      lastFocusedElementRef.current = container;
    }
    return document.addEventListener("focusin", handleFocusIn), document.addEventListener("focusout", handleFocusOut), () => {
      controller.abort(), document.removeEventListener("focusin", handleFocusIn), document.removeEventListener("focusout", handleFocusOut);
    };
  }, [trapped, forceUnmount, container, focusScope.paused]), React15.useEffect(() => {
    if (!enabled || !container || forceUnmount) return;
    focusScopesStack.add(focusScope);
    const previouslyFocusedElement = document.activeElement;
    if (!container.contains(previouslyFocusedElement)) {
      const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);
      if (container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus), container.dispatchEvent(mountEvent), !mountEvent.defaultPrevented) {
        const candidates = removeLinks(getTabbableCandidates(container));
        focusFirst(candidates, {
          select: true
        }), document.activeElement === previouslyFocusedElement && focus(container);
      }
    }
    return () => {
      container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
      const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);
      container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus), container.dispatchEvent(unmountEvent), unmountEvent.defaultPrevented || focus(previouslyFocusedElement ?? document.body, {
        select: true
      }), container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus), focusScopesStack.remove(focusScope);
    };
  }, [enabled, container, forceUnmount, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
  const handleKeyDown = React15.useCallback((event) => {
    if (!trapped || !loop || focusScope.paused) return;
    const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey, focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      const container2 = event.currentTarget, [first, last] = getTabbableEdges(container2);
      first && last ? !event.shiftKey && focusedElement === last ? (event.preventDefault(), loop && focus(first, {
        select: true
      })) : event.shiftKey && focusedElement === first && (event.preventDefault(), loop && focus(last, {
        select: true
      })) : focusedElement === container2 && event.preventDefault();
    }
  }, [loop, trapped, focusScope.paused]);
  return {
    tabIndex: -1,
    ...scopeProps,
    ref: composedRefs,
    onKeyDown: handleKeyDown
  };
}
function focusFirst(candidates, {
  select = false
} = {}) {
  const previouslyFocusedElement = document.activeElement;
  for (const candidate of candidates) if (focus(candidate, {
    select
  }), document.activeElement !== previouslyFocusedElement) return;
}
function getTabbableEdges(container) {
  const candidates = getTabbableCandidates(container), first = findVisible(candidates, container), last = findVisible(candidates.reverse(), container);
  return [first, last];
}
function getTabbableCandidates(container) {
  const nodes = [], walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput3 = node.tagName === "INPUT" && node.type === "hidden";
      return node.disabled || node.hidden || isHiddenInput3 ? NodeFilter.FILTER_SKIP : node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  for (; walker.nextNode(); ) nodes.push(walker.currentNode);
  return nodes;
}
function findVisible(elements, container) {
  for (const element of elements) if (!isHidden(element, {
    upTo: container
  })) return element;
}
function isHidden(node, {
  upTo
}) {
  if (getComputedStyle(node).visibility === "hidden") return true;
  for (; node; ) {
    if (upTo !== void 0 && node === upTo) return false;
    if (getComputedStyle(node).display === "none") return true;
    node = node.parentElement;
  }
  return false;
}
function isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function focus(element, {
  select = false
} = {}) {
  if (element == null ? void 0 : element.focus) {
    const previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: true
    }), element !== previouslyFocusedElement && isSelectableInput(element) && select && element.select();
  }
}
var focusScopesStack = createFocusScopesStack();
function createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      const activeFocusScope = stack[0];
      focusScope !== activeFocusScope && (activeFocusScope == null ? void 0 : activeFocusScope.pause()), stack = arrayRemove(stack, focusScope), stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _a;
      stack = arrayRemove(stack, focusScope), (_a = stack[0]) == null ? void 0 : _a.resume();
    }
  };
}
function arrayRemove(array, item) {
  const updatedArray = [...array], index3 = updatedArray.indexOf(item);
  return index3 !== -1 && updatedArray.splice(index3, 1), updatedArray;
}
function removeLinks(items) {
  return items.filter((item) => item.tagName !== "A");
}

// node_modules/@tamagui/remove-scroll/dist/esm/RemoveScroll.mjs
var import_react15 = __toESM(require_react(), 1);

// node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React24 = __toESM(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React20 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react12 = __toESM(require_react());
function useCallbackRef2(initialValue2, callback) {
  var ref = (0, import_react12.useState)(function() {
    return {
      // value
      value: initialValue2,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React16 = __toESM(require_react());
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" ? React16.useLayoutEffect : React16.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef2(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect2(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/use-sidecar/dist/es2015/hoc.js
var React17 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react13 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs2 = buffer;
        buffer = [];
        cbs2.forEach(cb);
      }
      buffer = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs2 = buffer;
        buffer = [];
        cbs2.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs3 = pendingQueue;
        pendingQueue = [];
        cbs3.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React18 = __toESM(require_react());
var import_react14 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React19 = __toESM(require_react());
var SideCar = function(_a) {
  var sideCar = _a.sideCar, rest = __rest(_a, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React19.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React20.forwardRef(function(props, parentRef) {
  var ref = React20.useRef(null);
  var _a = React20.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a[0], setCallbacks = _a[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return React20.createElement(
    React20.Fragment,
    null,
    enabled && React20.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
    forwardProps ? React20.cloneElement(React20.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React20.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
  );
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React23 = __toESM(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React22 = __toESM(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React21 = __toESM(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles, isDynamic) {
    React21.useEffect(function() {
      sheet.add(styles);
      return function() {
        sheet.remove();
      };
    }, [styles && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle2 = styleHookSingleton();
  var Sheet2 = function(_a) {
    var styles = _a.styles, dynamic = _a.dynamic;
    useStyle2(styles, dynamic);
    return null;
  };
  return Sheet2;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse(left), parse(top), parse(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a, allowRelative, gapMode, important) {
  var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var getCurrentUseCounter = function() {
  var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter) ? counter : 0;
};
var useLockAttribute = function() {
  React22.useEffect(function() {
    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
    return function() {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
var RemoveScrollBar = function(_a) {
  var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? "margin" : _b;
  useLockAttribute();
  var gap = React22.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return React22.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node) {
  return node.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node, overflow) {
  if (!(node instanceof Element)) {
    return false;
  }
  var styles = window.getComputedStyle(node);
  return (
    // not-not-scrollable
    styles[overflow] !== "hidden" && // contains scroll inside self
    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
  );
};
var elementCouldBeVScrolled = function(node) {
  return elementCanBeScrolled(node, "overflowY");
};
var elementCouldBeHScrolled = function(node) {
  return elementCanBeScrolled(node, "overflowX");
};
var locationCouldBeScrolled = function(axis, node) {
  var ownerDocument = node.ownerDocument;
  var current = node;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];
      if (scrollHeight > clientHeight) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function(_a) {
  var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a) {
  var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node) {
  return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
};
var getScrollVariables = function(axis, node) {
  return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position;
    if (position || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position;
      }
    }
    if (target instanceof ShadowRoot) {
      target = target.host;
    } else {
      target = target.parentNode;
    }
  } while (
    // portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target)
  );
  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React23.useRef([]);
  var touchStartRef = React23.useRef([0, 0]);
  var activeAxis = React23.useRef();
  var id = React23.useState(idCounter++)[0];
  var Style2 = React23.useState(styleSingleton)[0];
  var lastProps = React23.useRef(props);
  React23.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React23.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React23.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React23.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
        return node.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React23.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React23.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React23.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React23.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React23.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React23.createElement(
    React23.Fragment,
    null,
    inert ? React23.createElement(Style2, { styles: generateStyle(id) }) : null,
    removeScrollBar ? React23.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null
  );
}
function getOutermostShadowParent(node) {
  var shadowParent = null;
  while (node !== null) {
    if (node instanceof ShadowRoot) {
      shadowParent = node.host;
      node = node.host;
    }
    node = node.parentNode;
  }
  return shadowParent;
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React24.forwardRef(function(props, ref) {
  return React24.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;

// node_modules/@tamagui/remove-scroll/dist/esm/RemoveScroll.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var RemoveScroll2 = import_react15.default.memo((props) => props.children ? (0, import_jsx_runtime13.jsx)(Combination_default, {
  ...props
}) : null);
var classNames = Combination_default.classNames;

// node_modules/@tamagui/sheet/dist/esm/constants.mjs
var SHEET_NAME = "Sheet";
var SHEET_HANDLE_NAME = "SheetHandle";
var SHEET_OVERLAY_NAME = "SheetOverlay";

// node_modules/@tamagui/sheet/dist/esm/createSheet.mjs
var import_react21 = __toESM(require_react(), 1);

// node_modules/@tamagui/sheet/dist/esm/SheetContext.mjs
var [createSheetContext, createSheetScope] = createContextScope(SHEET_NAME);
var [SheetProvider, useSheetContext] = createSheetContext(SHEET_NAME, {});

// node_modules/@tamagui/sheet/dist/esm/SheetImplementationCustom.mjs
var import_react19 = __toESM(require_react(), 1);

// node_modules/@tamagui/sheet/dist/esm/contexts.mjs
var import_react16 = __toESM(require_react(), 1);
var ParentSheetContext = import_react16.default.createContext({
  zIndex: 1e5
});
var SheetInsideSheetContext = import_react16.default.createContext(null);

// node_modules/@tamagui/sheet/dist/esm/helpers.mjs
function resisted(y, minY, maxOverflow = 25) {
  if (y < minY) {
    const past = minY - y, extra = -(1.1 - 0.15 ** (Math.min(maxOverflow, past) / maxOverflow)) * maxOverflow;
    return minY + extra;
  }
  return y;
}

// node_modules/@tamagui/sheet/dist/esm/useSheetController.mjs
var import_react17 = __toESM(require_react(), 1);
var useSheetController = () => {
  const controller = import_react17.default.useContext(SheetControllerContext), isHidden4 = controller == null ? void 0 : controller.hidden, isShowingNonSheet = isHidden4 && (controller == null ? void 0 : controller.open);
  return {
    controller,
    isHidden: isHidden4,
    isShowingNonSheet,
    disableDrag: controller == null ? void 0 : controller.disableDrag
  };
};
var SheetControllerContext = import_react17.default.createContext(null);

// node_modules/@tamagui/sheet/dist/esm/useSheetOpenState.mjs
var useSheetOpenState = (props) => {
  const {
    isHidden: isHidden4,
    controller
  } = useSheetController(), onOpenChangeInternal = (val) => {
    var _a, _b;
    (_a = controller == null ? void 0 : controller.onOpenChange) == null ? void 0 : _a.call(controller, val), (_b = props.onOpenChange) == null ? void 0 : _b.call(props, val);
  }, [open, setOpen] = useControllableState({
    prop: (controller == null ? void 0 : controller.open) ?? props.open,
    defaultProp: props.defaultOpen ?? false,
    onChange: onOpenChangeInternal,
    strategy: "most-recent-wins",
    transition: true
  });
  return {
    open,
    setOpen,
    isHidden: isHidden4,
    controller
  };
};

// node_modules/@tamagui/sheet/dist/esm/useSheetProviderProps.mjs
var import_react18 = __toESM(require_react(), 1);
function useSheetProviderProps(props, state, options = {}) {
  const handleRef = import_react18.default.useRef(null), contentRef = import_react18.default.useRef(null), [frameSize, setFrameSize] = import_react18.default.useState(0), [maxContentSize, setMaxContentSize] = import_react18.default.useState(0), snapPointsMode = props.snapPointsMode ?? "percent", snapPointsProp = props.snapPoints ?? (snapPointsMode === "percent" ? [80] : snapPointsMode === "constant" ? [256] : ["fit"]), hasFit = snapPointsProp[0] === "fit", snapPoints = import_react18.default.useMemo(() => props.dismissOnSnapToBottom ? [...snapPointsProp, 0] : snapPointsProp, [JSON.stringify(snapPointsProp), props.dismissOnSnapToBottom]), [position_, setPositionImmediate] = useControllableState({
    prop: props.position,
    defaultProp: props.defaultPosition || (state.open ? 0 : -1),
    onChange: props.onPositionChange,
    strategy: "most-recent-wins",
    transition: true
  }), position = state.open === false ? -1 : position_, {
    open
  } = state, setPosition = import_react18.default.useCallback((next) => {
    props.dismissOnSnapToBottom && next === snapPoints.length - 1 ? state.setOpen(false) : setPositionImmediate(next);
  }, [props.dismissOnSnapToBottom, snapPoints.length, setPositionImmediate, state.setOpen]);
  snapPointsMode === "mixed" && snapPoints.some((p) => {
    if (typeof p == "string") {
      if (p === "fit") return false;
      if (p.endsWith("%")) {
        const n = Number(p.slice(0, -1));
        return n < 0 || n > 100;
      }
      return true;
    }
    return typeof p != "number" || p < 0;
  }) && console.warn('⚠️ Invalid snapPoint given, snapPoints must be positive numeric values, string percentages between 0-100%, or "fit" when snapPointsMode is mixed'), snapPointsMode === "mixed" && snapPoints.indexOf("fit") > 0 && console.warn('⚠️ Invalid snapPoint given, "fit" must be the first/largest snap point when snapPointsMode is mixed'), snapPointsMode === "fit" && (snapPoints.length !== (props.dismissOnSnapToBottom ? 2 : 1) || snapPoints[0] !== "fit") && console.warn("⚠️ Invalid snapPoint given, there are no snap points when snapPointsMode is fit"), snapPointsMode === "constant" && snapPoints.some((p) => typeof p != "number" || p < 0) && console.warn("⚠️ Invalid snapPoint given, snapPoints must be positive numeric values when snapPointsMode is constant"), snapPointsMode === "percent" && snapPoints.some((p) => typeof p != "number" || p < 0 || p > 100) && console.warn("⚠️ Invalid snapPoint given, snapPoints must be numeric values between 0 and 100 when snapPointsMode is percent"), open && props.dismissOnSnapToBottom && position === snapPoints.length - 1 && setPositionImmediate(0);
  const shouldSetPositionOpen = open && position < 0;
  import_react18.default.useEffect(() => {
    shouldSetPositionOpen && setPosition(0);
  }, [setPosition, shouldSetPositionOpen]);
  const {
    animationDriver
  } = useConfiguration();
  if (!animationDriver) throw new Error(false ? "❌ 008" : "Must set animations in tamagui.config.ts");
  const scrollBridge = useConstant(() => ({
    enabled: false,
    y: 0,
    paneY: 0,
    paneMinY: 0,
    scrollStartY: -1,
    drag: () => {
    },
    release: () => {
    },
    scrollLock: false
  })), removeScrollEnabled = props.forceRemoveScrollEnabled ?? (open && props.modal), maxSnapPoint = snapPoints[0];
  return {
    screenSize: snapPointsMode === "percent" ? frameSize / ((typeof maxSnapPoint == "number" ? maxSnapPoint : 100) / 100) : maxContentSize,
    maxSnapPoint,
    removeScrollEnabled,
    scrollBridge,
    modal: !!props.modal,
    open: state.open,
    setOpen: state.setOpen,
    hidden: !!state.isHidden,
    contentRef,
    handleRef,
    frameSize,
    setFrameSize,
    dismissOnOverlayPress: props.dismissOnOverlayPress ?? true,
    dismissOnSnapToBottom: props.dismissOnSnapToBottom ?? false,
    onOverlayComponent: options.onOverlayComponent,
    scope: props.__scopeSheet,
    hasFit,
    position,
    snapPoints,
    snapPointsMode,
    setMaxContentSize,
    setPosition,
    setPositionImmediate,
    onlyShowFrame: false
  };
}

// node_modules/@tamagui/sheet/dist/esm/SheetImplementationCustom.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var hiddenSize = 10000.1;
var sheetHiddenStyleSheet = null;
var relativeDimensionTo = isWeb ? "window" : "screen";
var SheetImplementationCustom = import_react19.default.forwardRef(function(props, forwardedRef) {
  const parentSheet = import_react19.default.useContext(ParentSheetContext), {
    animation,
    animationConfig: animationConfigProp,
    modal = false,
    zIndex = parentSheet.zIndex + 1,
    moveOnKeyboardChange = false,
    unmountChildrenWhenHidden = false,
    portalProps,
    containerComponent: ContainerComponent = import_react19.default.Fragment
  } = props, state = useSheetOpenState(props), [overlayComponent, setOverlayComponent] = import_react19.default.useState(null), providerProps = useSheetProviderProps(props, state, {
    onOverlayComponent: setOverlayComponent
  }), {
    frameSize,
    setFrameSize,
    snapPoints,
    snapPointsMode,
    hasFit,
    position,
    setPosition,
    scrollBridge,
    screenSize,
    setMaxContentSize,
    maxSnapPoint
  } = providerProps, {
    open,
    controller,
    isHidden: isHidden4
  } = state, sheetRef = import_react19.default.useRef(null), ref = useComposedRefs(forwardedRef, sheetRef, providerProps.contentRef), {
    animationDriver
  } = useConfiguration(), animationConfig = (() => {
    if (animationDriver.supportsCSSVars) return {};
    const [animationProp, animationPropConfig] = animation ? Array.isArray(animation) ? animation : [animation] : [];
    return animationConfigProp ?? (animationProp ? {
      ...animationDriver.animations[animationProp],
      ...animationPropConfig
    } : null);
  })(), [isShowingInnerSheet, setIsShowingInnerSheet] = import_react19.default.useState(false), shouldHideParentSheet = !isWeb && modal && isShowingInnerSheet && // if not using weird portal limitation we dont need to hide parent sheet
  USE_NATIVE_PORTAL, sheetInsideSheet = import_react19.default.useContext(SheetInsideSheetContext), onInnerSheet = import_react19.default.useCallback((hasChild) => {
    setIsShowingInnerSheet(hasChild);
  }, []), positions = import_react19.default.useMemo(() => snapPoints.map((point) => getYPositions(snapPointsMode, point, screenSize, frameSize)), [screenSize, frameSize, snapPoints, snapPointsMode]), {
    useAnimatedNumber,
    useAnimatedNumberStyle,
    useAnimatedNumberReaction
  } = animationDriver, AnimatedView = animationDriver.View ?? Stack2;
  useIsomorphicLayoutEffect(() => {
    if (sheetInsideSheet && open) return sheetInsideSheet(true), () => {
      sheetInsideSheet(false);
    };
  }, [sheetInsideSheet, open]);
  const nextParentContext = import_react19.default.useMemo(() => ({
    zIndex
  }), [zIndex]), startPosition = useDidFinishSSR() && screenSize ? screenSize : hiddenSize, animatedNumber = useAnimatedNumber(startPosition), at = import_react19.default.useRef(startPosition), hasntMeasured = at.current === hiddenSize, [disableAnimation, setDisableAnimation] = (0, import_react19.useState)(hasntMeasured);
  useAnimatedNumberReaction({
    value: animatedNumber,
    hostRef: sheetRef
  }, import_react19.default.useCallback((value) => {
    at.current = value, scrollBridge.paneY = value;
  }, [animationDriver]));
  function stopSpring() {
    animatedNumber.stop(), scrollBridge.onFinishAnimate && (scrollBridge.onFinishAnimate(), scrollBridge.onFinishAnimate = void 0);
  }
  const animateTo = useEvent((position2) => {
    if (frameSize === 0) return;
    let toValue = isHidden4 || position2 === -1 ? screenSize : positions[position2];
    at.current !== toValue && (at.current = toValue, stopSpring(), animatedNumber.setValue(toValue, {
      type: "spring",
      ...animationConfig
    }));
  });
  useIsomorphicLayoutEffect(() => {
    if (hasntMeasured && screenSize) {
      at.current = screenSize, animatedNumber.setValue(screenSize, {
        type: "timing",
        duration: 0
      }, () => {
        setTimeout(() => {
          setDisableAnimation(false);
        }, 10);
      });
      return;
    }
    disableAnimation || !frameSize || !screenSize || isHidden4 || hasntMeasured && !open || animateTo(position);
  }, [hasntMeasured, disableAnimation, isHidden4, frameSize, screenSize, open, position]);
  const disableDrag = props.disableDrag ?? (controller == null ? void 0 : controller.disableDrag), themeName = useThemeName(), [isDragging, setIsDragging] = import_react19.default.useState(false), panResponder = import_react19.default.useMemo(() => {
    if (disableDrag || !frameSize || isShowingInnerSheet) return;
    const minY = positions[0];
    scrollBridge.paneMinY = minY;
    let startY = at.current;
    function setPanning(val) {
      setIsDragging(val), isClient && (sheetHiddenStyleSheet || (sheetHiddenStyleSheet = document.createElement("style"), typeof document.head < "u" && document.head.appendChild(sheetHiddenStyleSheet)), val ? sheetHiddenStyleSheet.innerText = ":root * { user-select: none !important; -webkit-user-select: none !important; }" : sheetHiddenStyleSheet.innerText = "");
    }
    const release = ({
      vy,
      dragAt
    }) => {
      isExternalDrag = false, previouslyScrolling = false, setPanning(false);
      const end = dragAt + startY + frameSize * vy * 0.2;
      let closestPoint = 0, dist = Number.POSITIVE_INFINITY;
      for (let i = 0; i < positions.length; i++) {
        const position2 = positions[i], curDist = end > position2 ? end - position2 : position2 - end;
        curDist < dist && (dist = curDist, closestPoint = i);
      }
      setPosition(closestPoint), animateTo(closestPoint);
    }, finish = (_e, state2) => {
      release({
        vy: state2.vy,
        dragAt: state2.dy
      });
    };
    let previouslyScrolling = false;
    const onMoveShouldSet = (e, {
      dy
    }) => {
      if (e.target === providerProps.handleRef.current) return true;
      const isScrolled = scrollBridge.y !== 0, isDraggingUp = dy < 0, isNearTop = scrollBridge.paneY - 5 <= scrollBridge.paneMinY;
      return isScrolled ? (previouslyScrolling = true, false) : isNearTop && !isScrolled && isDraggingUp && !isWeb ? false : Math.abs(dy) > 5;
    }, grant = () => {
      setPanning(true), stopSpring(), startY = at.current;
    };
    let isExternalDrag = false;
    return scrollBridge.drag = (dy) => {
      isExternalDrag || (isExternalDrag = true, grant());
      const to = dy + startY;
      animatedNumber.setValue(resisted(to, minY), {
        type: "direct"
      });
    }, scrollBridge.release = release, PanResponder_default.create({
      onMoveShouldSetPanResponder: onMoveShouldSet,
      onPanResponderGrant: grant,
      onPanResponderMove: (_e, {
        dy
      }) => {
        const toFull = dy + startY, to = resisted(toFull, minY);
        animatedNumber.setValue(to, {
          type: "direct"
        });
      },
      onPanResponderEnd: finish,
      onPanResponderTerminate: finish,
      onPanResponderRelease: finish
    });
  }, [disableDrag, isShowingInnerSheet, animateTo, frameSize, positions, setPosition]), handleAnimationViewLayout = import_react19.default.useCallback((e) => {
    var _a;
    const next = Math.min((_a = e.nativeEvent) == null ? void 0 : _a.layout.height, Dimensions.get(relativeDimensionTo).height);
    next && setFrameSize(next);
  }, []), handleMaxContentViewLayout = import_react19.default.useCallback((e) => {
    var _a;
    const next = Math.min((_a = e.nativeEvent) == null ? void 0 : _a.layout.height, Dimensions.get(relativeDimensionTo).height);
    next && setMaxContentSize(next);
  }, []), animatedStyle = useAnimatedNumberStyle(animatedNumber, (val) => {
    "worklet";
    return {
      transform: [{
        translateY: frameSize === 0 ? hiddenSize : val
      }]
    };
  }), sizeBeforeKeyboard = import_react19.default.useRef(null);
  import_react19.default.useEffect(() => {
    if (isWeb || !moveOnKeyboardChange) return;
    const keyboardShowListener = Keyboard_default.addListener(currentPlatform === "ios" ? "keyboardWillShow" : "keyboardDidShow", (e) => {
      sizeBeforeKeyboard.current === null && (sizeBeforeKeyboard.current = isHidden4 || position === -1 ? screenSize : positions[position], animatedNumber.setValue(Math.max(sizeBeforeKeyboard.current - e.endCoordinates.height, 0), {
        type: "timing",
        duration: 250
      }));
    }), keyboardDidHideListener = Keyboard_default.addListener("keyboardDidHide", () => {
      sizeBeforeKeyboard.current !== null && (animatedNumber.setValue(sizeBeforeKeyboard.current, {
        type: "timing",
        duration: 250
      }), sizeBeforeKeyboard.current = null);
    });
    return () => {
      keyboardDidHideListener.remove(), keyboardShowListener.remove();
    };
  }, [moveOnKeyboardChange, positions, position, isHidden4]);
  const [opacity, setOpacity] = import_react19.default.useState(open ? 1 : 0);
  open && opacity === 0 && setOpacity(1), import_react19.default.useEffect(() => {
    if (!open) {
      const tm = setTimeout(() => {
        setOpacity(0);
      }, 400);
      return () => {
        clearTimeout(tm);
      };
    }
  }, [open]);
  const forcedContentHeight = hasFit ? void 0 : snapPointsMode === "percent" ? `${maxSnapPoint}${isWeb ? "dvh" : "%"}` : maxSnapPoint;
  let contents = (0, import_jsx_runtime14.jsx)(ParentSheetContext.Provider, {
    value: nextParentContext,
    children: (0, import_jsx_runtime14.jsxs)(SheetProvider, {
      ...providerProps,
      children: [(0, import_jsx_runtime14.jsx)(AnimatePresence, {
        custom: {
          open
        },
        children: shouldHideParentSheet || !open ? null : overlayComponent
      }), snapPointsMode !== "percent" && (0, import_jsx_runtime14.jsx)(View_default, {
        style: {
          opacity: 0,
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          pointerEvents: "none"
        },
        onLayout: handleMaxContentViewLayout
      }), (0, import_jsx_runtime14.jsx)(AnimatedView, {
        ref,
        ...panResponder == null ? void 0 : panResponder.panHandlers,
        onLayout: handleAnimationViewLayout,
        ...!isDragging && {
          // @ts-ignore for CSS driver this is necessary to attach the transition
          animation: disableAnimation ? null : animation
        },
        disableClassName: true,
        style: [{
          position: "absolute",
          zIndex,
          width: "100%",
          height: forcedContentHeight,
          minHeight: forcedContentHeight,
          opacity: shouldHideParentSheet ? 0 : opacity,
          ...(shouldHideParentSheet || !open) && {
            pointerEvents: "none"
          }
        }, animatedStyle],
        children: props.children
      })]
    })
  });
  const shouldMountChildren = unmountChildrenWhenHidden ? !!opacity : true;
  if (modal) {
    const modalContents = (0, import_jsx_runtime14.jsx)(Portal, {
      stackZIndex: zIndex,
      ...portalProps,
      children: shouldMountChildren && (0, import_jsx_runtime14.jsx)(ContainerComponent, {
        children: (0, import_jsx_runtime14.jsx)(Theme, {
          forceClassName: true,
          name: themeName,
          children: contents
        })
      })
    });
    return isWeb ? modalContents : (0, import_jsx_runtime14.jsx)(SheetInsideSheetContext.Provider, {
      value: onInnerSheet,
      children: modalContents
    });
  }
  return contents;
});
function getYPositions(mode, point, screenSize, frameSize) {
  if (!screenSize || !frameSize) return 0;
  if (mode === "mixed") {
    if (typeof point == "number") return screenSize - Math.min(screenSize, Math.max(0, point));
    if (point === "fit") return screenSize - Math.min(screenSize, frameSize);
    if (point.endsWith("%")) {
      const pct2 = Math.min(100, Math.max(0, Number(point.slice(0, -1)))) / 100;
      return Number.isNaN(pct2) ? (console.warn("Invalid snapPoint percentage string"), 0) : Math.round(screenSize - pct2 * screenSize);
    }
    return console.warn("Invalid snapPoint unknown value"), 0;
  }
  if (mode === "fit") return point === 0 ? screenSize : screenSize - Math.min(screenSize, frameSize);
  if (mode === "constant" && typeof point == "number") return screenSize - Math.min(screenSize, Math.max(0, point));
  const pct = Math.min(100, Math.max(0, Number(point))) / 100;
  return Number.isNaN(pct) ? (console.warn("Invalid snapPoint percentage"), 0) : Math.round(screenSize - pct * screenSize);
}

// node_modules/@tamagui/sheet/dist/esm/SheetScrollView.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/@tamagui/scroll-view/dist/esm/ScrollView.mjs
var ScrollView = styled(ScrollView_default, {
  name: "ScrollView",
  scrollEnabled: true,
  variants: {
    fullscreen: {
      true: fullscreenStyle
    }
  }
}, {
  accept: {
    contentContainerStyle: "style"
  }
});

// node_modules/@tamagui/sheet/dist/esm/SheetScrollView.mjs
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var SHEET_SCROLL_VIEW_NAME = "SheetScrollView";
var SheetScrollView = import_react20.default.forwardRef(({
  __scopeSheet,
  children,
  onScroll,
  ...props
}, ref) => {
  const context2 = useSheetContext(SHEET_SCROLL_VIEW_NAME, __scopeSheet), {
    scrollBridge
  } = context2, scrollRef = import_react20.default.useRef(null), state = import_react20.default.useRef({
    lastPageY: 0,
    dragAt: 0,
    dys: [],
    // store a few recent dys to get velocity on release
    isScrolling: false,
    isDragging: false
  }), release = () => {
    if (!state.current.isDragging) return;
    state.current.isDragging = false, scrollBridge.scrollStartY = -1, state.current.isScrolling = false;
    let vy = 0;
    if (state.current.dys.length) {
      const recentDys = state.current.dys.slice(-10);
      vy = (recentDys.length ? recentDys.reduce((a, b) => a + b, 0) : 0) / recentDys.length * 0.04;
    }
    state.current.dys = [], scrollBridge.release({
      dragAt: state.current.dragAt,
      vy
    });
  };
  return (0, import_jsx_runtime15.jsx)(ScrollView, {
    ref: composeRefs(scrollRef, ref),
    flex: 1,
    scrollEventThrottle: 8,
    onResponderRelease: release,
    className: "_ovs-contain",
    onScroll: (e) => {
      const {
        y
      } = e.nativeEvent.contentOffset;
      scrollBridge.y = y, y > 0 && (scrollBridge.scrollStartY = -1), onScroll == null ? void 0 : onScroll(e);
    },
    onStartShouldSetResponder: () => (scrollBridge.scrollStartY = -1, state.current.isDragging = true, true),
    onMoveShouldSetResponder: () => false,
    ...props,
    children
  });
});

// node_modules/@tamagui/sheet/dist/esm/useSheetOffscreenSize.mjs
var useSheetOffscreenSize = ({
  snapPoints,
  position,
  screenSize,
  frameSize,
  snapPointsMode
}) => {
  if (snapPointsMode === "fit") return 0;
  if (snapPointsMode === "constant") {
    const maxSize2 = Number(snapPoints[0]), currentSize2 = Number(snapPoints[position] ?? 0);
    return maxSize2 - currentSize2;
  }
  if (snapPointsMode === "percent") {
    const maxPercentOpened = Number(snapPoints[0]) / 100, percentOpened = Number(snapPoints[position] ?? 0) / 100;
    return (maxPercentOpened - percentOpened) * screenSize;
  }
  const maxSnapPoint = snapPoints[0];
  if (maxSnapPoint === "fit") return 0;
  const maxSize = typeof maxSnapPoint == "string" ? Number(maxSnapPoint.slice(0, -1)) / 100 * screenSize : maxSnapPoint, currentSnapPoint = snapPoints[position] ?? 0, currentSize = typeof currentSnapPoint == "string" ? Number(currentSnapPoint.slice(0, -1)) / 100 * screenSize : currentSnapPoint, offscreenSize = maxSize - currentSize;
  return Number.isNaN(offscreenSize) ? 0 : offscreenSize;
};

// node_modules/@tamagui/sheet/dist/esm/createSheet.mjs
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
function createSheet({
  Handle: Handle2,
  Frame: Frame2,
  Overlay: Overlay2
}) {
  const SheetHandle = Handle2.styleable(({
    __scopeSheet,
    ...props
  }, forwardedRef) => {
    const context2 = useSheetContext(SHEET_HANDLE_NAME, __scopeSheet), composedRef = useComposedRefs(context2.handleRef, forwardedRef);
    return context2.onlyShowFrame ? null : (
      // @ts-ignore
      (0, import_jsx_runtime16.jsx)(Handle2, {
        ref: composedRef,
        onPress: () => {
          const max2 = context2.snapPoints.length + (context2.dismissOnSnapToBottom ? -1 : 0), nextPos = (context2.position + 1) % max2;
          context2.setPosition(nextPos);
        },
        open: context2.open,
        ...props
      })
    );
  }), SheetOverlay = Overlay2.extractable((0, import_react21.memo)((propsIn) => {
    const {
      __scopeSheet,
      ...props
    } = propsIn, context2 = useSheetContext(SHEET_OVERLAY_NAME, __scopeSheet), element = (0, import_react21.useMemo)(() => (
      // @ts-ignore
      (0, import_jsx_runtime16.jsx)(Overlay2, {
        ...props,
        onPress: composeEventHandlers(props.onPress, context2.dismissOnOverlayPress ? () => {
          context2.setOpen(false);
        } : void 0)
      })
    ), [props.onPress, props.opacity, context2.dismissOnOverlayPress]);
    return useIsomorphicLayoutEffect(() => {
      var _a;
      (_a = context2.onOverlayComponent) == null ? void 0 : _a.call(context2, element);
    }, [element]), context2.onlyShowFrame, null;
  })), SheetFrame = Frame2.extractable((0, import_react21.forwardRef)(({
    __scopeSheet,
    adjustPaddingForOffscreenContent,
    disableHideBottomOverflow,
    children,
    ...props
  }, forwardedRef) => {
    const context2 = useSheetContext(SHEET_NAME, __scopeSheet), {
      hasFit,
      removeScrollEnabled,
      frameSize,
      contentRef,
      open
    } = context2, composedContentRef = useComposedRefs(forwardedRef, contentRef), offscreenSize = useSheetOffscreenSize(context2), sheetContents = (0, import_react21.useMemo)(() => (
      // @ts-expect-error
      (0, import_jsx_runtime16.jsxs)(Frame2, {
        ref: composedContentRef,
        flex: hasFit ? 0 : 1,
        height: hasFit ? void 0 : frameSize,
        pointerEvents: open ? "auto" : "none",
        ...props,
        children: [(0, import_jsx_runtime16.jsx)(StackZIndexContext, {
          zIndex: resolveViewZIndex(props.zIndex),
          children
        }), adjustPaddingForOffscreenContent && (0, import_jsx_runtime16.jsx)(Stack2, {
          "data-sheet-offscreen-pad": true,
          height: offscreenSize,
          width: "100%"
        })]
      })
    ), [open, props, frameSize, offscreenSize, adjustPaddingForOffscreenContent, hasFit]);
    return (0, import_jsx_runtime16.jsxs)(import_jsx_runtime16.Fragment, {
      children: [(0, import_jsx_runtime16.jsx)(RemoveScroll2, {
        forwardProps: true,
        enabled: removeScrollEnabled,
        allowPinchZoom: true,
        shards: [contentRef],
        removeScrollBar: false,
        children: sheetContents
      }), !disableHideBottomOverflow && // @ts-ignore
      (0, import_jsx_runtime16.jsx)(Frame2, {
        ...props,
        componentName: "SheetCover",
        children: null,
        position: "absolute",
        bottom: "-100%",
        zIndex: -1,
        height: context2.frameSize,
        left: 0,
        right: 0,
        borderWidth: 0,
        borderRadius: 0,
        shadowOpacity: 0
      })]
    });
  })), Sheet2 = (0, import_react21.forwardRef)(function(props, ref) {
    const hydrated = useDidFinishSSR(), {
      isShowingNonSheet
    } = useSheetController();
    let SheetImplementation = SheetImplementationCustom;
    return props.native && Platform_default.OS, isShowingNonSheet || !hydrated ? null : (0, import_jsx_runtime16.jsx)(SheetImplementation, {
      ref,
      ...props
    });
  }), components = {
    Frame: SheetFrame,
    Overlay: SheetOverlay,
    Handle: SheetHandle,
    ScrollView: SheetScrollView
  }, Controlled = withStaticProperties(Sheet2, components);
  return withStaticProperties(Sheet2, {
    ...components,
    Controlled
  });
}

// node_modules/@tamagui/sheet/dist/esm/Sheet.mjs
var Handle = styled(XStack, {
  name: SHEET_HANDLE_NAME,
  variants: {
    open: {
      true: {
        opacity: 1,
        pointerEvents: "auto"
      },
      false: {
        opacity: 0,
        pointerEvents: "none"
      }
    },
    unstyled: {
      false: {
        height: 10,
        borderRadius: 100,
        backgroundColor: "$background",
        zIndex: 10,
        marginHorizontal: "35%",
        marginBottom: "$2",
        opacity: 0.5,
        hoverStyle: {
          opacity: 0.7
        }
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var Overlay = styled(ThemeableStack, {
  name: SHEET_OVERLAY_NAME,
  variants: {
    open: {
      true: {
        pointerEvents: "auto"
      },
      false: {
        pointerEvents: "none"
      }
    },
    unstyled: {
      false: {
        fullscreen: true,
        position: "absolute",
        backgrounded: true,
        zIndex: 99999,
        pointerEvents: "auto"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var Frame = styled(YStack, {
  name: SHEET_NAME,
  variants: {
    unstyled: {
      false: {
        flex: 1,
        backgroundColor: "$background",
        borderTopLeftRadius: "$true",
        borderTopRightRadius: "$true",
        width: "100%",
        maxHeight: "100%",
        overflow: "hidden"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var Sheet = createSheet({
  Frame,
  Handle,
  Overlay
});
var SheetOverlayFrame = Overlay;
var SheetHandleFrame = Handle;

// node_modules/@tamagui/sheet/dist/esm/useSheet.mjs
var useSheet = () => useSheetContext("", void 0);

// node_modules/@tamagui/sheet/dist/esm/SheetController.mjs
var import_react22 = __toESM(require_react(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var SheetController = ({
  children,
  onOpenChange: onOpenChangeProp,
  ...value
}) => {
  const onOpenChange = useEvent(onOpenChangeProp), memoValue = import_react22.default.useMemo(() => ({
    open: value.open,
    hidden: value.hidden,
    disableDrag: value.disableDrag,
    onOpenChange
  }), [onOpenChange, value.open, value.hidden, value.disableDrag]);
  return (0, import_jsx_runtime17.jsx)(SheetControllerContext.Provider, {
    value: memoValue,
    children
  });
};

// node_modules/@tamagui/sheet/dist/esm/nativeSheet.mjs
var import_react23 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var nativeSheets = {
  ios: null
};
function getNativeSheet(platform2) {
  return nativeSheets[platform2];
}
function setupNativeSheet(platform2, RNIOSModal) {
  const {
    ModalSheetView,
    ModalSheetViewMainContent
  } = RNIOSModal;
  platform2 === "ios" && (nativeSheets[platform2] = (props) => {
    const state = useSheetOpenState(props), providerProps = useSheetProviderProps(props, state), {
      open,
      setOpen
    } = state, ref = (0, import_react23.useRef)();
    (0, import_react23.useEffect)(() => {
      var _a, _b;
      open ? (_a = ref.current) == null ? void 0 : _a.presentModal() : (_b = ref.current) == null ? void 0 : _b.dismissModal();
    }, [open]);
    function setOpenInternal(next) {
      var _a;
      (_a = props.onOpenChange) == null ? void 0 : _a.call(props, open), setOpen(next);
    }
    return (0, import_jsx_runtime18.jsx)(import_jsx_runtime18.Fragment, {
      children: (0, import_jsx_runtime18.jsxs)(SheetProvider, {
        ...providerProps,
        onlyShowFrame: true,
        children: [(0, import_jsx_runtime18.jsx)(ModalSheetView, {
          ref,
          onModalDidDismiss: () => setOpenInternal(false),
          children: (0, import_jsx_runtime18.jsx)(ModalSheetViewMainContent, {
            children: (0, import_jsx_runtime18.jsx)(View_default, {
              style: {
                flex: 1
              },
              children: props.children
            })
          })
        }), (0, import_jsx_runtime18.jsx)(YStack, {
          position: "absolute",
          opacity: 0,
          pointerEvents: "none",
          width: 0,
          height: 0,
          children: props.children
        })]
      })
    });
  });
}

// node_modules/@tamagui/dialog/dist/esm/Dialog.mjs
var React32 = __toESM(require_react(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var DIALOG_NAME = "Dialog";
var [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);
var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
var TRIGGER_NAME2 = "DialogTrigger";
var DialogTriggerFrame = styled(View2, {
  name: TRIGGER_NAME2
});
var DialogTrigger = DialogTriggerFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeDialog,
    ...triggerProps
  } = props, isInsideButton = React32.useContext(ButtonNestingContext), context2 = useDialogContext(TRIGGER_NAME2, __scopeDialog), composedTriggerRef = useComposedRefs(forwardedRef, context2.triggerRef);
  return (0, import_jsx_runtime19.jsx)(ButtonNestingContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime19.jsx)(DialogTriggerFrame, {
      tag: isInsideButton ? "span" : "button",
      "aria-haspopup": "dialog",
      "aria-expanded": context2.open,
      "aria-controls": context2.contentId,
      "data-state": getState3(context2.open),
      ...triggerProps,
      ref: composedTriggerRef,
      onPress: composeEventHandlers(props.onPress, context2.onOpenToggle)
    })
  });
});
var PORTAL_NAME = "DialogPortal";
var [PortalProvider2, usePortalContext] = createDialogContext(PORTAL_NAME, {
  forceMount: void 0
});
var DialogPortalFrame = styled(YStack, {
  pointerEvents: "none",
  variants: {
    unstyled: {
      false: {
        alignItems: "center",
        justifyContent: "center",
        fullscreen: true,
        ...isWeb && {
          maxHeight: "100vh",
          position: "fixed"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var DialogPortalItem = (props) => {
  const {
    __scopeDialog,
    children,
    space,
    spaceDirection,
    separator
  } = props, themeName = useThemeName(), context2 = useDialogContext(PORTAL_NAME, props.__scopeDialog), isAdapted = useAdaptIsActive();
  let childrenSpaced = children;
  (space || separator) && (childrenSpaced = spacedChildren({
    children,
    separator,
    space,
    direction: spaceDirection
  }));
  const content = (0, import_jsx_runtime19.jsx)(DialogProvider, {
    scope: __scopeDialog,
    ...context2,
    children: (0, import_jsx_runtime19.jsx)(Theme, {
      name: themeName,
      children: childrenSpaced
    })
  });
  return isAdapted ? (0, import_jsx_runtime19.jsx)(AdaptPortalContents, {
    children: content
  }) : (0, import_jsx_runtime19.jsx)(GorhomPortalItem, {
    children: content
  });
};
var DialogPortal = (props) => {
  const {
    __scopeDialog,
    forceMount,
    children,
    ...frameProps
  } = props, context2 = useDialogContext(PORTAL_NAME, __scopeDialog), isShowing = forceMount || context2.open, [isFullyHidden, setIsFullyHidden] = React32.useState(!isShowing), isAdapted = useAdaptIsActive();
  isShowing && isFullyHidden && setIsFullyHidden(false);
  const handleExitComplete = React32.useCallback(() => {
    setIsFullyHidden(true);
  }, []);
  if (context2.modal) {
    const contents = (0, import_jsx_runtime19.jsx)(StackZIndexContext, {
      zIndex: resolveViewZIndex(props.zIndex),
      children: (0, import_jsx_runtime19.jsx)(AnimatePresence, {
        onExitComplete: handleExitComplete,
        children: isShowing || isAdapted ? children : null
      })
    });
    if (isFullyHidden && !isAdapted) return null;
    const framedContents = (0, import_jsx_runtime19.jsx)(PortalProvider2, {
      scope: __scopeDialog,
      forceMount,
      children: (0, import_jsx_runtime19.jsx)(DialogPortalFrame, {
        pointerEvents: isShowing ? "auto" : "none",
        ...frameProps,
        children: contents
      })
    });
    return isWeb ? (0, import_jsx_runtime19.jsx)(Portal, {
      zIndex: props.zIndex,
      stackZIndex: 1e3,
      children: (0, import_jsx_runtime19.jsx)(PassthroughTheme, {
        children: framedContents
      })
    }) : isAdapted ? framedContents : (0, import_jsx_runtime19.jsx)(DialogPortalItem, {
      __scopeDialog,
      children: framedContents
    });
  }
  return children;
};
var PassthroughTheme = ({
  children
}) => {
  const themeName = useThemeName();
  return (0, import_jsx_runtime19.jsx)(Theme, {
    name: themeName,
    forceClassName: true,
    children
  });
};
var OVERLAY_NAME = "DialogOverlay";
var DialogOverlayFrame = styled(Overlay, {
  name: OVERLAY_NAME
});
var DialogOverlay = DialogOverlayFrame.extractable(React32.forwardRef(function({
  __scopeDialog,
  ...props
}, forwardedRef) {
  const portalContext = usePortalContext(OVERLAY_NAME, __scopeDialog), {
    forceMount = portalContext.forceMount,
    ...overlayProps
  } = props, context2 = useDialogContext(OVERLAY_NAME, __scopeDialog), isAdapted = useAdaptIsActive();
  return !forceMount && (!context2.modal || isAdapted) ? null : (0, import_jsx_runtime19.jsx)(DialogOverlayFrame, {
    "data-state": getState3(context2.open),
    pointerEvents: context2.open ? "auto" : "none",
    ...overlayProps,
    ref: forwardedRef
  });
}));
var CONTENT_NAME2 = "DialogContent";
var DialogContentFrame = styled(ThemeableStack, {
  name: CONTENT_NAME2,
  tag: "dialog",
  variants: {
    size: {
      "...size": (val, extras) => ({})
    },
    unstyled: {
      false: {
        position: "relative",
        backgrounded: true,
        padded: true,
        radiused: true,
        elevate: true,
        zIndex: 1e5
      }
    }
  },
  defaultVariants: {
    size: "$true",
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var DialogContent = DialogContentFrame.extractable(React32.forwardRef(function({
  __scopeDialog,
  ...props
}, forwardedRef) {
  const portalContext = usePortalContext(CONTENT_NAME2, __scopeDialog), {
    forceMount = portalContext.forceMount,
    ...contentProps
  } = props, context2 = useDialogContext(CONTENT_NAME2, __scopeDialog), contents = (0, import_jsx_runtime19.jsx)(import_jsx_runtime19.Fragment, {
    children: context2.modal ? (0, import_jsx_runtime19.jsx)(DialogContentModal, {
      context: context2,
      ...contentProps,
      ref: forwardedRef
    }) : (0, import_jsx_runtime19.jsx)(DialogContentNonModal, {
      context: context2,
      ...contentProps,
      ref: forwardedRef
    })
  });
  return !isWeb || context2.disableRemoveScroll ? contents : (0, import_jsx_runtime19.jsx)(RemoveScroll2, {
    forwardProps: true,
    enabled: context2.open,
    allowPinchZoom: context2.allowPinchZoom,
    shards: [context2.contentRef],
    removeScrollBar: false,
    children: (0, import_jsx_runtime19.jsx)("div", {
      "data-remove-scroll-container": true,
      className: "_dsp_contents",
      children: contents
    })
  });
}));
var DialogContentModal = React32.forwardRef(({
  children,
  context: context2,
  ...props
}, forwardedRef) => {
  const contentRef = React32.useRef(null), composedRefs = useComposedRefs(forwardedRef, context2.contentRef, contentRef);
  return isWeb && React32.useEffect(() => {
    if (!context2.open) return;
    const content = contentRef.current;
    if (content) return hideOthers2(content);
  }, [context2.open]), (0, import_jsx_runtime19.jsx)(DialogContentImpl, {
    ...props,
    context: context2,
    ref: composedRefs,
    trapFocus: context2.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
      var _a;
      event.preventDefault(), (_a = context2.triggerRef.current) == null ? void 0 : _a.focus();
    }),
    onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
      const originalEvent = event.detail.originalEvent, ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
      (originalEvent.button === 2 || ctrlLeftClick) && event.preventDefault();
    }),
    onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => event.preventDefault()),
    ...!props.unstyled && {
      outlineStyle: "none"
    },
    children
  });
});
var DialogContentNonModal = React32.forwardRef((props, forwardedRef) => {
  const hasInteractedOutsideRef = React32.useRef(false);
  return (0, import_jsx_runtime19.jsx)(DialogContentImpl, {
    ...props,
    ref: forwardedRef,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: (event) => {
      var _a, _b;
      (_a = props.onCloseAutoFocus) == null ? void 0 : _a.call(props, event), event.defaultPrevented || (hasInteractedOutsideRef.current || ((_b = props.context.triggerRef.current) == null ? void 0 : _b.focus()), event.preventDefault()), hasInteractedOutsideRef.current = false;
    },
    onInteractOutside: (event) => {
      var _a;
      (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, event), event.defaultPrevented || (hasInteractedOutsideRef.current = true);
      const target = event.target, trigger = props.context.triggerRef.current;
      if (!(trigger instanceof HTMLElement)) return;
      trigger.contains(target) && event.preventDefault();
    }
  });
});
var DialogContentImpl = React32.forwardRef((props, forwardedRef) => {
  const {
    __scopeDialog,
    trapFocus,
    onOpenAutoFocus,
    onCloseAutoFocus,
    disableOutsidePointerEvents,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    context: context2,
    ...contentProps
  } = props, contentRef = React32.useRef(null), composedRefs = useComposedRefs(forwardedRef, contentRef);
  if (useAdaptIsActive()) return !isWeb && !context2.open ? null : (0, import_jsx_runtime19.jsx)(DialogPortalItem, {
    children: contentProps.children
  });
  const contents = (0, import_jsx_runtime19.jsx)(DialogContentFrame, {
    id: context2.contentId,
    "aria-describedby": context2.descriptionId,
    "aria-labelledby": context2.titleId,
    "data-state": getState3(context2.open),
    ...contentProps
  });
  return isWeb ? (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, {
    children: [(0, import_jsx_runtime19.jsx)(Dismissable, {
      disableOutsidePointerEvents: context2.open && disableOutsidePointerEvents,
      forceUnmount: !context2.open,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      ref: composedRefs,
      onDismiss: () => context2.onOpenChange(false),
      children: (0, import_jsx_runtime19.jsx)(FocusScope, {
        loop: true,
        enabled: context2.open,
        trapped: trapFocus,
        onMountAutoFocus: onOpenAutoFocus,
        forceUnmount: !context2.open,
        onUnmountAutoFocus: onCloseAutoFocus,
        children: contents
      })
    }), (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, {
      children: [(0, import_jsx_runtime19.jsx)(TitleWarning, {
        titleId: context2.titleId
      }), (0, import_jsx_runtime19.jsx)(DescriptionWarning, {
        contentRef,
        descriptionId: context2.descriptionId
      })]
    })]
  }) : contents;
});
var DialogTitleFrame = styled(H2, {
  name: "DialogTitle"
});
var DialogTitle = DialogTitleFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeDialog,
    ...titleProps
  } = props, context2 = useDialogContext("DialogTitle", __scopeDialog);
  return (0, import_jsx_runtime19.jsx)(DialogTitleFrame, {
    id: context2.titleId,
    ...titleProps,
    ref: forwardedRef
  });
});
var DialogDescriptionFrame = styled(Paragraph, {
  name: "DialogDescription"
});
var DESCRIPTION_NAME = "DialogDescription";
var DialogDescription = DialogDescriptionFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeDialog,
    ...descriptionProps
  } = props, context2 = useDialogContext(DESCRIPTION_NAME, __scopeDialog);
  return (0, import_jsx_runtime19.jsx)(DialogDescriptionFrame, {
    id: context2.descriptionId,
    ...descriptionProps,
    ref: forwardedRef
  });
});
var CLOSE_NAME = "DialogClose";
var DialogCloseFrame = styled(View2, {
  name: CLOSE_NAME,
  tag: "button"
});
var DialogClose = DialogCloseFrame.styleable((props, forwardedRef) => {
  const {
    __scopeDialog,
    displayWhenAdapted,
    ...closeProps
  } = props, context2 = useDialogContext(CLOSE_NAME, __scopeDialog, {
    warn: false,
    fallback: {}
  }), isAdapted = useAdaptIsActive(), isInsideButton = React32.useContext(ButtonNestingContext);
  return isAdapted && !displayWhenAdapted ? null : (0, import_jsx_runtime19.jsx)(DialogCloseFrame, {
    accessibilityLabel: "Dialog Close",
    tag: isInsideButton ? "span" : "button",
    ...closeProps,
    ref: forwardedRef,
    onPress: composeEventHandlers(props.onPress, () => {
      context2.onOpenChange(false);
    })
  });
});
function getState3(open) {
  return open ? "open" : "closed";
}
var TITLE_WARNING_NAME = "DialogTitleWarning";
var [DialogWarningProvider, useWarningContext] = createContext6(TITLE_WARNING_NAME, {
  contentName: CONTENT_NAME2,
  titleName: "DialogTitle",
  docsSlug: "dialog"
});
var TitleWarning = ({
  titleId
}) => {
  if (true) {
    const titleWarningContext = useWarningContext(TITLE_WARNING_NAME), MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.`;
    React32.useEffect(() => {
      isWeb && titleId && (document.getElementById(titleId) || console.warn(MESSAGE));
    }, [MESSAGE, titleId]);
  }
  return null;
};
var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
var DescriptionWarning = ({
  contentRef,
  descriptionId
}) => {
  if (true) {
    const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${useWarningContext(DESCRIPTION_WARNING_NAME).contentName}}.`;
    React32.useEffect(() => {
      if (!isWeb) return;
      const contentNode = contentRef.current;
      if (!(contentNode instanceof HTMLElement)) return;
      const describedById = contentNode.getAttribute("aria-describedby");
      descriptionId && describedById && (document.getElementById(descriptionId) || console.warn(MESSAGE));
    }, [MESSAGE, contentRef, descriptionId]);
  }
  return null;
};
var Dialog = withStaticProperties(React32.forwardRef(function(props, ref) {
  const {
    __scopeDialog,
    children,
    open: openProp,
    defaultOpen = false,
    onOpenChange,
    modal = true,
    allowPinchZoom = false,
    disableRemoveScroll = false
  } = props, baseId = React32.useId(), scopeId = `scope-${baseId}`, contentId = `content-${baseId}`, titleId = `title-${baseId}`, descriptionId = `description-${baseId}`, scopeKey = __scopeDialog ? Object.keys(__scopeDialog)[0] : scopeId, adaptName = getAdaptName({
    scopeKey,
    contentId
  }), triggerRef = React32.useRef(null), contentRef = React32.useRef(null), [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  }), onOpenToggle = React32.useCallback(() => {
    setOpen((prevOpen) => !prevOpen);
  }, [setOpen]), context2 = {
    scope: __scopeDialog,
    scopeKey,
    triggerRef,
    contentRef,
    contentId,
    titleId,
    descriptionId,
    open,
    onOpenChange: setOpen,
    onOpenToggle,
    modal,
    allowPinchZoom,
    disableRemoveScroll
  };
  return React32.useImperativeHandle(ref, () => ({
    open: setOpen
  }), [setOpen]), (0, import_jsx_runtime19.jsx)(AdaptParent, {
    scope: adaptName,
    portal: {
      forwardProps: props
    },
    children: (0, import_jsx_runtime19.jsx)(DialogProvider, {
      ...context2,
      children: (0, import_jsx_runtime19.jsx)(DialogSheetController, {
        onOpenChange: setOpen,
        __scopeDialog,
        children
      })
    })
  });
}), {
  Trigger: DialogTrigger,
  Portal: DialogPortal,
  Overlay: DialogOverlay,
  Content: DialogContent,
  Title: DialogTitle,
  Description: DialogDescription,
  Close: DialogClose,
  Sheet: Sheet.Controlled,
  Adapt
});
var getAdaptName = ({
  scopeKey,
  contentId
}) => `${scopeKey || contentId}DialogAdapt`;
var DialogSheetController = (props) => {
  const context2 = useDialogContext("DialogSheetController", props.__scopeDialog), isAdapted = useAdaptIsActive();
  return (0, import_jsx_runtime19.jsx)(SheetController, {
    onOpenChange: (val) => {
      var _a;
      isAdapted && ((_a = props.onOpenChange) == null ? void 0 : _a.call(props, val));
    },
    open: context2.open,
    hidden: !isAdapted,
    children: props.children
  });
};

// node_modules/@tamagui/alert-dialog/dist/esm/AlertDialog.mjs
var React33 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var ROOT_NAME = "AlertDialog";
var [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [createDialogScope]);
var useDialogScope = createDialogScope();
var TRIGGER_NAME3 = "AlertDialogTrigger";
var NativeAlertDialogTriggerFrame = styled(View2, {
  name: TRIGGER_NAME3
});
var AlertDialogTrigger = React33.forwardRef((props, forwardedRef) => {
  if (props.__native) {
    const {
      __native,
      onPress,
      __onPress,
      ...rest
    } = props;
    return (0, import_jsx_runtime20.jsx)(NativeAlertDialogTriggerFrame, {
      ...rest,
      onPress: composeEventHandlers(onPress, __onPress)
    });
  }
  const {
    __scopeAlertDialog,
    ...triggerProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(DialogTrigger, {
    ...dialogScope,
    ...triggerProps,
    ref: forwardedRef
  });
});
AlertDialogTrigger.displayName = TRIGGER_NAME3;
var PORTAL_NAME2 = "AlertDialogPortal";
var AlertDialogPortal = (props) => {
  const {
    __scopeAlertDialog,
    ...portalProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(DialogPortal, {
    ...dialogScope,
    ...portalProps
  });
};
AlertDialogPortal.displayName = PORTAL_NAME2;
var OVERLAY_NAME2 = "AlertDialogOverlay";
var AlertDialogOverlayFrame = styled(DialogOverlayFrame, {
  name: OVERLAY_NAME2
});
var AlertDialogOverlay = AlertDialogOverlayFrame.extractable(React33.forwardRef((props, forwardedRef) => {
  const {
    __scopeAlertDialog,
    ...overlayProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(DialogOverlay, {
    ...dialogScope,
    ...overlayProps,
    ref: forwardedRef
  });
}));
AlertDialogOverlay.displayName = OVERLAY_NAME2;
var CONTENT_NAME3 = "AlertDialogContent";
var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME3);
var AlertDialogContent = React33.forwardRef((props, forwardedRef) => {
  const {
    __scopeAlertDialog,
    children,
    ...contentProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog), contentRef = React33.useRef(null), composedRefs = useComposedRefs(forwardedRef, contentRef), cancelRef = React33.useRef(null);
  return (0, import_jsx_runtime20.jsx)(DialogWarningProvider, {
    contentName: CONTENT_NAME3,
    titleName: TITLE_NAME,
    docsSlug: "alert-dialog",
    children: (0, import_jsx_runtime20.jsx)(AlertDialogContentProvider, {
      scope: __scopeAlertDialog,
      cancelRef,
      children: (0, import_jsx_runtime20.jsxs)(DialogContent, {
        role: "alertdialog",
        ...dialogScope,
        ...contentProps,
        ref: composedRefs,
        onOpenAutoFocus: composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {
          var _a;
          event.preventDefault(), isWeb && ((_a = cancelRef.current) == null ? void 0 : _a.focus({
            preventScroll: true
          }));
        }),
        onPointerDownOutside: (event) => event.preventDefault(),
        onInteractOutside: (event) => event.preventDefault(),
        children: [(0, import_jsx_runtime20.jsx)(Slottable, {
          children
        }), (0, import_jsx_runtime20.jsx)(DescriptionWarning2, {
          contentRef
        })]
      })
    })
  });
});
AlertDialogContent.displayName = CONTENT_NAME3;
var TITLE_NAME = "AlertDialogTitle";
var AlertDialogTitle = React33.forwardRef((props, forwardedRef) => {
  const {
    __scopeAlertDialog,
    ...titleProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(DialogTitle, {
    ...dialogScope,
    ...titleProps,
    ref: forwardedRef
  });
});
AlertDialogTitle.displayName = TITLE_NAME;
var DESCRIPTION_NAME2 = "AlertDialogDescription";
var AlertDialogDescription = React33.forwardRef((props, forwardedRef) => {
  const {
    __scopeAlertDialog,
    ...descriptionProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(DialogDescription, {
    ...dialogScope,
    ...descriptionProps,
    ref: forwardedRef
  });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME2;
var ACTION_NAME = "AlertDialogAction";
var AlertDialogAction = React33.forwardRef((props, forwardedRef) => {
  const {
    __scopeAlertDialog,
    ...actionProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(DialogClose, {
    ...dialogScope,
    ...actionProps,
    ref: forwardedRef
  });
});
AlertDialogAction.displayName = ACTION_NAME;
var CANCEL_NAME = "AlertDialogCancel";
var AlertDialogCancel = React33.forwardRef((props, forwardedRef) => {
  const {
    __scopeAlertDialog,
    ...cancelProps
  } = props, {
    cancelRef
  } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog), dialogScope = useDialogScope(__scopeAlertDialog), ref = useComposedRefs(forwardedRef, cancelRef);
  return (0, import_jsx_runtime20.jsx)(DialogClose, {
    ...dialogScope,
    ...cancelProps,
    ref
  });
});
AlertDialogCancel.displayName = CANCEL_NAME;
var DescriptionWarning2 = ({
  contentRef
}) => (React33.useEffect(() => {
  var _a;
  if (!isWeb) return;
  document.getElementById(
    // @ts-ignore
    (_a = contentRef.current) == null ? void 0 : _a.getAttribute("aria-describedby")
  ) || console.warn(`\`${CONTENT_NAME3}\` requires a description for the component to be accessible for screen reader users.
  
        You can add a description to the \`${CONTENT_NAME3}\` by passing a \`${DESCRIPTION_NAME2}\` component as a child, which also benefits sighted users by adding visible context to the dialog.
        
        Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME3}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.
        
        For more information, see https://tamagui.dev/docs/components/alert-dialog`);
}, [contentRef]), null);
var AlertDialogInner = (props) => {
  const {
    __scopeAlertDialog,
    native,
    ...alertDialogProps
  } = props, dialogScope = useDialogScope(__scopeAlertDialog);
  return (0, import_jsx_runtime20.jsx)(Dialog, {
    ...dialogScope,
    ...alertDialogProps,
    modal: true
  });
};
var AlertDialog = withStaticProperties(AlertDialogInner, {
  Trigger: AlertDialogTrigger,
  Portal: AlertDialogPortal,
  Overlay: AlertDialogOverlay,
  Content: AlertDialogContent,
  Action: AlertDialogAction,
  Cancel: AlertDialogCancel,
  Title: AlertDialogTitle,
  Description: AlertDialogDescription
});
AlertDialog.displayName = ROOT_NAME;

// node_modules/@tamagui/image/dist/esm/Image.mjs
var import_react24 = __toESM(require_react(), 1);
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var StyledImage = styled(Image_default, {
  name: "Image"
});
var hasWarned = false;
var Image = StyledImage.styleable((inProps, ref) => {
  const [props, style] = usePropsAndStyle(inProps), {
    src,
    source,
    objectFit,
    ...rest
  } = props;
  typeof src == "string" && (typeof props.width == "string" && props.width[0] !== "$" || typeof props.height == "string" && props.height[0] !== "$") && (hasWarned || (hasWarned = true, console.warn('React Native expects a numerical width/height. If you want to use a percent you must define the "source" prop with width, height, and uri.')));
  let finalSource = typeof src == "string" ? {
    uri: src,
    ...isWeb && {
      width: props.width || (style == null ? void 0 : style.width),
      height: props.height || (style == null ? void 0 : style.height)
    }
  } : source ?? src;
  return finalSource && typeof finalSource == "object" && (process.env.TAMAGUI_IMAGE_CHECK_ERROR && import_react24.default.useEffect(() => {
    async function run() {
      if (typeof src == "string") try {
        await fetch(src).then((res) => res.text());
      } catch {
        console.error(`Error loading image: ${src}`, {
          props
        });
      }
    }
    run();
  }, [src]), finalSource.default && (finalSource = finalSource.default)), (0, import_jsx_runtime21.jsx)(Image_default, {
    resizeMode: objectFit,
    ref,
    source: finalSource,
    style,
    ...rest
  });
});
Image.getSize = Image_default.getSize;
Image.getSizeWithHeaders = Image_default.getSizeWithHeaders;
Image.prefetch = Image_default.prefetch;
Image.prefetchWithMetadata = Image_default.prefetchWithMetadata;
Image.abortPrefetch = Image_default.abortPrefetch;
Image.queryCache = Image_default.queryCache;

// node_modules/@tamagui/shapes/dist/esm/getShapeSize.mjs
var getShapeSize = (size4, {
  tokens
}) => {
  const width = tokens.size[size4] ?? size4, height = tokens.size[size4] ?? size4;
  return {
    width,
    height,
    minWidth: width,
    maxWidth: width,
    maxHeight: height,
    minHeight: height
  };
};

// node_modules/@tamagui/shapes/dist/esm/Square.mjs
var Square = styled(ThemeableStack, {
  name: "Square",
  alignItems: "center",
  justifyContent: "center",
  variants: {
    size: {
      "...size": getShapeSize,
      ":number": getShapeSize
    }
  }
});

// node_modules/@tamagui/shapes/dist/esm/Circle.mjs
var Circle = styled(Square, {
  name: "Circle",
  circular: true
});

// node_modules/@tamagui/avatar/dist/esm/Avatar.mjs
var React35 = __toESM(require_react(), 1);
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var AVATAR_NAME = "Avatar";
var [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);
var [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);
var IMAGE_NAME = "AvatarImage";
var AvatarImage = React35.forwardRef((props, forwardedRef) => {
  var _a;
  const {
    __scopeAvatar,
    src,
    onLoadingStatusChange = () => {
    },
    ...imageProps
  } = props, context2 = useAvatarContext(IMAGE_NAME, __scopeAvatar), [status, setStatus] = React35.useState("idle"), shapeSize = getVariableValue((_a = getShapeSize(
    context2.size,
    // @ts-expect-error
    {
      tokens: getTokens()
    }
  )) == null ? void 0 : _a.width);
  return React35.useEffect(() => {
    setStatus("idle");
  }, [JSON.stringify(src)]), React35.useEffect(() => {
    onLoadingStatusChange(status), context2.onImageLoadingStatusChange(status);
  }, [status]), (0, import_jsx_runtime22.jsx)(YStack, {
    fullscreen: true,
    zIndex: 1,
    children: (0, import_jsx_runtime22.jsx)(Image, {
      fullscreen: true,
      ...typeof shapeSize == "number" && !Number.isNaN(shapeSize) && {
        width: shapeSize,
        height: shapeSize
      },
      ...imageProps,
      ref: forwardedRef,
      src,
      onError: () => {
        setStatus("error");
      },
      onLoad: () => {
        setStatus("loaded");
      }
    })
  });
});
AvatarImage.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback";
var AvatarFallbackFrame = styled(YStack, {
  name: FALLBACK_NAME,
  position: "absolute",
  fullscreen: true,
  zIndex: 0
});
var AvatarFallback = AvatarFallbackFrame.extractable(React35.forwardRef((props, forwardedRef) => {
  const {
    __scopeAvatar,
    delayMs,
    ...fallbackProps
  } = props, context2 = useAvatarContext(FALLBACK_NAME, __scopeAvatar), [canRender, setCanRender] = React35.useState(delayMs === void 0);
  return React35.useEffect(() => {
    if (delayMs !== void 0) {
      const timerId = setTimeout(() => setCanRender(true), delayMs);
      return () => clearTimeout(timerId);
    }
  }, [delayMs]), canRender && context2.imageLoadingStatus !== "loaded" ? (0, import_jsx_runtime22.jsx)(AvatarFallbackFrame, {
    ...fallbackProps,
    ref: forwardedRef
  }) : null;
}));
AvatarFallback.displayName = FALLBACK_NAME;
var AvatarFrame = styled(Square, {
  name: AVATAR_NAME,
  position: "relative",
  overflow: "hidden"
});
var Avatar = withStaticProperties(React35.forwardRef((props, forwardedRef) => {
  const {
    __scopeAvatar,
    size: size4 = "$true",
    ...avatarProps
  } = props, [imageLoadingStatus, setImageLoadingStatus] = React35.useState("idle");
  return (0, import_jsx_runtime22.jsx)(AvatarProvider, {
    size: size4,
    scope: __scopeAvatar,
    imageLoadingStatus,
    onImageLoadingStatusChange: setImageLoadingStatus,
    children: (0, import_jsx_runtime22.jsx)(AvatarFrame, {
      size: size4,
      ...avatarProps,
      ref: forwardedRef
    })
  });
}), {
  Image: AvatarImage,
  Fallback: AvatarFallback
});
Avatar.displayName = AVATAR_NAME;

// node_modules/@tamagui/font-size/dist/esm/getFontSize.mjs
var getFontSize = (inSize, opts) => {
  const res = getFontSizeVariable(inSize, opts);
  return isVariable(res) ? +res.val : res ? +res : 16;
};
var getFontSizeVariable = (inSize, opts) => {
  var _a;
  const token = getFontSizeToken(inSize, opts);
  if (!token) return inSize;
  const conf = getConfig();
  return (_a = conf.fontsParsed[(opts == null ? void 0 : opts.font) || conf.defaultFontToken]) == null ? void 0 : _a.size[token];
};
var getFontSizeToken = (inSize, opts) => {
  var _a;
  if (typeof inSize == "number") return null;
  const relativeSize = (opts == null ? void 0 : opts.relativeSize) || 0, conf = getConfig(), fontSize = ((_a = conf.fontsParsed[(opts == null ? void 0 : opts.font) || conf.defaultFontToken]) == null ? void 0 : _a.size) || // fallback to size tokens
  conf.tokensParsed.size, size4 = (inSize === "$true" && !("$true" in fontSize) ? "$4" : inSize) ?? ("$true" in fontSize ? "$true" : "$4"), sizeTokens = Object.keys(fontSize);
  let foundIndex = sizeTokens.indexOf(size4);
  foundIndex === -1 && size4.endsWith(".5") && (foundIndex = sizeTokens.indexOf(size4.replace(".5", ""))), foundIndex === -1 && console.warn("No font size found", size4, opts, "in size tokens", sizeTokens);
  const tokenIndex = Math.min(Math.max(0, foundIndex + relativeSize), sizeTokens.length - 1);
  return sizeTokens[tokenIndex] ?? size4;
};

// node_modules/@tamagui/helpers-tamagui/dist/esm/prevent.mjs
var prevent = (e) => [e.preventDefault(), e.stopPropagation()];

// node_modules/@tamagui/helpers-tamagui/dist/esm/useCurrentColor.mjs
var useCurrentColor = (colorProp) => {
  var _a, _b;
  const theme = useTheme();
  return colorProp ? getVariable(colorProp) : ((_a = theme[colorProp]) == null ? void 0 : _a.get()) || ((_b = theme.color) == null ? void 0 : _b.get());
};

// node_modules/@tamagui/helpers-tamagui/dist/esm/useGetThemedIcon.mjs
var import_react25 = __toESM(require_react(), 1);
var useGetThemedIcon = (props) => {
  const color = useCurrentColor(props.color);
  return (el) => el && (import_react25.default.isValidElement(el) ? import_react25.default.cloneElement(el, {
    ...props,
    color,
    // @ts-expect-error
    ...el.props
  }) : import_react25.default.createElement(el, props));
};

// node_modules/@tamagui/button/dist/esm/Button.mjs
var import_react26 = __toESM(require_react(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var ButtonContext = createStyledContext({
  // keeping these here means they work with styled() passing down color to text
  color: void 0,
  ellipse: void 0,
  fontFamily: void 0,
  fontSize: void 0,
  fontStyle: void 0,
  fontWeight: void 0,
  letterSpacing: void 0,
  maxFontSizeMultiplier: void 0,
  size: void 0,
  textAlign: void 0,
  variant: void 0
});
var BUTTON_NAME = "Button";
var ButtonFrame = styled(ThemeableStack, {
  name: BUTTON_NAME,
  tag: "button",
  context: ButtonContext,
  role: "button",
  focusable: true,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        justifyContent: "center",
        alignItems: "center",
        flexWrap: "nowrap",
        flexDirection: "row",
        cursor: "pointer",
        hoverTheme: true,
        pressTheme: true,
        backgrounded: true,
        borderWidth: 1,
        borderColor: "transparent",
        focusVisibleStyle: {
          outlineColor: "$outlineColor",
          outlineStyle: "solid",
          outlineWidth: 2
        }
      }
    },
    variant: {
      outlined: {
        backgroundColor: "transparent",
        borderWidth: 2,
        borderColor: "$borderColor",
        hoverStyle: {
          backgroundColor: "transparent",
          borderColor: "$borderColorHover"
        },
        pressStyle: {
          backgroundColor: "transparent",
          borderColor: "$borderColorPress"
        },
        focusVisibleStyle: {
          backgroundColor: "transparent",
          borderColor: "$borderColorFocus"
        }
      }
    },
    size: {
      "...size": getButtonSized,
      ":number": getButtonSized
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ButtonText = styled(SizableText, {
  name: "Button",
  context: ButtonContext,
  variants: {
    unstyled: {
      false: {
        userSelect: "none",
        cursor: "pointer",
        // flexGrow 1 leads to inconsistent native style where text pushes to start of view
        flexGrow: 0,
        flexShrink: 1,
        ellipse: true,
        color: "$color"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ButtonIcon = (props) => {
  const {
    children,
    scaleIcon = 1
  } = props, {
    size: size4,
    color
  } = (0, import_react26.useContext)(ButtonContext), iconSize = (typeof size4 == "number" ? size4 * 0.5 : getFontSize(size4)) * scaleIcon;
  return useGetThemedIcon({
    size: iconSize,
    color
  })(children);
};
var ButtonComponent = ButtonFrame.styleable(function(props, ref) {
  const {
    props: buttonProps
  } = useButton(props);
  return (0, import_jsx_runtime23.jsx)(ButtonFrame, {
    "data-disable-theme": true,
    ...buttonProps,
    ref
  });
});
var Button2 = withStaticProperties(ButtonComponent, {
  Text: ButtonText,
  Icon: ButtonIcon
});
function useButton({
  textProps,
  ...propsIn
}, {
  Text: Text4 = Button2.Text
} = {
  Text: Button2.Text
}) {
  const isNested = (0, import_react26.useContext)(ButtonNestingContext), propsActive = useProps(propsIn, {
    noNormalize: true,
    noExpand: true
  }), {
    icon,
    iconAfter,
    space,
    spaceFlex,
    scaleIcon = 1,
    scaleSpace = 0.66,
    separator,
    noTextWrap,
    fontFamily,
    fontSize,
    fontWeight,
    fontStyle,
    letterSpacing,
    tag,
    ellipse,
    maxFontSizeMultiplier,
    ...restProps
  } = propsActive, size4 = propsActive.size || (propsActive.unstyled ? void 0 : "$true"), color = propsActive.color, iconSize = (typeof size4 == "number" ? size4 * 0.5 : getFontSize(size4, {
    font: (fontFamily == null ? void 0 : fontFamily[0]) === "$" ? fontFamily : void 0
  })) * scaleIcon, getThemedIcon = useGetThemedIcon({
    size: iconSize,
    color
  }), [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon), spaceSize = space ?? getVariableValue(iconSize) * scaleSpace, contents = noTextWrap ? [propsIn.children] : wrapChildrenInText(Text4, {
    children: propsIn.children,
    fontFamily,
    fontSize,
    textProps,
    fontWeight,
    fontStyle,
    letterSpacing,
    ellipse,
    maxFontSizeMultiplier
  }, Text4 === ButtonText && propsActive.unstyled !== true ? {
    unstyled: process.env.TAMAGUI_HEADLESS === "1",
    size: size4
  } : void 0), inner2 = spacedChildren({
    // a bit arbitrary but scaling to font size is necessary so long as button does
    space: spaceSize === false ? 0 : spaceSize == true ? "$true" : spaceSize,
    spaceFlex,
    ensureKeys: true,
    separator,
    direction: propsActive.flexDirection === "column" || propsActive.flexDirection === "column-reverse" ? "vertical" : "horizontal",
    // for keys to stay the same we keep indices as similar a possible
    // so even if icons are undefined we still pass them
    children: [themedIcon, ...contents, themedIconAfter]
  }), props = {
    size: size4,
    ...propsIn.disabled && {
      // in rnw - false still has keyboard tabIndex, undefined = not actually focusable
      focusable: void 0,
      // even with tabIndex unset, it will keep focusVisibleStyle on web so disable it here
      focusVisibleStyle: {
        borderColor: "$background"
      }
    },
    // fixes SSR issue + DOM nesting issue of not allowing button in button
    tag: tag ?? (isNested ? "span" : (
      // defaults to <a /> when accessibilityRole = link
      // see https://github.com/tamagui/tamagui/issues/505
      propsActive.accessibilityRole === "link" || propsActive.role === "link" ? "a" : "button"
    )),
    ...restProps,
    children: (0, import_jsx_runtime23.jsx)(ButtonNestingContext.Provider, {
      value: true,
      children: inner2
    }),
    // forces it to be a runtime pressStyle so it passes through context text colors
    disableClassName: true
  };
  return {
    spaceSize,
    isNested,
    props
  };
}

// node_modules/@tamagui/card/dist/esm/Card.mjs
var CardContext = createStyledContext({
  size: "$true"
});
var CardFrame = styled(ThemeableStack, {
  name: "Card",
  context: CardContext,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        position: "relative"
      }
    },
    size: {
      "...size": (val, {
        tokens
      }) => ({
        borderRadius: tokens.radius[val] ?? val
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var CardHeader = styled(ThemeableStack, {
  name: "CardHeader",
  context: CardContext,
  variants: {
    unstyled: {
      false: {
        zIndex: 10,
        backgroundColor: "transparent",
        marginBottom: "auto"
      }
    },
    size: {
      "...size": (val, {
        tokens
      }) => ({
        padding: tokens.space[val] ?? val
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var CardFooter = styled(CardHeader, {
  name: "CardFooter",
  variants: {
    unstyled: {
      false: {
        zIndex: 5,
        flexDirection: "row",
        marginTop: "auto",
        marginBottom: 0
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var CardBackground = styled(ThemeableStack, {
  name: "CardBackground",
  variants: {
    unstyled: {
      false: {
        zIndex: 0,
        fullscreen: true,
        overflow: "hidden",
        pointerEvents: "none",
        padding: 0
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var Card = withStaticProperties(CardFrame, {
  Header: CardHeader,
  Footer: CardFooter,
  Background: CardBackground
});

// node_modules/@tamagui/checkbox/dist/esm/CheckboxStyledContext.mjs
var CheckboxStyledContext = createStyledContext({
  size: "$true",
  scaleIcon: 1
});

// node_modules/@tamagui/checkbox/dist/esm/Checkbox.mjs
var INDICATOR_NAME = "CheckboxIndicator";
var CheckboxIndicatorFrame = styled(ThemeableStack, {
  // use Checkbox for easier themes
  name: INDICATOR_NAME,
  context: CheckboxStyledContext,
  variants: {
    unstyled: {
      false: {}
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var CHECKBOX_NAME = "Checkbox";
var CheckboxFrame = styled(ThemeableStack, {
  name: CHECKBOX_NAME,
  tag: "button",
  context: CheckboxStyledContext,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        pressTheme: true,
        focusable: true,
        borderWidth: 1,
        borderColor: "$borderColor",
        hoverStyle: {
          borderColor: "$borderColorHover"
        },
        focusStyle: {
          borderColor: "$borderColorFocus"
        },
        focusVisibleStyle: {
          outlineStyle: "solid",
          outlineWidth: 2,
          outlineColor: "$outlineColor"
        }
      }
    },
    disabled: {
      true: {
        pointerEvents: "none",
        userSelect: "none",
        cursor: "not-allowed",
        hoverStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$background"
        },
        pressStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$background"
        },
        focusStyle: {
          outlineWidth: 0
        }
      }
    },
    size: {
      "...size": (val) => ({
        borderRadius: getVariableValue(getSize(val)) / 8
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});

// node_modules/@tamagui/checkbox/dist/esm/createCheckbox.mjs
var import_react29 = __toESM(require_react(), 1);

// node_modules/@tamagui/focusable/dist/esm/registerFocusable.mjs
var registerFocusable = (id, input) => () => {
};
var focusFocusable = (id) => {
};

// node_modules/@tamagui/focusable/dist/esm/focusableInputHOC.mjs
var import_react27 = __toESM(require_react(), 1);
function useFocusable({
  isInput: isInput3,
  props,
  ref
}) {
  const {
    id,
    onChangeText,
    value,
    defaultValue
  } = props, inputValue = import_react27.default.useRef(value || defaultValue || ""), unregisterFocusable = import_react27.default.useRef(), focusAndSelect = import_react27.default.useCallback((input) => {
    input.focus(), input.setSelection && typeof inputValue.current == "string" && input.setSelection(0, inputValue.current.length);
  }, []), registerFocusableHandler = import_react27.default.useCallback((input) => {
    var _a;
    !id || !input || ((_a = unregisterFocusable.current) == null ? void 0 : _a.call(unregisterFocusable), unregisterFocusable.current = registerFocusable(id, {
      focus: input.focus,
      ...isInput3 && {
        focusAndSelect: () => focusAndSelect(input)
      }
    }));
  }, [id, isInput3, focusAndSelect]), inputRef = import_react27.default.useCallback((input) => {
    input && registerFocusableHandler(input);
  }, [registerFocusableHandler]), handleChangeText = useEvent((value2) => {
    inputValue.current = value2, onChangeText == null ? void 0 : onChangeText(value2);
  });
  return import_react27.default.useEffect(() => () => {
    var _a;
    (_a = unregisterFocusable.current) == null ? void 0 : _a.call(unregisterFocusable);
  }, []), {
    ref: import_react27.default.useMemo(() => composeRefs(ref, inputRef), [ref, inputRef]),
    onChangeText: handleChangeText
  };
}

// node_modules/@tamagui/label/dist/esm/Label.mjs
var React38 = __toESM(require_react(), 1);
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var NAME = "Label";
var [LabelProvider, useLabelContextImpl] = createContext6(NAME, {
  id: void 0,
  controlRef: {
    current: null
  }
});
var LabelFrame = styled(SizableText, {
  name: "Label",
  tag: "label",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        color: "$color",
        backgroundColor: "transparent",
        display: "flex",
        alignItems: "center",
        userSelect: "none",
        cursor: "default",
        pressStyle: {
          color: "$colorPress"
        }
      }
    },
    size: {
      "...size": (val, extras) => {
        var _a;
        const buttonHeight = (_a = getButtonSized(val, extras)) == null ? void 0 : _a.height;
        return {
          ...getFontSized(val, extras),
          lineHeight: buttonHeight ? extras.tokens.size[buttonHeight] : void 0
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var LabelComponent = React38.forwardRef((props, forwardedRef) => {
  const {
    htmlFor,
    id: idProp,
    ...labelProps
  } = props, controlRef = React38.useRef(null), ref = React38.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), backupId = React38.useId(), id = idProp ?? backupId;
  return isWeb && React38.useEffect(() => {
    if (htmlFor) {
      const element = document.getElementById(htmlFor);
      if (ref.current && element) {
        const getAriaLabel = () => element.getAttribute("aria-labelledby"), ariaLabelledBy = [id, getAriaLabel()].filter(Boolean).join(" ");
        return element.setAttribute("aria-labelledby", ariaLabelledBy), controlRef.current = element, () => {
          var _a;
          if (!id) return;
          const ariaLabelledBy2 = (_a = getAriaLabel()) == null ? void 0 : _a.replace(id, "");
          ariaLabelledBy2 === "" ? element.removeAttribute("aria-labelledby") : ariaLabelledBy2 && element.setAttribute("aria-labelledby", ariaLabelledBy2);
        };
      }
    }
  }, [id, htmlFor]), (0, import_jsx_runtime24.jsx)(LabelProvider, {
    id,
    controlRef,
    children: (0, import_jsx_runtime24.jsx)(LabelFrame, {
      id,
      htmlFor,
      ...labelProps,
      ref: composedRefs,
      onMouseDown: (event) => {
        var _a;
        (_a = props.onMouseDown) == null ? void 0 : _a.call(props, event), !event.defaultPrevented && event.detail > 1 && event.preventDefault();
      },
      onPress: (event) => {
        var _a;
        if ((_a = props.onPress) == null ? void 0 : _a.call(props, event), isWeb) {
          if (htmlFor || !controlRef.current || event.defaultPrevented) return;
          const isClickingControl = controlRef.current.contains(event.target), isUserClick = event.isTrusted === true;
          !isClickingControl && isUserClick && (controlRef.current.click(), controlRef.current.focus());
        } else props.htmlFor && focusFocusable(props.htmlFor);
      }
    })
  });
});
LabelComponent.displayName = NAME;
var Label = LabelFrame.extractable(themeable(LabelComponent), {
  neverFlatten: true
});
var useLabelContext = (element) => {
  const context2 = useLabelContextImpl("LabelConsumer"), {
    controlRef
  } = context2;
  return React38.useEffect(() => {
    element && (controlRef.current = element);
  }, [element, controlRef]), context2.id;
};

// node_modules/@tamagui/checkbox-headless/dist/esm/useCheckbox.mjs
var import_react28 = __toESM(require_react(), 1);

// node_modules/@tamagui/use-previous/dist/esm/index.mjs
var React39 = __toESM(require_react(), 1);
function usePrevious(value) {
  const ref = React39.useRef({
    value,
    previous: value
  });
  return React39.useMemo(() => (ref.current.value !== value && (ref.current.previous = ref.current.value, ref.current.value = value), ref.current.previous), [value]);
}

// node_modules/@tamagui/checkbox-headless/dist/esm/BubbleInput.mjs
var React40 = __toESM(require_react(), 1);

// node_modules/@tamagui/checkbox-headless/dist/esm/utils.mjs
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState4(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}

// node_modules/@tamagui/checkbox-headless/dist/esm/BubbleInput.mjs
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var BubbleInput = (props) => {
  const {
    checked,
    bubbles = true,
    control,
    isHidden: isHidden4,
    ...inputProps
  } = props, ref = React40.useRef(null), prevChecked = usePrevious(checked);
  return React40.useEffect(() => {
    const input = ref.current, inputProto = window.HTMLInputElement.prototype, setChecked = Object.getOwnPropertyDescriptor(inputProto, "checked").set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", {
        bubbles
      });
      input.indeterminate = isIndeterminate(checked), setChecked.call(input, isIndeterminate(checked) ? false : checked), input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]), (0, import_jsx_runtime25.jsx)("input", {
    type: "checkbox",
    defaultChecked: isIndeterminate(checked) ? false : checked,
    ...inputProps,
    tabIndex: -1,
    ref,
    "aria-hidden": isHidden4,
    style: {
      ...isHidden4 ? {
        // ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      } : {
        appearance: "auto",
        accentColor: "var(--color6)"
      },
      ...props.style
    }
  });
};

// node_modules/@tamagui/checkbox-headless/dist/esm/useCheckbox.mjs
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
function useCheckbox(props, [checked, setChecked], ref) {
  const {
    labelledBy: ariaLabelledby,
    name,
    required,
    disabled,
    value = "on",
    onCheckedChange,
    ...checkboxProps
  } = props, [button, setButton] = import_react28.default.useState(null), composedRefs = useComposedRefs(ref, setButton), hasConsumerStoppedPropagationRef = import_react28.default.useRef(false), isFormControl = isWeb ? button ? !!button.closest("form") : true : false, labelId = useLabelContext(button), labelledBy = ariaLabelledby || labelId, parentKeyDown = props.onKeyDown, handleKeyDown = (0, import_react28.useMemo)(() => composeEventHandlers(parentKeyDown, (event) => {
    event.key === "Enter" && event.preventDefault();
  }), [parentKeyDown]), handlePress = (0, import_react28.useMemo)(() => composeEventHandlers(props.onPress, (event) => {
    setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked), isFormControl && "isPropagationStopped" in event && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
  }), [isFormControl]);
  return {
    bubbleInput: isWeb && isFormControl ? (0, import_jsx_runtime26.jsx)(BubbleInput, {
      isHidden: true,
      control: button,
      bubbles: !hasConsumerStoppedPropagationRef.current,
      name,
      value,
      checked,
      required,
      disabled
    }) : null,
    checkboxRef: composedRefs,
    checkboxProps: {
      role: "checkbox",
      "aria-labelledby": labelledBy,
      "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
      ...checkboxProps,
      ...isWeb && {
        type: "button",
        value,
        "data-state": getState4(checked),
        "data-disabled": disabled ? "" : void 0,
        disabled,
        onKeyDown: disabled ? void 0 : handleKeyDown
      },
      onPress: disabled ? void 0 : handlePress
    }
  };
}

// node_modules/@tamagui/checkbox/dist/esm/createCheckbox.mjs
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var CheckboxContext = import_react29.default.createContext({
  checked: false,
  disabled: false
});
var ensureContext = (x) => {
  x.context || (x.context = CheckboxContext);
};
function createCheckbox(createProps) {
  const {
    disableActiveTheme,
    Frame: Frame2 = CheckboxFrame,
    Indicator = CheckboxIndicatorFrame
  } = createProps;
  ensureContext(Frame2), ensureContext(Indicator);
  const FrameComponent = Frame2.styleable(function(_props, forwardedRef) {
    const {
      scaleSize = 0.45,
      sizeAdjust = 0,
      scaleIcon,
      checked: checkedProp,
      defaultChecked,
      onCheckedChange,
      native,
      unstyled = false,
      ...props
    } = _props, propsActive = useProps(props), styledContext = import_react29.default.useContext(CheckboxStyledContext);
    let adjustedSize = 0, size4 = 0;
    unstyled || (adjustedSize = getVariableValue(getSize(propsActive.size ?? (styledContext == null ? void 0 : styledContext.size) ?? "$true", {
      shift: sizeAdjust
    })), size4 = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize);
    const [checked = false, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    }), {
      checkboxProps,
      checkboxRef,
      bubbleInput
    } = useCheckbox(
      // @ts-ignore
      propsActive,
      [checked, setChecked],
      forwardedRef
    );
    if (shouldRenderNativePlatform(native) === "web") return (0, import_jsx_runtime27.jsx)("input", {
      type: "checkbox",
      defaultChecked: isIndeterminate(checked) ? false : checked,
      tabIndex: -1,
      ref: checkboxRef,
      disabled: checkboxProps.disabled,
      style: {
        appearance: "auto",
        accentColor: "var(--color6)",
        ...checkboxProps.style
        // TODO: any
      }
    });
    const memoizedContext = (0, import_react29.useMemo)(() => ({
      checked,
      disabled: checkboxProps.disabled
    }), [checked, checkboxProps.disabled]);
    return (0, import_jsx_runtime27.jsx)(CheckboxContext.Provider, {
      value: memoizedContext,
      children: (0, import_jsx_runtime27.jsxs)(CheckboxStyledContext.Provider, {
        size: propsActive.size ?? (styledContext == null ? void 0 : styledContext.size) ?? "$true",
        scaleIcon: scaleIcon ?? (styledContext == null ? void 0 : styledContext.scaleIcon) ?? 1,
        children: [(0, import_jsx_runtime27.jsx)(Frame2, {
          ...!unstyled && {
            width: size4,
            height: size4
          },
          tag: "button",
          ref: checkboxRef,
          unstyled,
          ...unstyled === false && {
            size: size4,
            theme: checked ? "active" : null
          },
          checked,
          disabled: checkboxProps.disabled,
          ...checkboxProps,
          style: checkboxProps.style,
          children: propsActive.children
        }), bubbleInput]
      })
    });
  }), IndicatorComponent = Indicator.styleable((props, forwardedRef) => {
    const {
      // __scopeCheckbox,
      children: childrenProp,
      forceMount,
      disablePassStyles,
      unstyled = false,
      ...indicatorProps
    } = props, styledContext = import_react29.default.useContext(CheckboxStyledContext);
    let children = childrenProp;
    if (!unstyled) {
      const iconSize = (typeof styledContext.size == "number" ? styledContext.size * 0.65 : getFontSize(styledContext.size)) * styledContext.scaleIcon, theme = useTheme(), getThemedIcon = useGetThemedIcon({
        size: iconSize,
        color: theme.color
      });
      children = import_react29.default.Children.toArray(childrenProp).map((child) => disablePassStyles || !import_react29.default.isValidElement(child) ? child : getThemedIcon(child));
    }
    const context2 = import_react29.default.useContext(CheckboxContext);
    return forceMount || isIndeterminate(context2.checked) || context2.checked === true ? (0, import_jsx_runtime27.jsx)(Indicator, {
      pointerEvents: "none",
      ...indicatorProps,
      ref: forwardedRef,
      children
    }) : null;
  });
  return withStaticProperties(FrameComponent, {
    Indicator: IndicatorComponent
  });
}

// node_modules/@tamagui/checkbox/dist/esm/index.mjs
var Checkbox = createCheckbox({
  Frame: CheckboxFrame,
  Indicator: CheckboxIndicatorFrame
});

// node_modules/@tamagui/form/dist/esm/Form.mjs
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var FORM_NAME = "Form";
var FormFrame = styled(Stack2, {
  name: FORM_NAME,
  tag: "form"
});
var [createFormContext] = createContextScope(FORM_NAME);
var [FormProvider, useFormContext] = createFormContext(FORM_NAME);
var TRIGGER_NAME4 = "FormTrigger";
var FormTriggerFrame = styled(View2, {
  name: TRIGGER_NAME4
});
var FormTrigger = FormTriggerFrame.styleable((props, forwardedRef) => {
  const {
    __scopeForm,
    children,
    onPress,
    ...triggerProps
  } = props, context2 = useFormContext(TRIGGER_NAME4, __scopeForm);
  return (0, import_jsx_runtime28.jsx)(FormTriggerFrame, {
    tag: "button",
    ...triggerProps,
    ref: forwardedRef,
    onPress: composeEventHandlers(onPress, context2.onSubmit),
    children
  });
});
var FormComponent = FormFrame.extractable(function({
  onSubmit,
  ...props
}) {
  return (0, import_jsx_runtime28.jsx)(FormProvider, {
    scope: props.__scopeForm,
    onSubmit,
    children: (0, import_jsx_runtime28.jsx)(FormFrame, {
      ...props,
      onSubmit: (e) => e.preventDefault()
    })
  });
});
var Form2 = withStaticProperties(FormComponent, {
  Trigger: FormTrigger
});

// node_modules/@tamagui/group/dist/esm/Group.mjs
var import_react30 = __toESM(require_react(), 1);

// node_modules/@tamagui/group/dist/esm/useIndexedChildren.mjs
var React43 = __toESM(require_react(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var MaxIndexContext = React43.createContext([]);
var IndexContext = React43.createContext(null);
function useIndex() {
  const maxIndexPath = React43.useContext(MaxIndexContext), indexPathString = React43.useContext(IndexContext);
  return React43.useMemo(() => {
    if (indexPathString === null) return null;
    const indexPath = parseIndexPath(indexPathString), maxIndex = maxIndexPath[maxIndexPath.length - 1], index3 = indexPath[indexPath.length - 1];
    return {
      maxIndex,
      maxIndexPath,
      index: index3,
      indexPath,
      indexPathString,
      isFirst: index3 === 0,
      isLast: index3 === maxIndex,
      isEven: index3 % 2 === 0,
      isOdd: Math.abs(index3 % 2) === 1
    };
  }, [maxIndexPath, indexPathString]);
}
function useIndexedChildren(children) {
  const parentMaxIndexPath = React43.useContext(MaxIndexContext), indexPathString = React43.useContext(IndexContext), childrenCount = React43.Children.count(children), maxIndexPath = React43.useMemo(() => parentMaxIndexPath.concat(childrenCount - 1), [childrenCount]);
  return (0, import_jsx_runtime29.jsx)(MaxIndexContext.Provider, {
    value: maxIndexPath,
    children: React43.Children.map(children, (child, index3) => React43.isValidElement(child) ? (0, import_jsx_runtime29.jsx)(IndexContext.Provider, {
      value: indexPathString ? `${indexPathString}.${index3.toString()}` : index3.toString(),
      children: child
    }, child.key) : child)
  });
}
function parseIndexPath(indexPathString) {
  return indexPathString.split(".").map((index3) => Number.parseInt(index3, 10));
}

// node_modules/@tamagui/group/dist/esm/Group.mjs
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var GROUP_NAME = "Group";
var [createGroupContext, createGroupScope] = createContextScope(GROUP_NAME);
var [GroupProvider, useGroupContext] = createGroupContext(GROUP_NAME);
var GroupFrame = styled(ThemeableStack, {
  name: "GroupFrame",
  variants: {
    unstyled: {
      false: {
        size: "$true"
      }
    },
    size: (val, {
      tokens
    }) => ({
      borderRadius: tokens.radius[val] ?? val ?? tokens.radius.$true
    })
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
function createGroup(verticalDefault) {
  return withStaticProperties(GroupFrame.styleable((props, ref) => {
    const activeProps = useProps(props), {
      __scopeGroup,
      children: childrenProp,
      space,
      size: size4 = "$true",
      spaceDirection,
      separator,
      scrollable,
      axis = verticalDefault ? "vertical" : "horizontal",
      orientation = axis,
      disabled: disabledProp,
      disablePassBorderRadius: disablePassBorderRadiusProp,
      borderRadius,
      forceUseItem,
      ...restProps
    } = activeProps, vertical = orientation === "vertical", [itemChildrenCount, setItemChildrenCount] = useControllableState({
      defaultProp: forceUseItem ? 1 : 0
    }), isUsingItems = itemChildrenCount > 0, radius = borderRadius ?? (size4 ? getVariableValue(getTokens().radius[size4]) - 1 : void 0), disablePassBorderRadius = disablePassBorderRadiusProp ?? !(radius !== void 0), childrenArray = import_react30.default.Children.toArray(childrenProp), children = isUsingItems ? import_react30.default.Children.toArray(childrenProp).filter(import_react30.default.isValidElement) : childrenArray.map((child, i) => {
      if (!import_react30.default.isValidElement(child) || child.type === import_react30.default.Fragment) return child;
      const disabled = child.props.disabled ?? disabledProp, isFirst = i === 0, isLast = i === childrenArray.length - 1, radiusStyles = disablePassBorderRadius === true ? null : getBorderRadius({
        isFirst,
        isLast,
        radius,
        vertical,
        disable: disablePassBorderRadius
      }), props2 = {
        disabled,
        ...isTamaguiElement(child) ? radiusStyles : {
          style: radiusStyles
        }
      };
      return cloneElementWithPropOrder(child, props2);
    }), indexedChildren = useIndexedChildren(spacedChildren({
      direction: spaceDirection,
      separator,
      space,
      children
    })), onItemMount = import_react30.default.useCallback(() => setItemChildrenCount((prev) => prev + 1), []), onItemUnmount = import_react30.default.useCallback(() => setItemChildrenCount((prev) => prev - 1), []);
    return (0, import_jsx_runtime30.jsx)(GroupProvider, {
      disablePassBorderRadius,
      vertical: orientation === "vertical",
      radius,
      disabled: disabledProp,
      onItemMount,
      onItemUnmount,
      scope: __scopeGroup,
      children: (0, import_jsx_runtime30.jsx)(GroupFrame, {
        ref,
        size: size4,
        flexDirection: orientation === "horizontal" ? "row" : "column",
        borderRadius,
        ...restProps,
        children: wrapScroll({
          ...activeProps,
          orientation
        }, indexedChildren)
      })
    });
  }), {
    Item: GroupItem
  });
}
var GroupItem = import_react30.default.forwardRef((props, _ref) => {
  var _a;
  const {
    __scopeGroup,
    children,
    forcePlacement
  } = props, groupItemProps = useGroupItem({
    disabled: import_react30.default.isValidElement(children) ? children.props.disabled : void 0
  }, forcePlacement, __scopeGroup);
  return !import_react30.default.isValidElement(children) || children.type === import_react30.default.Fragment ? children : isTamaguiElement(children) ? import_react30.default.cloneElement(children, groupItemProps) : import_react30.default.cloneElement(children, {
    style: {
      // @ts-ignore
      ...(_a = children.props) == null ? void 0 : _a.style,
      ...groupItemProps
    }
  });
});
var useGroupItem = (childrenProps, forcePlacement, __scopeGroup) => {
  const treeIndex = useIndex(), context2 = useGroupContext("GroupItem", __scopeGroup);
  if (import_react30.default.useEffect(() => (context2.onItemMount(), () => {
    context2.onItemUnmount();
  }), []), !treeIndex) throw Error("<Group.Item/> should only be used within a <Group/>");
  const isFirst = forcePlacement === "first" || forcePlacement !== "last" && treeIndex.index === 0, isLast = forcePlacement === "last" || forcePlacement !== "first" && treeIndex.index === treeIndex.maxIndex;
  let propsToPass = {
    disabled: childrenProps.disabled ?? context2.disabled
  };
  if (context2.disablePassBorderRadius !== true) {
    const borderRadius = getBorderRadius({
      radius: context2.radius,
      isFirst,
      isLast,
      vertical: context2.vertical,
      disable: context2.disablePassBorderRadius
    });
    return {
      ...propsToPass,
      ...borderRadius
    };
  }
  return propsToPass;
};
var Group = createGroup(true);
var YGroup = Group;
var XGroup = createGroup(false);
var wrapScroll = ({
  scrollable,
  orientation,
  showScrollIndicator = false
}, children) => scrollable ? (0, import_jsx_runtime30.jsx)(ScrollView_default, {
  ...orientation === "vertical" && {
    showsVerticalScrollIndicator: showScrollIndicator
  },
  ...orientation === "horizontal" && {
    horizontal: true,
    showsHorizontalScrollIndicator: showScrollIndicator
  },
  children
}) : children;
var getBorderRadius = ({
  isFirst,
  isLast,
  radius,
  vertical,
  disable
}) => ({
  borderTopLeftRadius: isFirst && disable !== "top" && disable !== "start" ? radius : 0,
  borderTopRightRadius: disable !== "top" && disable !== "end" && (vertical && isFirst || !vertical && isLast) ? radius : 0,
  borderBottomLeftRadius: disable !== "bottom" && disable !== "start" && (vertical && isLast || !vertical && isFirst) ? radius : 0,
  borderBottomRightRadius: isLast && disable !== "bottom" && disable !== "end" ? radius : 0
});
var cloneElementWithPropOrder = (child, props) => {
  const next = mergeProps(child.props, props, getConfig().shorthands);
  return import_react30.default.cloneElement({
    ...child,
    props: null
  }, next);
};

// node_modules/@tamagui/elements/dist/esm/index.mjs
var Section = styled(View2, {
  name: "Section",
  tag: "section",
  flexDirection: "column",
  accessibilityRole: "summary"
});
var Article = styled(View2, {
  name: "Article",
  tag: "article",
  flexDirection: "column"
});
var Main = styled(View2, {
  name: "Main",
  tag: "main",
  flexDirection: "column"
});
var Header = styled(View2, {
  name: "Header",
  tag: "header",
  accessibilityRole: "header",
  flexDirection: "column"
});
var Aside = styled(View2, {
  name: "Aside",
  tag: "aside",
  flexDirection: "column"
  // accessibilityRole: 'complementary',
});
var Footer = styled(View2, {
  name: "Footer",
  tag: "footer",
  flexDirection: "column"
  // accessibilityRole: 'contentinfo',
});
var Nav = styled(View2, {
  name: "Nav",
  tag: "nav",
  flexDirection: "column"
  // accessibilityRole: 'navigation',
});

// node_modules/@tamagui/list-item/dist/esm/ListItem.mjs
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var NAME2 = "ListItem";
var ListItemFrame = styled(ThemeableStack, {
  name: NAME2,
  tag: "li",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        alignItems: "center",
        justifyContent: "space-between",
        flexWrap: "nowrap",
        width: "100%",
        borderColor: "$borderColor",
        maxWidth: "100%",
        overflow: "hidden",
        flexDirection: "row",
        backgroundColor: "$background",
        cursor: "default"
      }
    },
    size: {
      "...size": (val, {
        tokens
      }) => ({
        minHeight: tokens.size[val],
        paddingHorizontal: tokens.space[val],
        paddingVertical: getSpace(tokens.space[val], {
          shift: -4
        })
      })
    },
    active: {
      true: {
        hoverStyle: {
          backgroundColor: "$background"
        }
      }
    },
    disabled: {
      true: {
        opacity: 0.5,
        // TODO breaking types
        pointerEvents: "none"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ListItemText = styled(SizableText, {
  name: "ListItemText",
  variants: {
    unstyled: {
      false: {
        color: "$color",
        size: "$true",
        flexGrow: 1,
        flexShrink: 1,
        ellipse: true,
        cursor: "inherit"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ListItemSubtitle = styled(ListItemText, {
  name: "ListItemSubtitle",
  variants: {
    unstyled: {
      false: {
        opacity: 0.6,
        maxWidth: "100%",
        color: "$color"
      }
    },
    size: {
      "...size": (val, extras) => {
        const oneSmaller = getSize(val, {
          shift: -1,
          excludeHalfSteps: true
        });
        return getFontSized(oneSmaller.key, extras);
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ListItemTitle = styled(ListItemText, {
  name: "ListItemTitle"
});
var useListItem = (propsIn, {
  Text: Text4 = ListItemText,
  Subtitle = ListItemSubtitle,
  Title = ListItemTitle
} = {
  Text: ListItemText,
  Subtitle: ListItemSubtitle,
  Title: ListItemTitle
}) => {
  const props = useProps(propsIn, {
    resolveValues: "none"
  }), {
    children,
    icon,
    iconAfter,
    noTextWrap,
    theme: themeName,
    space,
    spaceFlex,
    scaleIcon = 1,
    scaleSpace = 1,
    unstyled = false,
    subTitle,
    title,
    // text props
    color,
    fontWeight,
    fontSize,
    fontFamily,
    letterSpacing,
    textAlign,
    ellipse,
    ...rest
  } = props, textProps = {
    color,
    fontWeight,
    fontSize,
    fontFamily,
    letterSpacing,
    textAlign,
    ellipse,
    children
  }, size4 = props.size || "$true", iconSize = getFontSize(size4) * scaleIcon, getThemedIcon = useGetThemedIcon({
    size: iconSize,
    color
  }), [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon), sizeToken = getTokens().space[props.space] ?? iconSize, spaceSize = getVariableValue(sizeToken) * scaleSpace, contents = wrapChildrenInText(Text4, textProps);
  return {
    props: {
      ...rest,
      children: (0, import_jsx_runtime31.jsxs)(import_jsx_runtime31.Fragment, {
        children: [themedIcon ? (0, import_jsx_runtime31.jsxs)(import_jsx_runtime31.Fragment, {
          children: [themedIcon, (0, import_jsx_runtime31.jsx)(Spacer, {
            size: spaceSize
          })]
        }) : null, title || subTitle ? (0, import_jsx_runtime31.jsxs)(YStack, {
          flex: 1,
          children: [noTextWrap === "all" ? title : (0, import_jsx_runtime31.jsx)(Title, {
            size: size4,
            children: title
          }), subTitle ? (0, import_jsx_runtime31.jsx)(import_jsx_runtime31.Fragment, {
            children: typeof subTitle == "string" && noTextWrap !== "all" ? (
              // TODO can use theme but we need to standardize to alt themes
              // or standardize on subtle colors in themes
              (0, import_jsx_runtime31.jsx)(Subtitle, {
                unstyled,
                size: size4,
                children: subTitle
              })
            ) : subTitle
          }) : null, contents]
        }) : contents, themedIconAfter ? (0, import_jsx_runtime31.jsxs)(import_jsx_runtime31.Fragment, {
          children: [(0, import_jsx_runtime31.jsx)(Spacer, {
            size: spaceSize
          }), themedIconAfter]
        }) : null]
      })
    }
  };
};
var ListItemComponent = ListItemFrame.styleable(function(props, ref) {
  const {
    props: listItemProps
  } = useListItem(props);
  return (0, import_jsx_runtime31.jsx)(ListItemFrame, {
    ref,
    ...listItemProps
  });
});
var ListItem2 = withStaticProperties(ListItemComponent, {
  Text: ListItemText,
  Subtitle: ListItemSubtitle
});

// node_modules/@tamagui/animate/dist/esm/Animate.mjs
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
function Animate({
  children,
  type,
  ...props
}) {
  return type === "presence" ? props.keepChildrenMounted ? (0, import_jsx_runtime32.jsx)(PresenceChild, {
    initial: props.initial ? void 0 : false,
    onExitComplete: props.onExitComplete,
    enterVariant: props.enterVariant,
    exitVariant: props.exitVariant,
    enterExitVariant: props.enterExitVariant,
    presenceAffectsLayout: false,
    isPresent: props.present,
    custom: props.custom,
    children
  }) : (0, import_jsx_runtime32.jsx)(AnimatePresence, {
    ...props,
    children: props.present ? children : null
  }) : (0, import_jsx_runtime32.jsx)(import_jsx_runtime32.Fragment, {
    children
  });
}

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp2(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset4 = clamp2(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset4,
        centerOffset: center - offset4 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp2(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp2(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode2(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode2(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache2) {
  const cachedResult = cache2.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache2.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup2() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup2();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup2;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var detectOverflow2 = detectOverflow;
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var arrow2 = arrow;
var computePosition2 = (reference, floating, options) => {
  const cache2 = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache2
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React45 = __toESM(require_react(), 1);
var import_react31 = __toESM(require_react(), 1);
var ReactDOM2 = __toESM(require_react_dom(), 1);
var index = typeof document !== "undefined" ? import_react31.useLayoutEffect : import_react31.useEffect;
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length;
  let i;
  let keys;
  if (a && b && typeof a === "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length !== b.length) return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React45.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React45.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React45.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React45.useState(null);
  const [_floating, _setFloating] = React45.useState(null);
  const setReference = React45.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React45.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React45.useRef(null);
  const floatingRef = React45.useRef(null);
  const dataRef = React45.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const openRef = useLatestRef(open);
  const update = React45.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM2.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React45.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React45.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React45.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React45.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React45.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var size3 = (options, deps) => ({
  ...size2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@tamagui/floating/dist/esm/useFloating.mjs
var import_react32 = __toESM(require_react(), 1);
var FloatingOverrideContext = import_react32.default.createContext(null);
var useFloating2 = (props) => {
  var _a;
  return (_a = import_react32.default.useContext(FloatingOverrideContext) || useFloating) == null ? void 0 : _a(props);
};

// node_modules/@tamagui/popper/dist/esm/Popper.mjs
var React47 = __toESM(require_react(), 1);
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var PopperContext = createStyledContext({});
var {
  useStyledContext: usePopperContext,
  Provider: PopperProvider
} = PopperContext;
var checkFloating = void 0;
var setupOptions = {};
function setupPopper(options) {
  Object.assign(setupOptions, options);
}
function Popper(props) {
  var _a;
  const {
    children,
    size: size4,
    strategy = "absolute",
    placement = "bottom",
    stayInFrame,
    allowFlip,
    offset: offset4,
    disableRTL,
    resize,
    __scopePopper
  } = props, [arrowEl, setArrow] = React47.useState(null), [arrowSize, setArrowSize] = React47.useState(0), offsetOptions = offset4 ?? arrowSize, floatingStyle = React47.useRef({});
  let floating = useFloating2({
    strategy,
    placement,
    sameScrollView: false,
    // this only takes effect on native
    whileElementsMounted: autoUpdate,
    platform: disableRTL ?? setupOptions.disableRTL ? {
      ...platform,
      isRTL(element) {
        return false;
      }
    } : platform,
    middleware: [stayInFrame ? shift3(typeof stayInFrame == "boolean" ? {} : stayInFrame) : null, allowFlip ? flip3(typeof allowFlip == "boolean" ? {} : allowFlip) : null, arrowEl ? arrow3({
      element: arrowEl
    }) : null, typeof offsetOptions < "u" ? offset3(offsetOptions) : null, checkFloating, resize ? size3({
      apply({
        availableHeight,
        availableWidth
      }) {
        var _a2;
        Object.assign(floatingStyle.current, {
          maxHeight: `${availableHeight}px`,
          maxWidth: `${availableWidth}px`
        });
        const floatingChild = (_a2 = floating.refs.floating.current) == null ? void 0 : _a2.firstChild;
        floatingChild && floatingChild instanceof HTMLElement && Object.assign(floatingChild.style, floatingStyle.current);
      },
      ...typeof resize == "object" && resize
    }) : null].filter(Boolean)
  });
  floating = React47.useMemo(() => {
    const og = floating.getFloatingProps;
    return resize && og && (floating.getFloatingProps = (props2) => og({
      ...props2,
      style: {
        ...props2.style,
        ...floatingStyle.current
      }
    })), floating;
  }, [floating, resize ? JSON.stringify(resize) : null]);
  const {
    middlewareData
  } = floating, popperContext = {
    size: size4,
    arrowRef: setArrow,
    arrowStyle: middlewareData.arrow,
    onArrowSize: setArrowSize,
    scope: __scopePopper,
    hasFloating: (_a = middlewareData.checkFloating) == null ? void 0 : _a.hasFloating,
    ...floating
  };
  return (0, import_jsx_runtime33.jsx)(PopperProvider, {
    ...popperContext,
    children
  });
}
var PopperAnchor = YStack.extractable(React47.forwardRef(function(props, forwardedRef) {
  const {
    virtualRef,
    __scopePopper,
    ...anchorProps
  } = props, {
    getReferenceProps,
    refs
  } = usePopperContext(__scopePopper), ref = React47.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref, refs.setReference);
  React47.useEffect(() => {
    virtualRef && refs.setReference(virtualRef.current);
  }, [virtualRef]);
  const stackProps = {
    ref: composedRefs,
    ...anchorProps
  };
  return (0, import_jsx_runtime33.jsx)(View2, {
    ...getReferenceProps ? getReferenceProps(stackProps) : stackProps
  });
}));
var PopperContentFrame = styled(ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: true
      }
    },
    size: {
      "...size": (val, {
        tokens
      }) => ({
        padding: tokens.space[val],
        borderRadius: tokens.radius[val]
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var PopperContent = React47.forwardRef(function(props, forwardedRef) {
  const {
    __scopePopper,
    enableAnimationForPositionChange,
    ...rest
  } = props, {
    strategy,
    placement,
    refs,
    x,
    y,
    getFloatingProps,
    size: size4
  } = usePopperContext(__scopePopper), contentRefs = useComposedRefs(refs.setFloating, forwardedRef), [needsMeasure, setNeedsMeasure] = React47.useState(enableAnimationForPositionChange);
  useIsomorphicLayoutEffect(() => {
    x && y && setNeedsMeasure(false);
  }, [enableAnimationForPositionChange, x, y]);
  const frameProps = {
    ref: contentRefs,
    x: x || 0,
    y: y || 0,
    top: 0,
    left: 0,
    position: strategy,
    opacity: true ? 1 : 0,
    ...enableAnimationForPositionChange && {
      // apply animation but disable it on initial render to avoid animating from 0 to the first position
      animation: rest.animation,
      animateOnly: needsMeasure ? [] : rest.animateOnly,
      animatePresence: false
    },
    ...x === 0 && y === 0 && {
      opacity: 0,
      animateOnly: []
    }
  }, {
    style,
    ...floatingProps
  } = getFloatingProps ? getFloatingProps(frameProps) : frameProps;
  return (0, import_jsx_runtime33.jsx)(Stack2, {
    ...floatingProps,
    children: (0, import_jsx_runtime33.jsx)(PopperContentFrame, {
      "data-placement": placement,
      "data-strategy": strategy,
      contain: "layout",
      size: size4,
      ...style,
      ...rest
    }, "popper-content-frame")
  });
});
var PopperArrowFrame = styled(YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var PopperArrowOuterFrame = styled(YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: 1e6,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
var PopperArrow = PopperArrowFrame.styleable(function(propsIn, forwardedRef) {
  var _a, _b;
  const {
    __scopePopper,
    ...rest
  } = propsIn, props = useProps(rest), {
    offset: offset4,
    size: sizeProp,
    borderWidth = 0,
    ...arrowProps
  } = props, context2 = usePopperContext(__scopePopper), sizeVal = typeof sizeProp == "number" ? sizeProp : getVariableValue(getSpace(sizeProp ?? context2.size, {
    shift: -2,
    bounds: [2]
  })), size4 = Math.max(0, +sizeVal), {
    placement
  } = context2, refs = useComposedRefs(context2.arrowRef, forwardedRef), x = ((_a = context2.arrowStyle) == null ? void 0 : _a.x) || 0, y = ((_b = context2.arrowStyle) == null ? void 0 : _b.y) || 0, primaryPlacement = placement ? placement.split("-")[0] : "top", arrowStyle = {
    x,
    y,
    width: size4,
    height: size4
  }, innerArrowStyle = {}, isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
  if (primaryPlacement) {
    arrowStyle[isVertical ? "width" : "height"] = size4 * 2;
    const oppSide = opposites[primaryPlacement];
    oppSide && (arrowStyle[oppSide] = -size4, innerArrowStyle[oppSide] = size4 / 2), (oppSide === "top" || oppSide === "bottom") && (arrowStyle.left = 0), (oppSide === "left" || oppSide === "right") && (arrowStyle.top = 0), useIsomorphicLayoutEffect(() => {
      var _a2;
      (_a2 = context2.onArrowSize) == null ? void 0 : _a2.call(context2, size4);
    }, [size4, context2.onArrowSize]);
  }
  return (0, import_jsx_runtime33.jsx)(PopperArrowOuterFrame, {
    ref: refs,
    ...arrowStyle,
    children: (0, import_jsx_runtime33.jsx)(PopperArrowFrame, {
      width: size4,
      height: size4,
      ...arrowProps,
      ...innerArrowStyle,
      rotate: "45deg",
      ...primaryPlacement === "bottom" && {
        borderLeftWidth: borderWidth,
        borderTopWidth: borderWidth
      },
      ...primaryPlacement === "top" && {
        borderBottomWidth: borderWidth,
        borderRightWidth: borderWidth
      },
      ...primaryPlacement === "right" && {
        borderLeftWidth: borderWidth,
        borderBottomWidth: borderWidth
      },
      ...primaryPlacement === "left" && {
        borderTopWidth: borderWidth,
        borderRightWidth: borderWidth
      }
    })
  });
});

// node_modules/@tamagui/popover/dist/esm/Popover.mjs
var React50 = __toESM(require_react(), 1);

// node_modules/@tamagui/popover/dist/esm/useFloatingContext.mjs
var import_react34 = __toESM(require_react(), 1);

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var React48 = __toESM(require_react(), 1);
var import_react33 = __toESM(require_react(), 1);

// node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs
function activeElement(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {
    var _activeElement;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot(rootNode)) {
    let next = child;
    while (next) {
      if (parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    }
  }
  return false;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  if (isAndroid2() && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  if (isJSDOM()) return false;
  return !isAndroid2() && event.width === 0 && event.height === 0 || isAndroid2() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "touch";
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isAndroid2() {
  const re = /android/i;
  return re.test(getPlatform()) || re.test(getUserAgent());
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isJSDOM() {
  return getUserAgent().includes("jsdom/");
}
function isMouseLikePointerType(pointerType, strict) {
  const values = ["mouse", "pen"];
  if (!strict) {
    values.push("", void 0);
  }
  return values.includes(pointerType);
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function isRootElement(element) {
  return element.matches("html,body");
}
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e = event;
  return e.target != null && node.contains(e.target);
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
var TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
function isTypeableCombobox(element) {
  if (!element) return false;
  return element.getAttribute("role") === "combobox" && isTypeableElement(element);
}

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden2 = function isHidden3(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden2(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var isTabbable = function isTabbable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, candidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorTabbable(options, node);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var ReactDOM3 = __toESM(require_react_dom(), 1);
function useMergeRefs2(refs) {
  const cleanupRef = React48.useRef(void 0);
  const refEffect = React48.useCallback((instance) => {
    const cleanups = refs.map((ref) => {
      if (ref == null) {
        return;
      }
      if (typeof ref === "function") {
        const refCallback = ref;
        const refCleanup = refCallback(instance);
        return typeof refCleanup === "function" ? refCleanup : () => {
          refCallback(null);
        };
      }
      ref.current = instance;
      return () => {
        ref.current = null;
      };
    });
    return () => {
      cleanups.forEach((refCleanup) => refCleanup == null ? void 0 : refCleanup());
    };
  }, refs);
  return React48.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      if (cleanupRef.current) {
        cleanupRef.current();
        cleanupRef.current = void 0;
      }
      if (value != null) {
        cleanupRef.current = refEffect(value);
      }
    };
  }, refs);
}
var SafeReact = {
  ...React48
};
var useInsertionEffect = SafeReact.useInsertionEffect;
var useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
function useEffectEvent(callback) {
  const ref = React48.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React48.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
var ARROW_UP = "ArrowUp";
var ARROW_DOWN = "ArrowDown";
var ARROW_LEFT = "ArrowLeft";
var ARROW_RIGHT = "ArrowRight";
function isDifferentRow(index3, cols, prevRow) {
  return Math.floor(index3 / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index3) {
  return index3 < 0 || index3 >= listRef.current.length;
}
function getMinIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    disabledIndices
  });
}
function getMaxIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    decrement: true,
    startingIndex: listRef.current.length,
    disabledIndices
  });
}
function findNonDisabledIndex(listRef, _temp) {
  let {
    startingIndex = -1,
    decrement = false,
    disabledIndices,
    amount = 1
  } = _temp === void 0 ? {} : _temp;
  const list = listRef.current;
  let index3 = startingIndex;
  do {
    index3 += decrement ? -amount : amount;
  } while (index3 >= 0 && index3 <= list.length - 1 && isDisabled(list, index3, disabledIndices));
  return index3;
}
function getGridNavigatedIndex(elementsRef, _ref) {
  let {
    event,
    orientation,
    loop,
    rtl,
    cols,
    disabledIndices,
    minIndex,
    maxIndex,
    prevIndex,
    stopEvent: stop = false
  } = _ref;
  let nextIndex = prevIndex;
  if (event.key === ARROW_UP) {
    stop && stopEvent(event);
    if (prevIndex === -1) {
      nextIndex = maxIndex;
    } else {
      nextIndex = findNonDisabledIndex(elementsRef, {
        startingIndex: nextIndex,
        amount: cols,
        decrement: true,
        disabledIndices
      });
      if (loop && (prevIndex - cols < minIndex || nextIndex < 0)) {
        const col = prevIndex % cols;
        const maxCol = maxIndex % cols;
        const offset4 = maxIndex - (maxCol - col);
        if (maxCol === col) {
          nextIndex = maxIndex;
        } else {
          nextIndex = maxCol > col ? offset4 : offset4 - cols;
        }
      }
    }
    if (isIndexOutOfBounds(elementsRef, nextIndex)) {
      nextIndex = prevIndex;
    }
  }
  if (event.key === ARROW_DOWN) {
    stop && stopEvent(event);
    if (prevIndex === -1) {
      nextIndex = minIndex;
    } else {
      nextIndex = findNonDisabledIndex(elementsRef, {
        startingIndex: prevIndex,
        amount: cols,
        disabledIndices
      });
      if (loop && prevIndex + cols > maxIndex) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex % cols - cols,
          amount: cols,
          disabledIndices
        });
      }
    }
    if (isIndexOutOfBounds(elementsRef, nextIndex)) {
      nextIndex = prevIndex;
    }
  }
  if (orientation === "both") {
    const prevRow = floor(prevIndex / cols);
    if (event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT)) {
      stop && stopEvent(event);
      if (prevIndex % cols !== cols - 1) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex,
          disabledIndices
        });
        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
          nextIndex = findNonDisabledIndex(elementsRef, {
            startingIndex: prevIndex - prevIndex % cols - 1,
            disabledIndices
          });
        }
      } else if (loop) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex - prevIndex % cols - 1,
          disabledIndices
        });
      }
      if (isDifferentRow(nextIndex, cols, prevRow)) {
        nextIndex = prevIndex;
      }
    }
    if (event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT)) {
      stop && stopEvent(event);
      if (prevIndex % cols !== 0) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex,
          decrement: true,
          disabledIndices
        });
        if (loop && isDifferentRow(nextIndex, cols, prevRow)) {
          nextIndex = findNonDisabledIndex(elementsRef, {
            startingIndex: prevIndex + (cols - prevIndex % cols),
            decrement: true,
            disabledIndices
          });
        }
      } else if (loop) {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex + (cols - prevIndex % cols),
          decrement: true,
          disabledIndices
        });
      }
      if (isDifferentRow(nextIndex, cols, prevRow)) {
        nextIndex = prevIndex;
      }
    }
    const lastRow = floor(maxIndex / cols) === prevRow;
    if (isIndexOutOfBounds(elementsRef, nextIndex)) {
      if (loop && lastRow) {
        nextIndex = event.key === (rtl ? ARROW_RIGHT : ARROW_LEFT) ? maxIndex : findNonDisabledIndex(elementsRef, {
          startingIndex: prevIndex - prevIndex % cols - 1,
          disabledIndices
        });
      } else {
        nextIndex = prevIndex;
      }
    }
  }
  return nextIndex;
}
function buildCellMap(sizes, cols, dense) {
  const cellMap = [];
  let startIndex = 0;
  sizes.forEach((_ref2, index3) => {
    let {
      width,
      height
    } = _ref2;
    if (width > cols) {
      if (true) {
        throw new Error("[Floating UI]: Invalid grid - item width at index " + index3 + " is greater than grid columns");
      }
    }
    let itemPlaced = false;
    if (dense) {
      startIndex = 0;
    }
    while (!itemPlaced) {
      const targetCells = [];
      for (let i = 0; i < width; i++) {
        for (let j = 0; j < height; j++) {
          targetCells.push(startIndex + i + j * cols);
        }
      }
      if (startIndex % cols + width <= cols && targetCells.every((cell) => cellMap[cell] == null)) {
        targetCells.forEach((cell) => {
          cellMap[cell] = index3;
        });
        itemPlaced = true;
      } else {
        startIndex++;
      }
    }
  });
  return [...cellMap];
}
function getCellIndexOfCorner(index3, sizes, cellMap, cols, corner) {
  if (index3 === -1) return -1;
  const firstCellIndex = cellMap.indexOf(index3);
  const sizeItem = sizes[index3];
  switch (corner) {
    case "tl":
      return firstCellIndex;
    case "tr":
      if (!sizeItem) {
        return firstCellIndex;
      }
      return firstCellIndex + sizeItem.width - 1;
    case "bl":
      if (!sizeItem) {
        return firstCellIndex;
      }
      return firstCellIndex + (sizeItem.height - 1) * cols;
    case "br":
      return cellMap.lastIndexOf(index3);
  }
}
function getCellIndices(indices, cellMap) {
  return cellMap.flatMap((index3, cellIndex) => indices.includes(index3) ? [cellIndex] : []);
}
function isDisabled(list, index3, disabledIndices) {
  if (disabledIndices) {
    return disabledIndices.includes(index3);
  }
  const element = list[index3];
  return element == null || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true";
}
var index2 = typeof document !== "undefined" ? import_react33.useLayoutEffect : import_react33.useEffect;
function sortByDocumentPosition(a, b) {
  const position = a.compareDocumentPosition(b);
  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    return -1;
  }
  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {
    return 1;
  }
  return 0;
}
var FloatingListContext = React48.createContext({
  register: () => {
  },
  unregister: () => {
  },
  map: /* @__PURE__ */ new Map(),
  elementsRef: {
    current: []
  }
});
function FloatingList(props) {
  const {
    children,
    elementsRef,
    labelsRef
  } = props;
  const [nodes, setNodes] = React48.useState(() => /* @__PURE__ */ new Set());
  const register = React48.useCallback((node) => {
    setNodes((prevSet) => new Set(prevSet).add(node));
  }, []);
  const unregister = React48.useCallback((node) => {
    setNodes((prevSet) => {
      const set = new Set(prevSet);
      set.delete(node);
      return set;
    });
  }, []);
  const map = React48.useMemo(() => {
    const newMap = /* @__PURE__ */ new Map();
    const sortedNodes = Array.from(nodes.keys()).sort(sortByDocumentPosition);
    sortedNodes.forEach((node, index3) => {
      newMap.set(node, index3);
    });
    return newMap;
  }, [nodes]);
  return (0, import_jsx_runtime34.jsx)(FloatingListContext.Provider, {
    value: React48.useMemo(() => ({
      register,
      unregister,
      map,
      elementsRef,
      labelsRef
    }), [register, unregister, map, elementsRef, labelsRef]),
    children
  });
}
function useListItem2(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    label
  } = props;
  const {
    register,
    unregister,
    map,
    elementsRef,
    labelsRef
  } = React48.useContext(FloatingListContext);
  const [index$1, setIndex] = React48.useState(null);
  const componentRef = React48.useRef(null);
  const ref = React48.useCallback((node) => {
    componentRef.current = node;
    if (index$1 !== null) {
      elementsRef.current[index$1] = node;
      if (labelsRef) {
        var _node$textContent;
        const isLabelDefined = label !== void 0;
        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;
      }
    }
  }, [index$1, elementsRef, labelsRef, label]);
  index2(() => {
    const node = componentRef.current;
    if (node) {
      register(node);
      return () => {
        unregister(node);
      };
    }
  }, [register, unregister]);
  index2(() => {
    const index3 = componentRef.current ? map.get(componentRef.current) : null;
    if (index3 != null) {
      setIndex(index3);
    }
  }, [map]);
  return React48.useMemo(() => ({
    ref,
    index: index$1 == null ? -1 : index$1
  }), [index$1, ref]);
}
function renderJsx(render, computedProps) {
  if (typeof render === "function") {
    return render(computedProps);
  }
  if (render) {
    return React48.cloneElement(render, computedProps);
  }
  return (0, import_jsx_runtime34.jsx)("div", {
    ...computedProps
  });
}
var CompositeContext = React48.createContext({
  activeIndex: 0,
  onNavigate: () => {
  }
});
var horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];
var verticalKeys = [ARROW_UP, ARROW_DOWN];
var allKeys = [...horizontalKeys, ...verticalKeys];
var Composite = React48.forwardRef(function Composite2(props, forwardedRef) {
  const {
    render,
    orientation = "both",
    loop = true,
    rtl = false,
    cols = 1,
    disabledIndices,
    activeIndex: externalActiveIndex,
    onNavigate: externalSetActiveIndex,
    itemSizes,
    dense = false,
    ...domProps
  } = props;
  const [internalActiveIndex, internalSetActiveIndex] = React48.useState(0);
  const activeIndex = externalActiveIndex != null ? externalActiveIndex : internalActiveIndex;
  const onNavigate = useEffectEvent(externalSetActiveIndex != null ? externalSetActiveIndex : internalSetActiveIndex);
  const elementsRef = React48.useRef([]);
  const renderElementProps = render && typeof render !== "function" ? render.props : {};
  const contextValue = React48.useMemo(() => ({
    activeIndex,
    onNavigate
  }), [activeIndex, onNavigate]);
  const isGrid = cols > 1;
  function handleKeyDown(event) {
    if (!allKeys.includes(event.key)) return;
    let nextIndex = activeIndex;
    const minIndex = getMinIndex(elementsRef, disabledIndices);
    const maxIndex = getMaxIndex(elementsRef, disabledIndices);
    const horizontalEndKey = rtl ? ARROW_LEFT : ARROW_RIGHT;
    const horizontalStartKey = rtl ? ARROW_RIGHT : ARROW_LEFT;
    if (isGrid) {
      const sizes = itemSizes || Array.from({
        length: elementsRef.current.length
      }, () => ({
        width: 1,
        height: 1
      }));
      const cellMap = buildCellMap(sizes, cols, dense);
      const minGridIndex = cellMap.findIndex((index3) => index3 != null && !isDisabled(elementsRef.current, index3, disabledIndices));
      const maxGridIndex = cellMap.reduce((foundIndex, index3, cellIndex) => index3 != null && !isDisabled(elementsRef.current, index3, disabledIndices) ? cellIndex : foundIndex, -1);
      const maybeNextIndex = cellMap[getGridNavigatedIndex({
        current: cellMap.map((itemIndex) => itemIndex ? elementsRef.current[itemIndex] : null)
      }, {
        event,
        orientation,
        loop,
        rtl,
        cols,
        // treat undefined (empty grid spaces) as disabled indices so we
        // don't end up in them
        disabledIndices: getCellIndices([...disabledIndices || elementsRef.current.map((_, index3) => isDisabled(elementsRef.current, index3) ? index3 : void 0), void 0], cellMap),
        minIndex: minGridIndex,
        maxIndex: maxGridIndex,
        prevIndex: getCellIndexOfCorner(
          activeIndex > maxIndex ? minIndex : activeIndex,
          sizes,
          cellMap,
          cols,
          // use a corner matching the edge closest to the direction we're
          // moving in so we don't end up in the same item. Prefer
          // top/left over bottom/right.
          event.key === ARROW_DOWN ? "bl" : event.key === horizontalEndKey ? "tr" : "tl"
        )
      })];
      if (maybeNextIndex != null) {
        nextIndex = maybeNextIndex;
      }
    }
    const toEndKeys = {
      horizontal: [horizontalEndKey],
      vertical: [ARROW_DOWN],
      both: [horizontalEndKey, ARROW_DOWN]
    }[orientation];
    const toStartKeys = {
      horizontal: [horizontalStartKey],
      vertical: [ARROW_UP],
      both: [horizontalStartKey, ARROW_UP]
    }[orientation];
    const preventedKeys = isGrid ? allKeys : {
      horizontal: horizontalKeys,
      vertical: verticalKeys,
      both: allKeys
    }[orientation];
    if (nextIndex === activeIndex && [...toEndKeys, ...toStartKeys].includes(event.key)) {
      if (loop && nextIndex === maxIndex && toEndKeys.includes(event.key)) {
        nextIndex = minIndex;
      } else if (loop && nextIndex === minIndex && toStartKeys.includes(event.key)) {
        nextIndex = maxIndex;
      } else {
        nextIndex = findNonDisabledIndex(elementsRef, {
          startingIndex: nextIndex,
          decrement: toStartKeys.includes(event.key),
          disabledIndices
        });
      }
    }
    if (nextIndex !== activeIndex && !isIndexOutOfBounds(elementsRef, nextIndex)) {
      var _elementsRef$current$;
      event.stopPropagation();
      if (preventedKeys.includes(event.key)) {
        event.preventDefault();
      }
      onNavigate(nextIndex);
      (_elementsRef$current$ = elementsRef.current[nextIndex]) == null || _elementsRef$current$.focus();
    }
  }
  const computedProps = {
    ...domProps,
    ...renderElementProps,
    ref: forwardedRef,
    "aria-orientation": orientation === "both" ? void 0 : orientation,
    onKeyDown(e) {
      domProps.onKeyDown == null || domProps.onKeyDown(e);
      renderElementProps.onKeyDown == null || renderElementProps.onKeyDown(e);
      handleKeyDown(e);
    }
  };
  return (0, import_jsx_runtime34.jsx)(CompositeContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime34.jsx)(FloatingList, {
      elementsRef,
      children: renderJsx(render, computedProps)
    })
  });
});
var CompositeItem = React48.forwardRef(function CompositeItem2(props, forwardedRef) {
  const {
    render,
    ...domProps
  } = props;
  const renderElementProps = render && typeof render !== "function" ? render.props : {};
  const {
    activeIndex,
    onNavigate
  } = React48.useContext(CompositeContext);
  const {
    ref,
    index: index3
  } = useListItem2();
  const mergedRef = useMergeRefs2([ref, forwardedRef, renderElementProps.ref]);
  const isActive = activeIndex === index3;
  const computedProps = {
    ...domProps,
    ...renderElementProps,
    ref: mergedRef,
    tabIndex: isActive ? 0 : -1,
    "data-active": isActive ? "" : void 0,
    onFocus(e) {
      domProps.onFocus == null || domProps.onFocus(e);
      renderElementProps.onFocus == null || renderElementProps.onFocus(e);
      onNavigate(index3);
    }
  };
  return renderJsx(render, computedProps);
});
var serverHandoffComplete = false;
var count = 0;
var genId = () => (
  // Ensure the id is unique with multiple independent versions of Floating UI
  // on <React 18
  "floating-ui-" + Math.random().toString(36).slice(2, 6) + count++
);
function useFloatingId() {
  const [id, setId] = React48.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React48.useEffect(() => {
    serverHandoffComplete = true;
  }, []);
  return id;
}
var useReactId = SafeReact.useId;
var useId7 = useReactId || useFloatingId;
var devMessageSet;
if (true) {
  devMessageSet = /* @__PURE__ */ new Set();
}
function warn() {
  var _devMessageSet;
  for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {
    messages[_key] = arguments[_key];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet = devMessageSet) != null && _devMessageSet.has(message))) {
    var _devMessageSet2;
    (_devMessageSet2 = devMessageSet) == null || _devMessageSet2.add(message);
    console.warn(message);
  }
}
function error() {
  var _devMessageSet3;
  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    messages[_key2] = arguments[_key2];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {
    var _devMessageSet4;
    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);
    console.error(message);
  }
}
var FloatingArrow = React48.forwardRef(function FloatingArrow2(props, ref) {
  const {
    context: {
      placement,
      elements: {
        floating
      },
      middlewareData: {
        arrow: arrow4,
        shift: shift4
      }
    },
    width = 14,
    height = 7,
    tipRadius = 0,
    strokeWidth = 0,
    staticOffset,
    stroke,
    d,
    style: {
      transform,
      ...restStyle
    } = {},
    ...rest
  } = props;
  if (true) {
    if (!ref) {
      warn("The `ref` prop is required for `FloatingArrow`.");
    }
  }
  const clipPathId = useId7();
  const [isRTL2, setIsRTL] = React48.useState(false);
  index2(() => {
    if (!floating) return;
    const isRTL3 = getComputedStyle2(floating).direction === "rtl";
    if (isRTL3) {
      setIsRTL(true);
    }
  }, [floating]);
  if (!floating) {
    return null;
  }
  const [side, alignment] = placement.split("-");
  const isVerticalSide = side === "top" || side === "bottom";
  let computedStaticOffset = staticOffset;
  if (isVerticalSide && shift4 != null && shift4.x || !isVerticalSide && shift4 != null && shift4.y) {
    computedStaticOffset = null;
  }
  const computedStrokeWidth = strokeWidth * 2;
  const halfStrokeWidth = computedStrokeWidth / 2;
  const svgX = width / 2 * (tipRadius / -8 + 1);
  const svgY = height / 2 * tipRadius / 4;
  const isCustomShape = !!d;
  const yOffsetProp = computedStaticOffset && alignment === "end" ? "bottom" : "top";
  let xOffsetProp = computedStaticOffset && alignment === "end" ? "right" : "left";
  if (computedStaticOffset && isRTL2) {
    xOffsetProp = alignment === "end" ? "left" : "right";
  }
  const arrowX = (arrow4 == null ? void 0 : arrow4.x) != null ? computedStaticOffset || arrow4.x : "";
  const arrowY = (arrow4 == null ? void 0 : arrow4.y) != null ? computedStaticOffset || arrow4.y : "";
  const dValue = d || "M0,0" + (" H" + width) + (" L" + (width - svgX) + "," + (height - svgY)) + (" Q" + width / 2 + "," + height + " " + svgX + "," + (height - svgY)) + " Z";
  const rotation = {
    top: isCustomShape ? "rotate(180deg)" : "",
    left: isCustomShape ? "rotate(90deg)" : "rotate(-90deg)",
    bottom: isCustomShape ? "" : "rotate(180deg)",
    right: isCustomShape ? "rotate(-90deg)" : "rotate(90deg)"
  }[side];
  return (0, import_jsx_runtime34.jsxs)("svg", {
    ...rest,
    "aria-hidden": true,
    ref,
    width: isCustomShape ? width : width + computedStrokeWidth,
    height: width,
    viewBox: "0 0 " + width + " " + (height > width ? height : width),
    style: {
      position: "absolute",
      pointerEvents: "none",
      [xOffsetProp]: arrowX,
      [yOffsetProp]: arrowY,
      [side]: isVerticalSide || isCustomShape ? "100%" : "calc(100% - " + computedStrokeWidth / 2 + "px)",
      transform: [rotation, transform].filter((t) => !!t).join(" "),
      ...restStyle
    },
    children: [computedStrokeWidth > 0 && (0, import_jsx_runtime34.jsx)("path", {
      clipPath: "url(#" + clipPathId + ")",
      fill: "none",
      stroke,
      strokeWidth: computedStrokeWidth + (d ? 0 : 1),
      d: dValue
    }), (0, import_jsx_runtime34.jsx)("path", {
      stroke: computedStrokeWidth && !d ? rest.fill : "none",
      d: dValue
    }), (0, import_jsx_runtime34.jsx)("clipPath", {
      id: clipPathId,
      children: (0, import_jsx_runtime34.jsx)("rect", {
        x: -halfStrokeWidth,
        y: halfStrokeWidth * (isCustomShape ? -1 : 1),
        width: width + computedStrokeWidth,
        height: width
      })
    })]
  });
});
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null || _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      var _map$get2;
      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l) => l !== listener)) || []);
    }
  };
}
var FloatingNodeContext = React48.createContext(null);
var FloatingTreeContext = React48.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React48.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
var useFloatingTree = () => React48.useContext(FloatingTreeContext);
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function clearTimeoutIfSet(timeoutRef) {
  if (timeoutRef.current !== -1) {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = -1;
  }
}
function useLatestRef2(value) {
  const ref = (0, import_react33.useRef)(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
var safePolygonIdentifier = createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function useHover(context2, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements
  } = context2;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef2(handleClose);
  const delayRef = useLatestRef2(delay);
  const openRef = useLatestRef2(open);
  const pointerTypeRef = React48.useRef();
  const timeoutRef = React48.useRef(-1);
  const handlerRef = React48.useRef();
  const restTimeoutRef = React48.useRef(-1);
  const blockMouseMoveRef = React48.useRef(true);
  const performedPointerEventsMutationRef = React48.useRef(false);
  const unbindMouseMoveRef = React48.useRef(() => {
  });
  const restTimeoutPendingRef = React48.useRef(false);
  const isHoverOpen = React48.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  React48.useEffect(() => {
    if (!enabled) return;
    function onOpenChange2(_ref) {
      let {
        open: open2
      } = _ref;
      if (!open2) {
        clearTimeoutIfSet(timeoutRef);
        clearTimeoutIfSet(restTimeoutRef);
        blockMouseMoveRef.current = true;
        restTimeoutPendingRef.current = false;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [enabled, events]);
  React48.useEffect(() => {
    if (!enabled) return;
    if (!handleCloseRef.current) return;
    if (!open) return;
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event, "hover");
      }
    }
    const html = getDocument(elements.floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);
  const closeWithDelay = React48.useCallback(function(event, runElseBranch, reason) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    if (reason === void 0) {
      reason = "hover";
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeoutIfSet(timeoutRef);
      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);
    } else if (runElseBranch) {
      clearTimeoutIfSet(timeoutRef);
      onOpenChange(false, event, reason);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = useEffectEvent(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  });
  const clearPointerEvents = useEffectEvent(() => {
    if (performedPointerEventsMutationRef.current) {
      const body = getDocument(elements.floating).body;
      body.style.pointerEvents = "";
      body.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  });
  const isClickLikeOpenEvent = useEffectEvent(() => {
    return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
  });
  React48.useEffect(() => {
    if (!enabled) return;
    function onMouseEnter(event) {
      clearTimeoutIfSet(timeoutRef);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, "open")) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = window.setTimeout(() => {
          if (!openRef.current) {
            onOpenChange(true, event, "hover");
          }
        }, openDelay);
      } else if (!open) {
        onOpenChange(true, event, "hover");
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent()) return;
      unbindMouseMoveRef.current();
      const doc = getDocument(elements.floating);
      clearTimeoutIfSet(restTimeoutRef);
      restTimeoutPendingRef.current = false;
      if (handleCloseRef.current && dataRef.current.floatingContext) {
        if (!open) {
          clearTimeoutIfSet(timeoutRef);
        }
        handlerRef.current = handleCloseRef.current({
          ...dataRef.current.floatingContext,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            if (!isClickLikeOpenEvent()) {
              closeWithDelay(event, true, "safe-polygon");
            }
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(elements.floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent()) return;
      if (!dataRef.current.floatingContext) return;
      handleCloseRef.current == null || handleCloseRef.current({
        ...dataRef.current.floatingContext,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          if (!isClickLikeOpenEvent()) {
            closeWithDelay(event);
          }
        }
      })(event);
    }
    if (isElement(elements.domReference)) {
      var _elements$floating;
      const ref = elements.domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      (_elements$floating = elements.floating) == null || _elements$floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        var _elements$floating2;
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        (_elements$floating2 = elements.floating) == null || _elements$floating2.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [elements, enabled, context2, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent]);
  index2(() => {
    var _handleCloseRef$curre;
    if (!enabled) return;
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      performedPointerEventsMutationRef.current = true;
      const floatingEl = elements.floating;
      if (isElement(elements.domReference) && floatingEl) {
        var _tree$nodesRef$curren;
        const body = getDocument(elements.floating).body;
        body.setAttribute(safePolygonIdentifier, "");
        const ref = elements.domReference;
        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        body.style.pointerEvents = "none";
        ref.style.pointerEvents = "auto";
        floatingEl.style.pointerEvents = "auto";
        return () => {
          body.style.pointerEvents = "";
          ref.style.pointerEvents = "";
          floatingEl.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);
  index2(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      restTimeoutPendingRef.current = false;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React48.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeoutIfSet(timeoutRef);
      clearTimeoutIfSet(restTimeoutRef);
      clearPointerEvents();
    };
  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);
  const reference = React48.useMemo(() => {
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      onPointerDown: setPointerRef,
      onPointerEnter: setPointerRef,
      onMouseMove(event) {
        const {
          nativeEvent
        } = event;
        function handleMouseMove() {
          if (!blockMouseMoveRef.current && !openRef.current) {
            onOpenChange(true, nativeEvent, "hover");
          }
        }
        if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {
          return;
        }
        if (open || restMs === 0) {
          return;
        }
        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {
          return;
        }
        clearTimeoutIfSet(restTimeoutRef);
        if (pointerTypeRef.current === "touch") {
          handleMouseMove();
        } else {
          restTimeoutPendingRef.current = true;
          restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);
        }
      }
    };
  }, [mouseOnly, onOpenChange, open, openRef, restMs]);
  const floating = React48.useMemo(() => ({
    onMouseEnter() {
      clearTimeoutIfSet(timeoutRef);
    },
    onMouseLeave(event) {
      if (!isClickLikeOpenEvent()) {
        closeWithDelay(event.nativeEvent, false);
      }
    }
  }), [closeWithDelay, isClickLikeOpenEvent]);
  return React48.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
var NOOP = () => {
};
var FloatingDelayGroupContext = React48.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: NOOP,
  setState: NOOP,
  isInstantPhase: false
});
var useDelayGroupContext = () => React48.useContext(FloatingDelayGroupContext);
function FloatingDelayGroup(props) {
  const {
    children,
    delay,
    timeoutMs = 0
  } = props;
  const [state, setState] = React48.useReducer((prev, next) => ({
    ...prev,
    ...next
  }), {
    delay,
    timeoutMs,
    initialDelay: delay,
    currentId: null,
    isInstantPhase: false
  });
  const initialCurrentIdRef = React48.useRef(null);
  const setCurrentId = React48.useCallback((currentId) => {
    setState({
      currentId
    });
  }, []);
  index2(() => {
    if (state.currentId) {
      if (initialCurrentIdRef.current === null) {
        initialCurrentIdRef.current = state.currentId;
      } else if (!state.isInstantPhase) {
        setState({
          isInstantPhase: true
        });
      }
    } else {
      if (state.isInstantPhase) {
        setState({
          isInstantPhase: false
        });
      }
      initialCurrentIdRef.current = null;
    }
  }, [state.currentId, state.isInstantPhase]);
  return (0, import_jsx_runtime34.jsx)(FloatingDelayGroupContext.Provider, {
    value: React48.useMemo(() => ({
      ...state,
      setState,
      setCurrentId
    }), [state, setCurrentId]),
    children
  });
}
function useDelayGroup(context2, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    open,
    onOpenChange,
    floatingId
  } = context2;
  const {
    id: optionId,
    enabled = true
  } = options;
  const id = optionId != null ? optionId : floatingId;
  const groupContext = useDelayGroupContext();
  const {
    currentId,
    setCurrentId,
    initialDelay,
    setState,
    timeoutMs
  } = groupContext;
  index2(() => {
    if (!enabled) return;
    if (!currentId) return;
    setState({
      delay: {
        open: 1,
        close: getDelay(initialDelay, "close")
      }
    });
    if (currentId !== id) {
      onOpenChange(false);
    }
  }, [enabled, id, onOpenChange, setState, currentId, initialDelay]);
  index2(() => {
    function unset() {
      onOpenChange(false);
      setState({
        delay: initialDelay,
        currentId: null
      });
    }
    if (!enabled) return;
    if (!currentId) return;
    if (!open && currentId === id) {
      if (timeoutMs) {
        const timeout = window.setTimeout(unset, timeoutMs);
        return () => {
          clearTimeout(timeout);
        };
      }
      unset();
    }
  }, [enabled, open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);
  index2(() => {
    if (!enabled) return;
    if (setCurrentId === NOOP || !open) return;
    setCurrentId(id);
  }, [enabled, open, setCurrentId, id]);
  return groupContext;
}
var rafId = 0;
function enqueueFocus(el, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    preventScroll = false,
    cancelPrevious = true,
    sync = false
  } = options;
  cancelPrevious && cancelAnimationFrame(rafId);
  const exec = () => el == null ? void 0 : el.focus({
    preventScroll
  });
  if (sync) {
    exec();
  } else {
    rafId = requestAnimationFrame(exec);
  }
}
function getAncestors(nodes, id) {
  var _nodes$find;
  let allAncestors = [];
  let currentParentId = (_nodes$find = nodes.find((node) => node.id === id)) == null ? void 0 : _nodes$find.parentId;
  while (currentParentId) {
    const currentNode = nodes.find((node) => node.id === currentParentId);
    currentParentId = currentNode == null ? void 0 : currentNode.parentId;
    if (currentNode) {
      allAncestors = allAncestors.concat(currentNode);
    }
  }
  return allAncestors;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getDeepestNode(nodes, id) {
  let deepestNodeId;
  let maxDepth = -1;
  function findDeepest(nodeId, depth) {
    if (depth > maxDepth) {
      deepestNodeId = nodeId;
      maxDepth = depth;
    }
    const children = getChildren(nodes, nodeId);
    children.forEach((child) => {
      findDeepest(child.id, depth + 1);
    });
  }
  findDeepest(id, 0);
  return nodes.find((node) => node.id === deepestNodeId);
}
var counterMap2 = /* @__PURE__ */ new WeakMap();
var uncontrolledElementsSet = /* @__PURE__ */ new WeakSet();
var markerMap2 = {};
var lockCount$1 = 0;
var supportsInert = () => typeof HTMLElement !== "undefined" && "inert" in HTMLElement.prototype;
var unwrapHost2 = (node) => node && (node.host || unwrapHost2(node.parentNode));
var correctElements = (parent, targets) => targets.map((target) => {
  if (parent.contains(target)) {
    return target;
  }
  const correctedTarget = unwrapHost2(target);
  if (parent.contains(correctedTarget)) {
    return correctedTarget;
  }
  return null;
}).filter((x) => x != null);
function applyAttributeToOthers2(uncorrectedAvoidElements, body, ariaHidden, inert) {
  const markerName = "data-floating-ui-inert";
  const controlAttribute = inert ? "inert" : ariaHidden ? "aria-hidden" : null;
  const avoidElements = correctElements(body, uncorrectedAvoidElements);
  const elementsToKeep = /* @__PURE__ */ new Set();
  const elementsToStop = new Set(avoidElements);
  const hiddenElements = [];
  if (!markerMap2[markerName]) {
    markerMap2[markerName] = /* @__PURE__ */ new WeakMap();
  }
  const markerCounter = markerMap2[markerName];
  avoidElements.forEach(keep);
  deep(body);
  elementsToKeep.clear();
  function keep(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    el.parentNode && keep(el.parentNode);
  }
  function deep(parent) {
    if (!parent || elementsToStop.has(parent)) {
      return;
    }
    [].forEach.call(parent.children, (node) => {
      if (getNodeName(node) === "script") return;
      if (elementsToKeep.has(node)) {
        deep(node);
      } else {
        const attr2 = controlAttribute ? node.getAttribute(controlAttribute) : null;
        const alreadyHidden = attr2 !== null && attr2 !== "false";
        const currentCounterValue = counterMap2.get(node) || 0;
        const counterValue = controlAttribute ? currentCounterValue + 1 : currentCounterValue;
        const markerValue = (markerCounter.get(node) || 0) + 1;
        counterMap2.set(node, counterValue);
        markerCounter.set(node, markerValue);
        hiddenElements.push(node);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledElementsSet.add(node);
        }
        if (markerValue === 1) {
          node.setAttribute(markerName, "");
        }
        if (!alreadyHidden && controlAttribute) {
          node.setAttribute(controlAttribute, "true");
        }
      }
    });
  }
  lockCount$1++;
  return () => {
    hiddenElements.forEach((element) => {
      const currentCounterValue = counterMap2.get(element) || 0;
      const counterValue = controlAttribute ? currentCounterValue - 1 : currentCounterValue;
      const markerValue = (markerCounter.get(element) || 0) - 1;
      counterMap2.set(element, counterValue);
      markerCounter.set(element, markerValue);
      if (!counterValue) {
        if (!uncontrolledElementsSet.has(element) && controlAttribute) {
          element.removeAttribute(controlAttribute);
        }
        uncontrolledElementsSet.delete(element);
      }
      if (!markerValue) {
        element.removeAttribute(markerName);
      }
    });
    lockCount$1--;
    if (!lockCount$1) {
      counterMap2 = /* @__PURE__ */ new WeakMap();
      counterMap2 = /* @__PURE__ */ new WeakMap();
      uncontrolledElementsSet = /* @__PURE__ */ new WeakSet();
      markerMap2 = {};
    }
  };
}
function markOthers(avoidElements, ariaHidden, inert) {
  if (ariaHidden === void 0) {
    ariaHidden = false;
  }
  if (inert === void 0) {
    inert = false;
  }
  const body = getDocument(avoidElements[0]).body;
  return applyAttributeToOthers2(avoidElements.concat(Array.from(body.querySelectorAll("[aria-live]"))), body, ariaHidden, inert);
}
var getTabbableOptions = () => ({
  getShadowRoot: true,
  displayCheck: (
    // JSDOM does not support the `tabbable` library. To solve this we can
    // check if `ResizeObserver` is a real function (not polyfilled), which
    // determines if the current environment is JSDOM-like.
    typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
  )
});
function getTabbableIn(container, direction) {
  const allTabbable = tabbable(container, getTabbableOptions());
  if (direction === "prev") {
    allTabbable.reverse();
  }
  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}
function getNextTabbable() {
  return getTabbableIn(document.body, "next");
}
function getPreviousTabbable() {
  return getTabbableIn(document.body, "prev");
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}
var HIDDEN_STYLES = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "fixed",
  whiteSpace: "nowrap",
  width: "1px",
  top: 0,
  left: 0
};
var FocusGuard = React48.forwardRef(function FocusGuard2(props, ref) {
  const [role, setRole] = React48.useState();
  index2(() => {
    if (isSafari()) {
      setRole("button");
    }
  }, []);
  const restProps = {
    ref,
    tabIndex: 0,
    // Role is only for VoiceOver
    role,
    "aria-hidden": role ? void 0 : true,
    [createAttribute("focus-guard")]: "",
    style: HIDDEN_STYLES
  };
  return (0, import_jsx_runtime34.jsx)("span", {
    ...props,
    ...restProps
  });
});
var PortalContext = React48.createContext(null);
var attr = createAttribute("portal");
function useFloatingPortalNode(props) {
  if (props === void 0) {
    props = {};
  }
  const {
    id,
    root
  } = props;
  const uniqueId = useId7();
  const portalContext = usePortalContext2();
  const [portalNode, setPortalNode] = React48.useState(null);
  const portalNodeRef = React48.useRef(null);
  index2(() => {
    return () => {
      portalNode == null || portalNode.remove();
      queueMicrotask(() => {
        portalNodeRef.current = null;
      });
    };
  }, [portalNode]);
  index2(() => {
    if (!uniqueId) return;
    if (portalNodeRef.current) return;
    const existingIdRoot = id ? document.getElementById(id) : null;
    if (!existingIdRoot) return;
    const subRoot = document.createElement("div");
    subRoot.id = uniqueId;
    subRoot.setAttribute(attr, "");
    existingIdRoot.appendChild(subRoot);
    portalNodeRef.current = subRoot;
    setPortalNode(subRoot);
  }, [id, uniqueId]);
  index2(() => {
    if (root === null) return;
    if (!uniqueId) return;
    if (portalNodeRef.current) return;
    let container = root || (portalContext == null ? void 0 : portalContext.portalNode);
    if (container && !isElement(container)) container = container.current;
    container = container || document.body;
    let idWrapper = null;
    if (id) {
      idWrapper = document.createElement("div");
      idWrapper.id = id;
      container.appendChild(idWrapper);
    }
    const subRoot = document.createElement("div");
    subRoot.id = uniqueId;
    subRoot.setAttribute(attr, "");
    container = idWrapper || container;
    container.appendChild(subRoot);
    portalNodeRef.current = subRoot;
    setPortalNode(subRoot);
  }, [id, root, uniqueId, portalContext]);
  return portalNode;
}
function FloatingPortal(props) {
  const {
    children,
    id,
    root,
    preserveTabOrder = true
  } = props;
  const portalNode = useFloatingPortalNode({
    id,
    root
  });
  const [focusManagerState, setFocusManagerState] = React48.useState(null);
  const beforeOutsideRef = React48.useRef(null);
  const afterOutsideRef = React48.useRef(null);
  const beforeInsideRef = React48.useRef(null);
  const afterInsideRef = React48.useRef(null);
  const modal = focusManagerState == null ? void 0 : focusManagerState.modal;
  const open = focusManagerState == null ? void 0 : focusManagerState.open;
  const shouldRenderGuards = (
    // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && // Don't render if unmount is transitioning.
    focusManagerState.open && preserveTabOrder && !!(root || portalNode)
  );
  React48.useEffect(() => {
    if (!portalNode || !preserveTabOrder || modal) {
      return;
    }
    function onFocus(event) {
      if (portalNode && isOutsideEvent(event)) {
        const focusing = event.type === "focusin";
        const manageFocus = focusing ? enableFocusInside : disableFocusInside;
        manageFocus(portalNode);
      }
    }
    portalNode.addEventListener("focusin", onFocus, true);
    portalNode.addEventListener("focusout", onFocus, true);
    return () => {
      portalNode.removeEventListener("focusin", onFocus, true);
      portalNode.removeEventListener("focusout", onFocus, true);
    };
  }, [portalNode, preserveTabOrder, modal]);
  React48.useEffect(() => {
    if (!portalNode) return;
    if (open) return;
    enableFocusInside(portalNode);
  }, [open, portalNode]);
  return (0, import_jsx_runtime34.jsxs)(PortalContext.Provider, {
    value: React48.useMemo(() => ({
      preserveTabOrder,
      beforeOutsideRef,
      afterOutsideRef,
      beforeInsideRef,
      afterInsideRef,
      portalNode,
      setFocusManagerState
    }), [preserveTabOrder, portalNode]),
    children: [shouldRenderGuards && portalNode && (0, import_jsx_runtime34.jsx)(FocusGuard, {
      "data-type": "outside",
      ref: beforeOutsideRef,
      onFocus: (event) => {
        if (isOutsideEvent(event, portalNode)) {
          var _beforeInsideRef$curr;
          (_beforeInsideRef$curr = beforeInsideRef.current) == null || _beforeInsideRef$curr.focus();
        } else {
          const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.domReference);
          prevTabbable == null || prevTabbable.focus();
        }
      }
    }), shouldRenderGuards && portalNode && (0, import_jsx_runtime34.jsx)("span", {
      "aria-owns": portalNode.id,
      style: HIDDEN_STYLES
    }), portalNode && ReactDOM3.createPortal(children, portalNode), shouldRenderGuards && portalNode && (0, import_jsx_runtime34.jsx)(FocusGuard, {
      "data-type": "outside",
      ref: afterOutsideRef,
      onFocus: (event) => {
        if (isOutsideEvent(event, portalNode)) {
          var _afterInsideRef$curre;
          (_afterInsideRef$curre = afterInsideRef.current) == null || _afterInsideRef$curre.focus();
        } else {
          const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.domReference);
          nextTabbable == null || nextTabbable.focus();
          (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent, "focus-out"));
        }
      }
    })]
  });
}
var usePortalContext2 = () => React48.useContext(PortalContext);
var FOCUSABLE_ATTRIBUTE = "data-floating-ui-focusable";
function getFloatingFocusElement(floatingElement) {
  if (!floatingElement) {
    return null;
  }
  return floatingElement.hasAttribute(FOCUSABLE_ATTRIBUTE) ? floatingElement : floatingElement.querySelector("[" + FOCUSABLE_ATTRIBUTE + "]") || floatingElement;
}
function useLiteMergeRefs(refs) {
  return React48.useMemo(() => {
    return (value) => {
      refs.forEach((ref) => {
        if (ref) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
var LIST_LIMIT = 20;
var previouslyFocusedElements = [];
function addPreviouslyFocusedElement(element) {
  previouslyFocusedElements = previouslyFocusedElements.filter((el) => el.isConnected);
  if (element && getNodeName(element) !== "body") {
    previouslyFocusedElements.push(element);
    if (previouslyFocusedElements.length > LIST_LIMIT) {
      previouslyFocusedElements = previouslyFocusedElements.slice(-LIST_LIMIT);
    }
  }
}
function getPreviouslyFocusedElement() {
  return previouslyFocusedElements.slice().reverse().find((el) => el.isConnected);
}
function getFirstTabbableElement(container) {
  const tabbableOptions = getTabbableOptions();
  if (isTabbable(container, tabbableOptions)) {
    return container;
  }
  return tabbable(container, tabbableOptions)[0] || container;
}
var VisuallyHiddenDismiss = React48.forwardRef(function VisuallyHiddenDismiss2(props, ref) {
  return (0, import_jsx_runtime34.jsx)("button", {
    ...props,
    type: "button",
    ref,
    tabIndex: -1,
    style: HIDDEN_STYLES
  });
});
function FloatingFocusManager(props) {
  const {
    context: context2,
    children,
    disabled = false,
    order = ["content"],
    guards: _guards = true,
    initialFocus = 0,
    returnFocus = true,
    restoreFocus = false,
    modal = true,
    visuallyHiddenDismiss = false,
    closeOnFocusOut = true,
    outsideElementsInert = false
  } = props;
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements: {
      domReference,
      floating
    }
  } = context2;
  const getNodeId = useEffectEvent(() => {
    var _dataRef$current$floa;
    return (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;
  });
  const ignoreInitialFocus = typeof initialFocus === "number" && initialFocus < 0;
  const isUntrappedTypeableCombobox = isTypeableCombobox(domReference) && ignoreInitialFocus;
  const inertSupported = supportsInert();
  const guards = inertSupported ? _guards : true;
  const useInert = !guards || inertSupported && outsideElementsInert;
  const orderRef = useLatestRef2(order);
  const initialFocusRef = useLatestRef2(initialFocus);
  const returnFocusRef = useLatestRef2(returnFocus);
  const tree = useFloatingTree();
  const portalContext = usePortalContext2();
  const startDismissButtonRef = React48.useRef(null);
  const endDismissButtonRef = React48.useRef(null);
  const preventReturnFocusRef = React48.useRef(false);
  const isPointerDownRef = React48.useRef(false);
  const tabbableIndexRef = React48.useRef(-1);
  const isInsidePortal = portalContext != null;
  const floatingFocusElement = getFloatingFocusElement(floating);
  const getTabbableContent = useEffectEvent(function(container) {
    if (container === void 0) {
      container = floatingFocusElement;
    }
    return container ? tabbable(container, getTabbableOptions()) : [];
  });
  const getTabbableElements = useEffectEvent((container) => {
    const content = getTabbableContent(container);
    return orderRef.current.map((type) => {
      if (domReference && type === "reference") {
        return domReference;
      }
      if (floatingFocusElement && type === "floating") {
        return floatingFocusElement;
      }
      return content;
    }).filter(Boolean).flat();
  });
  React48.useEffect(() => {
    if (disabled) return;
    if (!modal) return;
    function onKeyDown(event) {
      if (event.key === "Tab") {
        if (contains(floatingFocusElement, activeElement(getDocument(floatingFocusElement))) && getTabbableContent().length === 0 && !isUntrappedTypeableCombobox) {
          stopEvent(event);
        }
        const els = getTabbableElements();
        const target = getTarget(event);
        if (orderRef.current[0] === "reference" && target === domReference) {
          stopEvent(event);
          if (event.shiftKey) {
            enqueueFocus(els[els.length - 1]);
          } else {
            enqueueFocus(els[1]);
          }
        }
        if (orderRef.current[1] === "floating" && target === floatingFocusElement && event.shiftKey) {
          stopEvent(event);
          enqueueFocus(els[0]);
        }
      }
    }
    const doc = getDocument(floatingFocusElement);
    doc.addEventListener("keydown", onKeyDown);
    return () => {
      doc.removeEventListener("keydown", onKeyDown);
    };
  }, [disabled, domReference, floatingFocusElement, modal, orderRef, isUntrappedTypeableCombobox, getTabbableContent, getTabbableElements]);
  React48.useEffect(() => {
    if (disabled) return;
    if (!floating) return;
    function handleFocusIn(event) {
      const target = getTarget(event);
      const tabbableContent = getTabbableContent();
      const tabbableIndex = tabbableContent.indexOf(target);
      if (tabbableIndex !== -1) {
        tabbableIndexRef.current = tabbableIndex;
      }
    }
    floating.addEventListener("focusin", handleFocusIn);
    return () => {
      floating.removeEventListener("focusin", handleFocusIn);
    };
  }, [disabled, floating, getTabbableContent]);
  React48.useEffect(() => {
    if (disabled) return;
    if (!closeOnFocusOut) return;
    function handlePointerDown() {
      isPointerDownRef.current = true;
      setTimeout(() => {
        isPointerDownRef.current = false;
      });
    }
    function handleFocusOutside(event) {
      const relatedTarget = event.relatedTarget;
      queueMicrotask(() => {
        const nodeId = getNodeId();
        const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute(createAttribute("focus-guard")) || tree && (getChildren(tree.nodesRef.current, nodeId).find((node) => {
          var _node$context, _node$context2;
          return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
        }) || getAncestors(tree.nodesRef.current, nodeId).find((node) => {
          var _node$context3, _node$context4, _node$context5;
          return [(_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating, getFloatingFocusElement((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.floating)].includes(relatedTarget) || ((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.domReference) === relatedTarget;
        })));
        if (restoreFocus && movedToUnrelatedNode && activeElement(getDocument(floatingFocusElement)) === getDocument(floatingFocusElement).body) {
          if (isHTMLElement(floatingFocusElement)) {
            floatingFocusElement.focus();
          }
          const prevTabbableIndex = tabbableIndexRef.current;
          const tabbableContent = getTabbableContent();
          const nodeToFocus = tabbableContent[prevTabbableIndex] || tabbableContent[tabbableContent.length - 1] || floatingFocusElement;
          if (isHTMLElement(nodeToFocus)) {
            nodeToFocus.focus();
          }
        }
        if ((isUntrappedTypeableCombobox ? true : !modal) && relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
        relatedTarget !== getPreviouslyFocusedElement()) {
          preventReturnFocusRef.current = true;
          onOpenChange(false, event, "focus-out");
        }
      });
    }
    if (floating && isHTMLElement(domReference)) {
      domReference.addEventListener("focusout", handleFocusOutside);
      domReference.addEventListener("pointerdown", handlePointerDown);
      floating.addEventListener("focusout", handleFocusOutside);
      return () => {
        domReference.removeEventListener("focusout", handleFocusOutside);
        domReference.removeEventListener("pointerdown", handlePointerDown);
        floating.removeEventListener("focusout", handleFocusOutside);
      };
    }
  }, [disabled, domReference, floating, floatingFocusElement, modal, tree, portalContext, onOpenChange, closeOnFocusOut, restoreFocus, getTabbableContent, isUntrappedTypeableCombobox, getNodeId]);
  const beforeGuardRef = React48.useRef(null);
  const afterGuardRef = React48.useRef(null);
  const mergedBeforeGuardRef = useLiteMergeRefs([beforeGuardRef, portalContext == null ? void 0 : portalContext.beforeInsideRef]);
  const mergedAfterGuardRef = useLiteMergeRefs([afterGuardRef, portalContext == null ? void 0 : portalContext.afterInsideRef]);
  React48.useEffect(() => {
    var _portalContext$portal;
    if (disabled) return;
    if (!floating) return;
    const portalNodes = Array.from((portalContext == null || (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[" + createAttribute("portal") + "]")) || []);
    const ancestorFloatingNodes = tree && !modal ? getAncestors(tree == null ? void 0 : tree.nodesRef.current, getNodeId()).map((node) => {
      var _node$context6;
      return (_node$context6 = node.context) == null ? void 0 : _node$context6.elements.floating;
    }) : [];
    const insideElements = [floating, ...portalNodes, ...ancestorFloatingNodes, startDismissButtonRef.current, endDismissButtonRef.current, beforeGuardRef.current, afterGuardRef.current, portalContext == null ? void 0 : portalContext.beforeOutsideRef.current, portalContext == null ? void 0 : portalContext.afterOutsideRef.current, orderRef.current.includes("reference") || isUntrappedTypeableCombobox ? domReference : null].filter((x) => x != null);
    const cleanup2 = modal || isUntrappedTypeableCombobox ? markOthers(insideElements, !useInert, useInert) : markOthers(insideElements);
    return () => {
      cleanup2();
    };
  }, [disabled, domReference, floating, modal, orderRef, portalContext, isUntrappedTypeableCombobox, guards, useInert, tree, getNodeId]);
  index2(() => {
    if (disabled || !isHTMLElement(floatingFocusElement)) return;
    const doc = getDocument(floatingFocusElement);
    const previouslyFocusedElement = activeElement(doc);
    queueMicrotask(() => {
      const focusableElements = getTabbableElements(floatingFocusElement);
      const initialFocusValue = initialFocusRef.current;
      const elToFocus = (typeof initialFocusValue === "number" ? focusableElements[initialFocusValue] : initialFocusValue.current) || floatingFocusElement;
      const focusAlreadyInsideFloatingEl = contains(floatingFocusElement, previouslyFocusedElement);
      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {
        enqueueFocus(elToFocus, {
          preventScroll: elToFocus === floatingFocusElement
        });
      }
    });
  }, [disabled, open, floatingFocusElement, ignoreInitialFocus, getTabbableElements, initialFocusRef]);
  index2(() => {
    if (disabled || !floatingFocusElement) return;
    let preventReturnFocusScroll = false;
    let focusReference = false;
    const doc = getDocument(floatingFocusElement);
    const previouslyFocusedElement = activeElement(doc);
    const contextData = dataRef.current;
    let openEvent = contextData.openEvent;
    addPreviouslyFocusedElement(previouslyFocusedElement);
    function onOpenChange2(_ref) {
      let {
        open: open2,
        reason,
        event,
        nested
      } = _ref;
      if (open2) {
        openEvent = event;
      }
      if (reason === "escape-key") {
        focusReference = true;
      }
      if (["hover", "safe-polygon"].includes(reason) && event.type === "mouseleave") {
        preventReturnFocusRef.current = true;
      }
      if (reason !== "outside-press") return;
      if (nested) {
        preventReturnFocusRef.current = false;
        preventReturnFocusScroll = true;
      } else if (isVirtualClick(event) || isVirtualPointerEvent(event)) {
        preventReturnFocusRef.current = false;
      } else {
        let isPreventScrollSupported = false;
        document.createElement("div").focus({
          get preventScroll() {
            isPreventScrollSupported = true;
            return false;
          }
        });
        if (isPreventScrollSupported) {
          preventReturnFocusRef.current = false;
          preventReturnFocusScroll = true;
        } else {
          preventReturnFocusRef.current = true;
        }
      }
    }
    events.on("openchange", onOpenChange2);
    const fallbackEl = doc.createElement("span");
    fallbackEl.setAttribute("tabindex", "-1");
    fallbackEl.setAttribute("aria-hidden", "true");
    Object.assign(fallbackEl.style, HIDDEN_STYLES);
    if (isInsidePortal && domReference) {
      domReference.insertAdjacentElement("afterend", fallbackEl);
    }
    function getReturnElement() {
      if (typeof returnFocusRef.current === "boolean") {
        return focusReference && domReference ? domReference : getPreviouslyFocusedElement() || fallbackEl;
      }
      return returnFocusRef.current.current || fallbackEl;
    }
    return () => {
      events.off("openchange", onOpenChange2);
      const activeEl = activeElement(doc);
      const isFocusInsideFloatingTree = contains(floating, activeEl) || tree && getChildren(tree.nodesRef.current, getNodeId()).some((node) => {
        var _node$context7;
        return contains((_node$context7 = node.context) == null ? void 0 : _node$context7.elements.floating, activeEl);
      });
      if (isFocusInsideFloatingTree || !!openEvent && ["click", "mousedown"].includes(openEvent.type)) {
        focusReference = true;
      }
      const returnElement = getReturnElement();
      queueMicrotask(() => {
        const tabbableReturnElement = getFirstTabbableElement(returnElement);
        if (
          // eslint-disable-next-line react-hooks/exhaustive-deps
          returnFocusRef.current && !preventReturnFocusRef.current && isHTMLElement(tabbableReturnElement) && // If the focus moved somewhere else after mount, avoid returning focus
          // since it likely entered a different element which should be
          // respected: https://github.com/floating-ui/floating-ui/issues/2607
          (tabbableReturnElement !== activeEl && activeEl !== doc.body ? isFocusInsideFloatingTree : true)
        ) {
          tabbableReturnElement.focus({
            preventScroll: preventReturnFocusScroll
          });
        }
        fallbackEl.remove();
      });
    };
  }, [disabled, floating, floatingFocusElement, returnFocusRef, dataRef, events, tree, isInsidePortal, domReference, getNodeId]);
  React48.useEffect(() => {
    queueMicrotask(() => {
      preventReturnFocusRef.current = false;
    });
  }, [disabled]);
  index2(() => {
    if (disabled) return;
    if (!portalContext) return;
    portalContext.setFocusManagerState({
      modal,
      closeOnFocusOut,
      open,
      onOpenChange,
      domReference
    });
    return () => {
      portalContext.setFocusManagerState(null);
    };
  }, [disabled, portalContext, modal, open, onOpenChange, closeOnFocusOut, domReference]);
  index2(() => {
    if (disabled) return;
    if (!floatingFocusElement) return;
    if (typeof MutationObserver !== "function") return;
    if (ignoreInitialFocus) return;
    const handleMutation = () => {
      const tabIndex = floatingFocusElement.getAttribute("tabindex");
      const tabbableContent = getTabbableContent();
      const activeEl = activeElement(getDocument(floating));
      const tabbableIndex = tabbableContent.indexOf(activeEl);
      if (tabbableIndex !== -1) {
        tabbableIndexRef.current = tabbableIndex;
      }
      if (orderRef.current.includes("floating") || activeEl !== domReference && tabbableContent.length === 0) {
        if (tabIndex !== "0") {
          floatingFocusElement.setAttribute("tabindex", "0");
        }
      } else if (tabIndex !== "-1") {
        floatingFocusElement.setAttribute("tabindex", "-1");
      }
    };
    handleMutation();
    const observer = new MutationObserver(handleMutation);
    observer.observe(floatingFocusElement, {
      childList: true,
      subtree: true,
      attributes: true
    });
    return () => {
      observer.disconnect();
    };
  }, [disabled, floating, floatingFocusElement, domReference, orderRef, getTabbableContent, ignoreInitialFocus]);
  function renderDismissButton(location) {
    if (disabled || !visuallyHiddenDismiss || !modal) {
      return null;
    }
    return (0, import_jsx_runtime34.jsx)(VisuallyHiddenDismiss, {
      ref: location === "start" ? startDismissButtonRef : endDismissButtonRef,
      onClick: (event) => onOpenChange(false, event.nativeEvent),
      children: typeof visuallyHiddenDismiss === "string" ? visuallyHiddenDismiss : "Dismiss"
    });
  }
  const shouldRenderGuards = !disabled && guards && (modal ? !isUntrappedTypeableCombobox : true) && (isInsidePortal || modal);
  return (0, import_jsx_runtime34.jsxs)(import_jsx_runtime34.Fragment, {
    children: [shouldRenderGuards && (0, import_jsx_runtime34.jsx)(FocusGuard, {
      "data-type": "inside",
      ref: mergedBeforeGuardRef,
      onFocus: (event) => {
        if (modal) {
          const els = getTabbableElements();
          enqueueFocus(order[0] === "reference" ? els[0] : els[els.length - 1]);
        } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
          preventReturnFocusRef.current = false;
          if (isOutsideEvent(event, portalContext.portalNode)) {
            const nextTabbable = getNextTabbable() || domReference;
            nextTabbable == null || nextTabbable.focus();
          } else {
            var _portalContext$before;
            (_portalContext$before = portalContext.beforeOutsideRef.current) == null || _portalContext$before.focus();
          }
        }
      }
    }), !isUntrappedTypeableCombobox && renderDismissButton("start"), children, renderDismissButton("end"), shouldRenderGuards && (0, import_jsx_runtime34.jsx)(FocusGuard, {
      "data-type": "inside",
      ref: mergedAfterGuardRef,
      onFocus: (event) => {
        if (modal) {
          enqueueFocus(getTabbableElements()[0]);
        } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
          if (closeOnFocusOut) {
            preventReturnFocusRef.current = true;
          }
          if (isOutsideEvent(event, portalContext.portalNode)) {
            const prevTabbable = getPreviousTabbable() || domReference;
            prevTabbable == null || prevTabbable.focus();
          } else {
            var _portalContext$afterO;
            (_portalContext$afterO = portalContext.afterOutsideRef.current) == null || _portalContext$afterO.focus();
          }
        }
      }
    })]
  });
}
var lockCount2 = 0;
function enableScrollLock() {
  const isIOS = /iP(hone|ad|od)|iOS/.test(getPlatform());
  const bodyStyle = document.body.style;
  const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
  const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  const scrollX = bodyStyle.left ? parseFloat(bodyStyle.left) : window.scrollX;
  const scrollY = bodyStyle.top ? parseFloat(bodyStyle.top) : window.scrollY;
  bodyStyle.overflow = "hidden";
  if (scrollbarWidth) {
    bodyStyle[paddingProp] = scrollbarWidth + "px";
  }
  if (isIOS) {
    var _window$visualViewpor, _window$visualViewpor2;
    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
    Object.assign(bodyStyle, {
      position: "fixed",
      top: -(scrollY - Math.floor(offsetTop)) + "px",
      left: -(scrollX - Math.floor(offsetLeft)) + "px",
      right: "0"
    });
  }
  return () => {
    Object.assign(bodyStyle, {
      overflow: "",
      [paddingProp]: ""
    });
    if (isIOS) {
      Object.assign(bodyStyle, {
        position: "",
        top: "",
        left: "",
        right: ""
      });
      window.scrollTo(scrollX, scrollY);
    }
  };
}
var cleanup = () => {
};
var FloatingOverlay = React48.forwardRef(function FloatingOverlay2(props, ref) {
  const {
    lockScroll = false,
    ...rest
  } = props;
  index2(() => {
    if (!lockScroll) return;
    lockCount2++;
    if (lockCount2 === 1) {
      cleanup = enableScrollLock();
    }
    return () => {
      lockCount2--;
      if (lockCount2 === 0) {
        cleanup();
      }
    };
  }, [lockScroll]);
  return (0, import_jsx_runtime34.jsx)("div", {
    ref,
    ...rest,
    style: {
      position: "fixed",
      overflow: "auto",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...rest.style
    }
  });
});
function isButtonTarget(event) {
  return isHTMLElement(event.target) && event.target.tagName === "BUTTON";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function useClick(context2, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    elements: {
      domReference
    }
  } = context2;
  const {
    enabled = true,
    event: eventOption = "click",
    toggle = true,
    ignoreMouse = false,
    keyboardHandlers = true,
    stickIfOpen = true
  } = props;
  const pointerTypeRef = React48.useRef();
  const didKeyDownRef = React48.useRef(false);
  const reference = React48.useMemo(() => ({
    onPointerDown(event) {
      pointerTypeRef.current = event.pointerType;
    },
    onMouseDown(event) {
      const pointerType = pointerTypeRef.current;
      if (event.button !== 0) return;
      if (eventOption === "click") return;
      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;
      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === "mousedown" : true)) {
        onOpenChange(false, event.nativeEvent, "click");
      } else {
        event.preventDefault();
        onOpenChange(true, event.nativeEvent, "click");
      }
    },
    onClick(event) {
      const pointerType = pointerTypeRef.current;
      if (eventOption === "mousedown" && pointerTypeRef.current) {
        pointerTypeRef.current = void 0;
        return;
      }
      if (isMouseLikePointerType(pointerType, true) && ignoreMouse) return;
      if (open && toggle && (dataRef.current.openEvent && stickIfOpen ? dataRef.current.openEvent.type === "click" : true)) {
        onOpenChange(false, event.nativeEvent, "click");
      } else {
        onOpenChange(true, event.nativeEvent, "click");
      }
    },
    onKeyDown(event) {
      pointerTypeRef.current = void 0;
      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
        return;
      }
      if (event.key === " " && !isSpaceIgnored(domReference)) {
        event.preventDefault();
        didKeyDownRef.current = true;
      }
      if (event.key === "Enter") {
        if (open && toggle) {
          onOpenChange(false, event.nativeEvent, "click");
        } else {
          onOpenChange(true, event.nativeEvent, "click");
        }
      }
    },
    onKeyUp(event) {
      if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
        return;
      }
      if (event.key === " " && didKeyDownRef.current) {
        didKeyDownRef.current = false;
        if (open && toggle) {
          onOpenChange(false, event.nativeEvent, "click");
        } else {
          onOpenChange(true, event.nativeEvent, "click");
        }
      }
    }
  }), [dataRef, domReference, eventOption, ignoreMouse, keyboardHandlers, onOpenChange, open, stickIfOpen, toggle]);
  return React48.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeProp = (normalizable) => {
  var _normalizable$escapeK, _normalizable$outside;
  return {
    escapeKey: typeof normalizable === "boolean" ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
    outsidePress: typeof normalizable === "boolean" ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true
  };
};
function useDismiss(context2, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    elements,
    dataRef
  } = context2;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles,
    capture
  } = props;
  const tree = useFloatingTree();
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = React48.useRef(false);
  const endedOrStartedInsideRef = React48.useRef(false);
  const {
    escapeKey: escapeKeyBubbles,
    outsidePress: outsidePressBubbles
  } = normalizeProp(bubbles);
  const {
    escapeKey: escapeKeyCapture,
    outsidePress: outsidePressCapture
  } = normalizeProp(capture);
  const isComposingRef = React48.useRef(false);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    var _dataRef$current$floa;
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    if (isComposingRef.current) {
      return;
    }
    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, "escape-key");
  });
  const closeOnEscapeKeyDownCapture = useEffectEvent((event) => {
    var _getTarget2;
    const callback = () => {
      var _getTarget;
      closeOnEscapeKeyDown(event);
      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener("keydown", callback);
    };
    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener("keydown", callback);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    var _dataRef$current$floa2;
    const insideReactTree = insideReactTreeRef.current;
    insideReactTreeRef.current = false;
    const endedOrStartedInside = endedOrStartedInsideRef.current;
    endedOrStartedInsideRef.current = false;
    if (outsidePressEvent === "click" && endedOrStartedInside) {
      return;
    }
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    const inertSelector = "[" + createAttribute("inert") + "]";
    const markers = getDocument(elements.floating).querySelectorAll(inertSelector);
    let targetRootAncestor = isElement(target) ? target : null;
    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {
      const nextParent = getParentNode(targetRootAncestor);
      if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {
        break;
      }
      targetRootAncestor = nextParent;
    }
    if (markers.length && isElement(target) && !isRootElement(target) && // Clicked on a direct ancestor (e.g. FloatingOverlay).
    !contains(target, elements.floating) && // If the target root element contains none of the markers, then the
    // element was injected after the floating element rendered.
    Array.from(markers).every((marker) => !contains(targetRootAncestor, marker))) {
      return;
    }
    if (isHTMLElement(target) && floating) {
      const lastTraversableNode = isLastTraversableNode(target);
      const style = getComputedStyle2(target);
      const scrollRe = /auto|scroll/;
      const isScrollableX = lastTraversableNode || scrollRe.test(style.overflowX);
      const isScrollableY = lastTraversableNode || scrollRe.test(style.overflowY);
      const canScrollX = isScrollableX && target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = isScrollableY && target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      const isRTL2 = style.direction === "rtl";
      const pressedVerticalScrollbar = canScrollY && (isRTL2 ? event.offsetX <= target.offsetWidth - target.clientWidth : event.offsetX > target.clientWidth);
      const pressedHorizontalScrollbar = canScrollX && event.offsetY > target.clientHeight;
      if (pressedVerticalScrollbar || pressedHorizontalScrollbar) {
        return;
      }
    }
    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;
    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, elements.floating) || isEventTargetWithin(event, elements.domReference) || targetIsInsideChildren) {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (children.length > 0) {
      let shouldDismiss = true;
      children.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    onOpenChange(false, event, "outside-press");
  });
  const closeOnPressOutsideCapture = useEffectEvent((event) => {
    var _getTarget4;
    const callback = () => {
      var _getTarget3;
      closeOnPressOutside(event);
      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
    };
    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
  });
  React48.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    let compositionTimeout = -1;
    function onScroll(event) {
      onOpenChange(false, event, "ancestor-scroll");
    }
    function handleCompositionStart() {
      window.clearTimeout(compositionTimeout);
      isComposingRef.current = true;
    }
    function handleCompositionEnd() {
      compositionTimeout = window.setTimeout(
        () => {
          isComposingRef.current = false;
        },
        // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.
        // Only apply to WebKit for the test to remain 0ms.
        isWebKit() ? 5 : 0
      );
    }
    const doc = getDocument(elements.floating);
    if (escapeKey) {
      doc.addEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
      doc.addEventListener("compositionstart", handleCompositionStart);
      doc.addEventListener("compositionend", handleCompositionEnd);
    }
    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement(elements.domReference)) {
        ancestors = getOverflowAncestors(elements.domReference);
      }
      if (isElement(elements.floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.floating));
      }
      if (!isElement(elements.reference) && elements.reference && elements.reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      if (escapeKey) {
        doc.removeEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
        doc.removeEventListener("compositionstart", handleCompositionStart);
        doc.removeEventListener("compositionend", handleCompositionEnd);
      }
      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
      window.clearTimeout(compositionTimeout);
    };
  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);
  React48.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  const reference = React48.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    ...referencePress && {
      [bubbleHandlerKeys[referencePressEvent]]: (event) => {
        onOpenChange(false, event.nativeEvent, "reference-press");
      },
      ...referencePressEvent !== "click" && {
        onClick(event) {
          onOpenChange(false, event.nativeEvent, "reference-press");
        }
      }
    }
  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);
  const floating = React48.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    onMouseDown() {
      endedOrStartedInsideRef.current = true;
    },
    onMouseUp() {
      endedOrStartedInsideRef.current = true;
    },
    [captureHandlerKeys[outsidePressEvent]]: () => {
      insideReactTreeRef.current = true;
    }
  }), [closeOnEscapeKeyDown, outsidePressEvent]);
  return React48.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
function useFloatingRootContext(options) {
  const {
    open = false,
    onOpenChange: onOpenChangeProp,
    elements: elementsProp
  } = options;
  const floatingId = useId7();
  const dataRef = React48.useRef({});
  const [events] = React48.useState(() => createPubSub());
  const nested = useFloatingParentNodeId() != null;
  if (true) {
    const optionDomReference = elementsProp.reference;
    if (optionDomReference && !isElement(optionDomReference)) {
      error("Cannot pass a virtual element to the `elements.reference` option,", "as it must be a real DOM element. Use `refs.setPositionReference()`", "instead.");
    }
  }
  const [positionReference, setPositionReference] = React48.useState(elementsProp.reference);
  const onOpenChange = useEffectEvent((open2, event, reason) => {
    dataRef.current.openEvent = open2 ? event : void 0;
    events.emit("openchange", {
      open: open2,
      event,
      reason,
      nested
    });
    onOpenChangeProp == null || onOpenChangeProp(open2, event, reason);
  });
  const refs = React48.useMemo(() => ({
    setPositionReference
  }), []);
  const elements = React48.useMemo(() => ({
    reference: positionReference || elementsProp.reference || null,
    floating: elementsProp.floating || null,
    domReference: elementsProp.reference
  }), [positionReference, elementsProp.reference, elementsProp.floating]);
  return React48.useMemo(() => ({
    dataRef,
    open,
    onOpenChange,
    elements,
    events,
    floatingId,
    refs
  }), [open, onOpenChange, elements, events, floatingId, refs]);
}
function useFloating3(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    nodeId
  } = options;
  const internalRootContext = useFloatingRootContext({
    ...options,
    elements: {
      reference: null,
      floating: null,
      ...options.elements
    }
  });
  const rootContext = options.rootContext || internalRootContext;
  const computedElements = rootContext.elements;
  const [_domReference, setDomReference] = React48.useState(null);
  const [positionReference, _setPositionReference] = React48.useState(null);
  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;
  const domReference = optionDomReference || _domReference;
  const domReferenceRef = React48.useRef(null);
  const tree = useFloatingTree();
  index2(() => {
    if (domReference) {
      domReferenceRef.current = domReference;
    }
  }, [domReference]);
  const position = useFloating({
    ...options,
    elements: {
      ...computedElements,
      ...positionReference && {
        reference: positionReference
      }
    }
  });
  const setPositionReference = React48.useCallback((node) => {
    const computedPositionReference = isElement(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    _setPositionReference(computedPositionReference);
    position.refs.setReference(computedPositionReference);
  }, [position.refs]);
  const setReference = React48.useCallback((node) => {
    if (isElement(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React48.useMemo(() => ({
    ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React48.useMemo(() => ({
    ...position.elements,
    domReference
  }), [position.elements, domReference]);
  const context2 = React48.useMemo(() => ({
    ...position,
    ...rootContext,
    refs,
    elements,
    nodeId
  }), [position, refs, elements, nodeId, rootContext]);
  index2(() => {
    rootContext.dataRef.current.floatingContext = context2;
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context2;
    }
  });
  return React48.useMemo(() => ({
    ...position,
    context: context2,
    refs,
    elements
  }), [position, refs, elements, context2]);
}
function useFocus(context2, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements
  } = context2;
  const {
    enabled = true,
    visibleOnly = true
  } = props;
  const blockFocusRef = React48.useRef(false);
  const timeoutRef = React48.useRef(-1);
  const keyboardModalityRef = React48.useRef(true);
  React48.useEffect(() => {
    if (!enabled) return;
    const win = getWindow(elements.domReference);
    function onBlur() {
      if (!open && isHTMLElement(elements.domReference) && elements.domReference === activeElement(getDocument(elements.domReference))) {
        blockFocusRef.current = true;
      }
    }
    function onKeyDown() {
      keyboardModalityRef.current = true;
    }
    win.addEventListener("blur", onBlur);
    win.addEventListener("keydown", onKeyDown, true);
    return () => {
      win.removeEventListener("blur", onBlur);
      win.removeEventListener("keydown", onKeyDown, true);
    };
  }, [elements.domReference, open, enabled]);
  React48.useEffect(() => {
    if (!enabled) return;
    function onOpenChange2(_ref) {
      let {
        reason
      } = _ref;
      if (reason === "reference-press" || reason === "escape-key") {
        blockFocusRef.current = true;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [events, enabled]);
  React48.useEffect(() => {
    return () => {
      clearTimeoutIfSet(timeoutRef);
    };
  }, []);
  const reference = React48.useMemo(() => ({
    onPointerDown(event) {
      if (isVirtualPointerEvent(event.nativeEvent)) return;
      keyboardModalityRef.current = false;
    },
    onMouseLeave() {
      blockFocusRef.current = false;
    },
    onFocus(event) {
      if (blockFocusRef.current) return;
      const target = getTarget(event.nativeEvent);
      if (visibleOnly && isElement(target)) {
        try {
          if (isSafari() && isMac()) throw Error();
          if (!target.matches(":focus-visible")) return;
        } catch (_e) {
          if (!keyboardModalityRef.current && !isTypeableElement(target)) {
            return;
          }
        }
      }
      onOpenChange(true, event.nativeEvent, "focus");
    },
    onBlur(event) {
      blockFocusRef.current = false;
      const relatedTarget = event.relatedTarget;
      const nativeEvent = event.nativeEvent;
      const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
      timeoutRef.current = window.setTimeout(() => {
        var _dataRef$current$floa;
        const activeEl = activeElement(elements.domReference ? elements.domReference.ownerDocument : document);
        if (!relatedTarget && activeEl === elements.domReference) return;
        if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || contains(elements.domReference, activeEl) || movedToFocusGuard) {
          return;
        }
        onOpenChange(false, nativeEvent, "focus");
      });
    }
  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);
  return React48.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
var ACTIVE_KEY = "active";
var SELECTED_KEY = "selected";
function mergeProps2(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  const isItem = elementKey === "item";
  let domUserProps = userProps;
  if (isItem && userProps) {
    const {
      [ACTIVE_KEY]: _,
      [SELECTED_KEY]: __,
      ...validProps
    } = userProps;
    domUserProps = validProps;
  }
  return {
    ...elementKey === "floating" && {
      tabIndex: -1,
      [FOCUSABLE_ATTRIBUTE]: ""
    },
    ...domUserProps,
    ...propsList.map((value) => {
      const propsOrGetProps = value ? value[elementKey] : null;
      if (typeof propsOrGetProps === "function") {
        return userProps ? propsOrGetProps(userProps) : null;
      }
      return propsOrGetProps;
    }).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {
          return;
        }
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null || _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn) => fn(...args)).find((val) => val !== void 0);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const referenceDeps = propsList.map((key) => key == null ? void 0 : key.reference);
  const floatingDeps = propsList.map((key) => key == null ? void 0 : key.floating);
  const itemDeps = propsList.map((key) => key == null ? void 0 : key.item);
  const getReferenceProps = React48.useCallback(
    (userProps) => mergeProps2(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    referenceDeps
  );
  const getFloatingProps = React48.useCallback(
    (userProps) => mergeProps2(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    floatingDeps
  );
  const getItemProps = React48.useCallback(
    (userProps) => mergeProps2(userProps, propsList, "item"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    itemDeps
  );
  return React48.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
var ESCAPE = "Escape";
function doSwitch(orientation, vertical, horizontal) {
  switch (orientation) {
    case "vertical":
      return vertical;
    case "horizontal":
      return horizontal;
    default:
      return vertical || horizontal;
  }
}
function isMainOrientationKey(key, orientation) {
  const vertical = key === ARROW_UP || key === ARROW_DOWN;
  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
  const vertical = key === ARROW_DOWN;
  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal) || key === "Enter" || key === " " || key === "";
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  const horizontal = key === ARROW_DOWN;
  return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl, cols) {
  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
  const horizontal = key === ARROW_UP;
  if (orientation === "both" || orientation === "horizontal" && cols && cols > 1) {
    return key === ESCAPE;
  }
  return doSwitch(orientation, vertical, horizontal);
}
function useListNavigation(context2, props) {
  const {
    open,
    onOpenChange,
    elements
  } = context2;
  const {
    listRef,
    activeIndex,
    onNavigate: unstable_onNavigate = () => {
    },
    enabled = true,
    selectedIndex = null,
    allowEscape = false,
    loop = false,
    nested = false,
    rtl = false,
    virtual = false,
    focusItemOnOpen = "auto",
    focusItemOnHover = true,
    openOnArrowKeyDown = true,
    disabledIndices = void 0,
    orientation = "vertical",
    cols = 1,
    scrollItemIntoView = true,
    virtualItemRef,
    itemSizes,
    dense = false
  } = props;
  if (true) {
    if (allowEscape) {
      if (!loop) {
        warn("`useListNavigation` looping must be enabled to allow escaping.");
      }
      if (!virtual) {
        warn("`useListNavigation` must be virtual to allow escaping.");
      }
    }
    if (orientation === "vertical" && cols > 1) {
      warn("In grid list navigation mode (`cols` > 1), the `orientation` should", 'be either "horizontal" or "both".');
    }
  }
  const floatingFocusElement = getFloatingFocusElement(elements.floating);
  const floatingFocusElementRef = useLatestRef2(floatingFocusElement);
  const parentId = useFloatingParentNodeId();
  const tree = useFloatingTree();
  index2(() => {
    context2.dataRef.current.orientation = orientation;
  }, [context2, orientation]);
  const onNavigate = useEffectEvent(() => {
    unstable_onNavigate(indexRef.current === -1 ? null : indexRef.current);
  });
  const typeableComboboxReference = isTypeableCombobox(elements.domReference);
  const focusItemOnOpenRef = React48.useRef(focusItemOnOpen);
  const indexRef = React48.useRef(selectedIndex != null ? selectedIndex : -1);
  const keyRef = React48.useRef(null);
  const isPointerModalityRef = React48.useRef(true);
  const previousOnNavigateRef = React48.useRef(onNavigate);
  const previousMountedRef = React48.useRef(!!elements.floating);
  const previousOpenRef = React48.useRef(open);
  const forceSyncFocusRef = React48.useRef(false);
  const forceScrollIntoViewRef = React48.useRef(false);
  const disabledIndicesRef = useLatestRef2(disabledIndices);
  const latestOpenRef = useLatestRef2(open);
  const scrollItemIntoViewRef = useLatestRef2(scrollItemIntoView);
  const selectedIndexRef = useLatestRef2(selectedIndex);
  const [activeId, setActiveId] = React48.useState();
  const [virtualId, setVirtualId] = React48.useState();
  const focusItem = useEffectEvent(() => {
    function runFocus(item2) {
      if (virtual) {
        setActiveId(item2.id);
        tree == null || tree.events.emit("virtualfocus", item2);
        if (virtualItemRef) {
          virtualItemRef.current = item2;
        }
      } else {
        enqueueFocus(item2, {
          sync: forceSyncFocusRef.current,
          preventScroll: true
        });
      }
    }
    const initialItem = listRef.current[indexRef.current];
    if (initialItem) {
      runFocus(initialItem);
    }
    const scheduler = forceSyncFocusRef.current ? (v) => v() : requestAnimationFrame;
    scheduler(() => {
      const waitedItem = listRef.current[indexRef.current] || initialItem;
      if (!waitedItem) return;
      if (!initialItem) {
        runFocus(waitedItem);
      }
      const scrollIntoViewOptions = scrollItemIntoViewRef.current;
      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoViewRef.current || !isPointerModalityRef.current);
      if (shouldScrollIntoView) {
        waitedItem.scrollIntoView == null || waitedItem.scrollIntoView(typeof scrollIntoViewOptions === "boolean" ? {
          block: "nearest",
          inline: "nearest"
        } : scrollIntoViewOptions);
      }
    });
  });
  index2(() => {
    if (!enabled) return;
    if (open && elements.floating) {
      if (focusItemOnOpenRef.current && selectedIndex != null) {
        forceScrollIntoViewRef.current = true;
        indexRef.current = selectedIndex;
        onNavigate();
      }
    } else if (previousMountedRef.current) {
      indexRef.current = -1;
      previousOnNavigateRef.current();
    }
  }, [enabled, open, elements.floating, selectedIndex, onNavigate]);
  index2(() => {
    if (!enabled) return;
    if (!open) return;
    if (!elements.floating) return;
    if (activeIndex == null) {
      forceSyncFocusRef.current = false;
      if (selectedIndexRef.current != null) {
        return;
      }
      if (previousMountedRef.current) {
        indexRef.current = -1;
        focusItem();
      }
      if ((!previousOpenRef.current || !previousMountedRef.current) && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
        let runs = 0;
        const waitForListPopulated = () => {
          if (listRef.current[0] == null) {
            if (runs < 2) {
              const scheduler = runs ? requestAnimationFrame : queueMicrotask;
              scheduler(waitForListPopulated);
            }
            runs++;
          } else {
            indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
            keyRef.current = null;
            onNavigate();
          }
        };
        waitForListPopulated();
      }
    } else if (!isIndexOutOfBounds(listRef, activeIndex)) {
      indexRef.current = activeIndex;
      focusItem();
      forceScrollIntoViewRef.current = false;
    }
  }, [enabled, open, elements.floating, activeIndex, selectedIndexRef, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);
  index2(() => {
    var _nodes$find;
    if (!enabled || elements.floating || !tree || virtual || !previousMountedRef.current) {
      return;
    }
    const nodes = tree.nodesRef.current;
    const parent = (_nodes$find = nodes.find((node) => node.id === parentId)) == null || (_nodes$find = _nodes$find.context) == null ? void 0 : _nodes$find.elements.floating;
    const activeEl = activeElement(getDocument(elements.floating));
    const treeContainsActiveEl = nodes.some((node) => node.context && contains(node.context.elements.floating, activeEl));
    if (parent && !treeContainsActiveEl && isPointerModalityRef.current) {
      parent.focus({
        preventScroll: true
      });
    }
  }, [enabled, elements.floating, tree, parentId, virtual]);
  index2(() => {
    if (!enabled) return;
    if (!tree) return;
    if (!virtual) return;
    if (parentId) return;
    function handleVirtualFocus(item2) {
      setVirtualId(item2.id);
      if (virtualItemRef) {
        virtualItemRef.current = item2;
      }
    }
    tree.events.on("virtualfocus", handleVirtualFocus);
    return () => {
      tree.events.off("virtualfocus", handleVirtualFocus);
    };
  }, [enabled, tree, virtual, parentId, virtualItemRef]);
  index2(() => {
    previousOnNavigateRef.current = onNavigate;
    previousOpenRef.current = open;
    previousMountedRef.current = !!elements.floating;
  });
  index2(() => {
    if (!open) {
      keyRef.current = null;
    }
  }, [open]);
  const hasActiveIndex = activeIndex != null;
  const item = React48.useMemo(() => {
    function syncCurrentTarget(currentTarget) {
      if (!open) return;
      const index3 = listRef.current.indexOf(currentTarget);
      if (index3 !== -1 && indexRef.current !== index3) {
        indexRef.current = index3;
        onNavigate();
      }
    }
    const props2 = {
      onFocus(_ref) {
        let {
          currentTarget
        } = _ref;
        forceSyncFocusRef.current = true;
        syncCurrentTarget(currentTarget);
      },
      onClick: (_ref2) => {
        let {
          currentTarget
        } = _ref2;
        return currentTarget.focus({
          preventScroll: true
        });
      },
      // Safari
      ...focusItemOnHover && {
        onMouseMove(_ref3) {
          let {
            currentTarget
          } = _ref3;
          forceSyncFocusRef.current = true;
          forceScrollIntoViewRef.current = false;
          syncCurrentTarget(currentTarget);
        },
        onPointerLeave(_ref4) {
          let {
            pointerType
          } = _ref4;
          if (!isPointerModalityRef.current || pointerType === "touch") {
            return;
          }
          forceSyncFocusRef.current = true;
          indexRef.current = -1;
          onNavigate();
          if (!virtual) {
            var _floatingFocusElement;
            (_floatingFocusElement = floatingFocusElementRef.current) == null || _floatingFocusElement.focus({
              preventScroll: true
            });
          }
        }
      }
    };
    return props2;
  }, [open, floatingFocusElementRef, focusItemOnHover, listRef, onNavigate, virtual]);
  const commonOnKeyDown = useEffectEvent((event) => {
    isPointerModalityRef.current = false;
    forceSyncFocusRef.current = true;
    if (event.which === 229) {
      return;
    }
    if (!latestOpenRef.current && event.currentTarget === floatingFocusElementRef.current) {
      return;
    }
    if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl, cols)) {
      stopEvent(event);
      onOpenChange(false, event.nativeEvent, "list-navigation");
      if (isHTMLElement(elements.domReference)) {
        if (virtual) {
          tree == null || tree.events.emit("virtualfocus", elements.domReference);
        } else {
          elements.domReference.focus();
        }
      }
      return;
    }
    const currentIndex = indexRef.current;
    const minIndex = getMinIndex(listRef, disabledIndices);
    const maxIndex = getMaxIndex(listRef, disabledIndices);
    if (!typeableComboboxReference) {
      if (event.key === "Home") {
        stopEvent(event);
        indexRef.current = minIndex;
        onNavigate();
      }
      if (event.key === "End") {
        stopEvent(event);
        indexRef.current = maxIndex;
        onNavigate();
      }
    }
    if (cols > 1) {
      const sizes = itemSizes || Array.from({
        length: listRef.current.length
      }, () => ({
        width: 1,
        height: 1
      }));
      const cellMap = buildCellMap(sizes, cols, dense);
      const minGridIndex = cellMap.findIndex((index4) => index4 != null && !isDisabled(listRef.current, index4, disabledIndices));
      const maxGridIndex = cellMap.reduce((foundIndex, index4, cellIndex) => index4 != null && !isDisabled(listRef.current, index4, disabledIndices) ? cellIndex : foundIndex, -1);
      const index3 = cellMap[getGridNavigatedIndex({
        current: cellMap.map((itemIndex) => itemIndex != null ? listRef.current[itemIndex] : null)
      }, {
        event,
        orientation,
        loop,
        rtl,
        cols,
        // treat undefined (empty grid spaces) as disabled indices so we
        // don't end up in them
        disabledIndices: getCellIndices([...disabledIndices || listRef.current.map((_, index4) => isDisabled(listRef.current, index4) ? index4 : void 0), void 0], cellMap),
        minIndex: minGridIndex,
        maxIndex: maxGridIndex,
        prevIndex: getCellIndexOfCorner(
          indexRef.current > maxIndex ? minIndex : indexRef.current,
          sizes,
          cellMap,
          cols,
          // use a corner matching the edge closest to the direction
          // we're moving in so we don't end up in the same item. Prefer
          // top/left over bottom/right.
          event.key === ARROW_DOWN ? "bl" : event.key === (rtl ? ARROW_LEFT : ARROW_RIGHT) ? "tr" : "tl"
        ),
        stopEvent: true
      })];
      if (index3 != null) {
        indexRef.current = index3;
        onNavigate();
      }
      if (orientation === "both") {
        return;
      }
    }
    if (isMainOrientationKey(event.key, orientation)) {
      stopEvent(event);
      if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {
        indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
        onNavigate();
        return;
      }
      if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
        if (loop) {
          indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
            startingIndex: currentIndex,
            disabledIndices
          });
        } else {
          indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
            startingIndex: currentIndex,
            disabledIndices
          }));
        }
      } else {
        if (loop) {
          indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
            startingIndex: currentIndex,
            decrement: true,
            disabledIndices
          });
        } else {
          indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
            startingIndex: currentIndex,
            decrement: true,
            disabledIndices
          }));
        }
      }
      if (isIndexOutOfBounds(listRef, indexRef.current)) {
        indexRef.current = -1;
      }
      onNavigate();
    }
  });
  const ariaActiveDescendantProp = React48.useMemo(() => {
    return virtual && open && hasActiveIndex && {
      "aria-activedescendant": virtualId || activeId
    };
  }, [virtual, open, hasActiveIndex, virtualId, activeId]);
  const floating = React48.useMemo(() => {
    return {
      "aria-orientation": orientation === "both" ? void 0 : orientation,
      ...!typeableComboboxReference ? ariaActiveDescendantProp : {},
      onKeyDown: commonOnKeyDown,
      onPointerMove() {
        isPointerModalityRef.current = true;
      }
    };
  }, [ariaActiveDescendantProp, commonOnKeyDown, orientation, typeableComboboxReference]);
  const reference = React48.useMemo(() => {
    function checkVirtualMouse(event) {
      if (focusItemOnOpen === "auto" && isVirtualClick(event.nativeEvent)) {
        focusItemOnOpenRef.current = true;
      }
    }
    function checkVirtualPointer(event) {
      focusItemOnOpenRef.current = focusItemOnOpen;
      if (focusItemOnOpen === "auto" && isVirtualPointerEvent(event.nativeEvent)) {
        focusItemOnOpenRef.current = true;
      }
    }
    return {
      ...ariaActiveDescendantProp,
      onKeyDown(event) {
        var _tree$nodesRef$curren;
        isPointerModalityRef.current = false;
        const isArrowKey = event.key.startsWith("Arrow");
        const isHomeOrEndKey = ["Home", "End"].includes(event.key);
        const isMoveKey = isArrowKey || isHomeOrEndKey;
        const parentOrientation = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.dataRef) == null ? void 0 : _tree$nodesRef$curren.current.orientation;
        const isCrossOpenKey = isCrossOrientationOpenKey(event.key, orientation, rtl);
        const isCrossCloseKey = isCrossOrientationCloseKey(event.key, orientation, rtl, cols);
        const isParentCrossOpenKey = isCrossOrientationOpenKey(event.key, parentOrientation, rtl);
        const isMainKey = isMainOrientationKey(event.key, orientation);
        const isNavigationKey = (nested ? isParentCrossOpenKey : isMainKey) || event.key === "Enter" || event.key.trim() === "";
        if (virtual && open) {
          const rootNode = tree == null ? void 0 : tree.nodesRef.current.find((node) => node.parentId == null);
          const deepestNode = tree && rootNode ? getDeepestNode(tree.nodesRef.current, rootNode.id) : null;
          if (isMoveKey && deepestNode && virtualItemRef) {
            const eventObject = new KeyboardEvent("keydown", {
              key: event.key,
              bubbles: true
            });
            if (isCrossOpenKey || isCrossCloseKey) {
              var _deepestNode$context, _deepestNode$context2;
              const isCurrentTarget = ((_deepestNode$context = deepestNode.context) == null ? void 0 : _deepestNode$context.elements.domReference) === event.currentTarget;
              const dispatchItem = isCrossCloseKey && !isCurrentTarget ? (_deepestNode$context2 = deepestNode.context) == null ? void 0 : _deepestNode$context2.elements.domReference : isCrossOpenKey ? listRef.current.find((item2) => (item2 == null ? void 0 : item2.id) === activeId) : null;
              if (dispatchItem) {
                stopEvent(event);
                dispatchItem.dispatchEvent(eventObject);
                setVirtualId(void 0);
              }
            }
            if ((isMainKey || isHomeOrEndKey) && deepestNode.context) {
              if (deepestNode.context.open && deepestNode.parentId && event.currentTarget !== deepestNode.context.elements.domReference) {
                var _deepestNode$context$;
                stopEvent(event);
                (_deepestNode$context$ = deepestNode.context.elements.domReference) == null || _deepestNode$context$.dispatchEvent(eventObject);
                return;
              }
            }
          }
          return commonOnKeyDown(event);
        }
        if (!open && !openOnArrowKeyDown && isArrowKey) {
          return;
        }
        if (isNavigationKey) {
          const isParentMainKey = isMainOrientationKey(event.key, parentOrientation);
          keyRef.current = nested && isParentMainKey ? null : event.key;
        }
        if (nested) {
          if (isParentCrossOpenKey) {
            stopEvent(event);
            if (open) {
              indexRef.current = getMinIndex(listRef, disabledIndicesRef.current);
              onNavigate();
            } else {
              onOpenChange(true, event.nativeEvent, "list-navigation");
            }
          }
          return;
        }
        if (isMainKey) {
          if (selectedIndex != null) {
            indexRef.current = selectedIndex;
          }
          stopEvent(event);
          if (!open && openOnArrowKeyDown) {
            onOpenChange(true, event.nativeEvent, "list-navigation");
          } else {
            commonOnKeyDown(event);
          }
          if (open) {
            onNavigate();
          }
        }
      },
      onFocus() {
        if (open && !virtual) {
          indexRef.current = -1;
          onNavigate();
        }
      },
      onPointerDown: checkVirtualPointer,
      onPointerEnter: checkVirtualPointer,
      onMouseDown: checkVirtualMouse,
      onClick: checkVirtualMouse
    };
  }, [activeId, ariaActiveDescendantProp, cols, commonOnKeyDown, disabledIndicesRef, focusItemOnOpen, listRef, nested, onNavigate, onOpenChange, open, openOnArrowKeyDown, orientation, parentId, rtl, selectedIndex, tree, virtual, virtualItemRef]);
  return React48.useMemo(() => enabled ? {
    reference,
    floating,
    item
  } : {}, [enabled, reference, floating, item]);
}
var componentRoleToAriaRoleMap = /* @__PURE__ */ new Map([["select", "listbox"], ["combobox", "listbox"], ["label", false]]);
function useRole(context2, props) {
  var _componentRoleToAriaR;
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    floatingId
  } = context2;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
  const referenceId = useId7();
  const parentId = useFloatingParentNodeId();
  const isNested = parentId != null;
  const reference = React48.useMemo(() => {
    if (ariaRole === "tooltip" || role === "label") {
      return {
        ["aria-" + (role === "label" ? "labelledby" : "describedby")]: open ? floatingId : void 0
      };
    }
    return {
      "aria-expanded": open ? "true" : "false",
      "aria-haspopup": ariaRole === "alertdialog" ? "dialog" : ariaRole,
      "aria-controls": open ? floatingId : void 0,
      ...ariaRole === "listbox" && {
        role: "combobox"
      },
      ...ariaRole === "menu" && {
        id: referenceId
      },
      ...ariaRole === "menu" && isNested && {
        role: "menuitem"
      },
      ...role === "select" && {
        "aria-autocomplete": "none"
      },
      ...role === "combobox" && {
        "aria-autocomplete": "list"
      }
    };
  }, [ariaRole, floatingId, isNested, open, referenceId, role]);
  const floating = React48.useMemo(() => {
    const floatingProps = {
      id: floatingId,
      ...ariaRole && {
        role: ariaRole
      }
    };
    if (ariaRole === "tooltip" || role === "label") {
      return floatingProps;
    }
    return {
      ...floatingProps,
      ...ariaRole === "menu" && {
        "aria-labelledby": referenceId
      }
    };
  }, [ariaRole, floatingId, referenceId, role]);
  const item = React48.useCallback((_ref) => {
    let {
      active,
      selected
    } = _ref;
    const commonProps = {
      role: "option",
      ...active && {
        id: floatingId + "-option"
      }
    };
    switch (role) {
      case "select":
        return {
          ...commonProps,
          "aria-selected": active && selected
        };
      case "combobox": {
        return {
          ...commonProps,
          ...active && {
            "aria-selected": true
          }
        };
      }
    }
    return {};
  }, [floatingId, role]);
  return React48.useMemo(() => enabled ? {
    reference,
    floating,
    item
  } : {}, [enabled, reference, floating, item]);
}
function useTypeahead(context2, props) {
  var _ref;
  const {
    open,
    dataRef
  } = context2;
  const {
    listRef,
    activeIndex,
    onMatch: unstable_onMatch,
    onTypingChange: unstable_onTypingChange,
    enabled = true,
    findMatch = null,
    resetMs = 750,
    ignoreKeys = [],
    selectedIndex = null
  } = props;
  const timeoutIdRef = React48.useRef(-1);
  const stringRef = React48.useRef("");
  const prevIndexRef = React48.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);
  const matchIndexRef = React48.useRef(null);
  const onMatch = useEffectEvent(unstable_onMatch);
  const onTypingChange = useEffectEvent(unstable_onTypingChange);
  const findMatchRef = useLatestRef2(findMatch);
  const ignoreKeysRef = useLatestRef2(ignoreKeys);
  index2(() => {
    if (open) {
      clearTimeoutIfSet(timeoutIdRef);
      matchIndexRef.current = null;
      stringRef.current = "";
    }
  }, [open]);
  index2(() => {
    if (open && stringRef.current === "") {
      var _ref2;
      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;
    }
  }, [open, selectedIndex, activeIndex]);
  const setTypingChange = useEffectEvent((value) => {
    if (value) {
      if (!dataRef.current.typing) {
        dataRef.current.typing = value;
        onTypingChange(value);
      }
    } else {
      if (dataRef.current.typing) {
        dataRef.current.typing = value;
        onTypingChange(value);
      }
    }
  });
  const onKeyDown = useEffectEvent((event) => {
    function getMatchingIndex(list, orderedList, string) {
      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find((text) => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);
      return str ? list.indexOf(str) : -1;
    }
    const listContent = listRef.current;
    if (stringRef.current.length > 0 && stringRef.current[0] !== " ") {
      if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {
        setTypingChange(false);
      } else if (event.key === " ") {
        stopEvent(event);
      }
    }
    if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.
    event.key.length !== 1 || // Modifier key.
    event.ctrlKey || event.metaKey || event.altKey) {
      return;
    }
    if (open && event.key !== " ") {
      stopEvent(event);
      setTypingChange(true);
    }
    const allowRapidSuccessionOfFirstLetter = listContent.every((text) => {
      var _text$, _text$2;
      return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;
    });
    if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {
      stringRef.current = "";
      prevIndexRef.current = matchIndexRef.current;
    }
    stringRef.current += event.key;
    clearTimeoutIfSet(timeoutIdRef);
    timeoutIdRef.current = window.setTimeout(() => {
      stringRef.current = "";
      prevIndexRef.current = matchIndexRef.current;
      setTypingChange(false);
    }, resetMs);
    const prevIndex = prevIndexRef.current;
    const index3 = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);
    if (index3 !== -1) {
      onMatch(index3);
      matchIndexRef.current = index3;
    } else if (event.key !== " ") {
      stringRef.current = "";
      setTypingChange(false);
    }
  });
  const reference = React48.useMemo(() => ({
    onKeyDown
  }), [onKeyDown]);
  const floating = React48.useMemo(() => {
    return {
      onKeyDown,
      onKeyUp(event) {
        if (event.key === " ") {
          setTypingChange(false);
        }
      }
    };
  }, [onKeyDown, setTypingChange]);
  return React48.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
function getArgsWithCustomFloatingHeight(state, height) {
  return {
    ...state,
    rects: {
      ...state.rects,
      floating: {
        ...state.rects.floating,
        height
      }
    }
  };
}
var inner = (props) => ({
  name: "inner",
  options: props,
  async fn(state) {
    const {
      listRef,
      overflowRef,
      onFallbackChange,
      offset: innerOffset = 0,
      index: index3 = 0,
      minItemsVisible = 4,
      referenceOverflowThreshold = 0,
      scrollRef,
      ...detectOverflowOptions
    } = evaluate(props, state);
    const {
      rects,
      elements: {
        floating
      }
    } = state;
    const item = listRef.current[index3];
    const scrollEl = (scrollRef == null ? void 0 : scrollRef.current) || floating;
    const clientTop = floating.clientTop || scrollEl.clientTop;
    const floatingIsBordered = floating.clientTop !== 0;
    const scrollElIsBordered = scrollEl.clientTop !== 0;
    const floatingIsScrollEl = floating === scrollEl;
    if (true) {
      if (!state.placement.startsWith("bottom")) {
        warn('`placement` side must be "bottom" when using the `inner`', "middleware.");
      }
    }
    if (!item) {
      return {};
    }
    const nextArgs = {
      ...state,
      ...await offset3(-item.offsetTop - floating.clientTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state)
    };
    const overflow = await detectOverflow2(getArgsWithCustomFloatingHeight(nextArgs, scrollEl.scrollHeight + clientTop + floating.clientTop), detectOverflowOptions);
    const refOverflow = await detectOverflow2(nextArgs, {
      ...detectOverflowOptions,
      elementContext: "reference"
    });
    const diffY = max(0, overflow.top);
    const nextY = nextArgs.y + diffY;
    const isScrollable = scrollEl.scrollHeight > scrollEl.clientHeight;
    const rounder = isScrollable ? (v) => v : round;
    const maxHeight = rounder(max(0, scrollEl.scrollHeight + (floatingIsBordered && floatingIsScrollEl || scrollElIsBordered ? clientTop * 2 : 0) - diffY - max(0, overflow.bottom)));
    scrollEl.style.maxHeight = maxHeight + "px";
    scrollEl.scrollTop = diffY;
    if (onFallbackChange) {
      const shouldFallback = scrollEl.offsetHeight < item.offsetHeight * min(minItemsVisible, listRef.current.length) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold;
      ReactDOM3.flushSync(() => onFallbackChange(shouldFallback));
    }
    if (overflowRef) {
      overflowRef.current = await detectOverflow2(getArgsWithCustomFloatingHeight({
        ...nextArgs,
        y: nextY
      }, scrollEl.offsetHeight + clientTop + floating.clientTop), detectOverflowOptions);
    }
    return {
      y: nextY
    };
  }
});
function useInnerOffset(context2, props) {
  const {
    open,
    elements
  } = context2;
  const {
    enabled = true,
    overflowRef,
    scrollRef,
    onChange: unstable_onChange
  } = props;
  const onChange = useEffectEvent(unstable_onChange);
  const controlledScrollingRef = React48.useRef(false);
  const prevScrollTopRef = React48.useRef(null);
  const initialOverflowRef = React48.useRef(null);
  React48.useEffect(() => {
    if (!enabled) return;
    function onWheel(e) {
      if (e.ctrlKey || !el || overflowRef.current == null) {
        return;
      }
      const dY = e.deltaY;
      const isAtTop = overflowRef.current.top >= -0.5;
      const isAtBottom = overflowRef.current.bottom >= -0.5;
      const remainingScroll = el.scrollHeight - el.clientHeight;
      const sign = dY < 0 ? -1 : 1;
      const method = dY < 0 ? "max" : "min";
      if (el.scrollHeight <= el.clientHeight) {
        return;
      }
      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {
        e.preventDefault();
        ReactDOM3.flushSync(() => {
          onChange((d) => d + Math[method](dY, remainingScroll * sign));
        });
      } else if (/firefox/i.test(getUserAgent())) {
        el.scrollTop += dY;
      }
    }
    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
    if (open && el) {
      el.addEventListener("wheel", onWheel);
      requestAnimationFrame(() => {
        prevScrollTopRef.current = el.scrollTop;
        if (overflowRef.current != null) {
          initialOverflowRef.current = {
            ...overflowRef.current
          };
        }
      });
      return () => {
        prevScrollTopRef.current = null;
        initialOverflowRef.current = null;
        el.removeEventListener("wheel", onWheel);
      };
    }
  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);
  const floating = React48.useMemo(() => ({
    onKeyDown() {
      controlledScrollingRef.current = true;
    },
    onWheel() {
      controlledScrollingRef.current = false;
    },
    onPointerMove() {
      controlledScrollingRef.current = false;
    },
    onScroll() {
      const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
      if (!overflowRef.current || !el || !controlledScrollingRef.current) {
        return;
      }
      if (prevScrollTopRef.current !== null) {
        const scrollDiff = el.scrollTop - prevScrollTopRef.current;
        if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {
          ReactDOM3.flushSync(() => onChange((d) => d + scrollDiff));
        }
      }
      requestAnimationFrame(() => {
        prevScrollTopRef.current = el.scrollTop;
      });
    }
  }), [elements.floating, onChange, overflowRef, scrollRef]);
  return React48.useMemo(() => enabled ? {
    floating
  } : {}, [enabled, floating]);
}
function isPointInPolygon(point, polygon) {
  const [x, y] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i = 0, j = length - 1; i < length; j = i++) {
    const [xi, yi] = polygon[i] || [0, 0];
    const [xj, yj] = polygon[j] || [0, 0];
    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    buffer = 0.5,
    blockPointerEvents = false,
    requireIntent = true
  } = options;
  let timeoutId;
  let hasLanded = false;
  let lastX = null;
  let lastY = null;
  let lastCursorTime = performance.now();
  function getCursorSpeed(x, y) {
    const currentTime = performance.now();
    const elapsedTime = currentTime - lastCursorTime;
    if (lastX === null || lastY === null || elapsedTime === 0) {
      lastX = x;
      lastY = y;
      lastCursorTime = currentTime;
      return null;
    }
    const deltaX = x - lastX;
    const deltaY = y - lastY;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const speed = distance / elapsedTime;
    lastX = x;
    lastY = y;
    lastCursorTime = currentTime;
    return speed;
  }
  const fn = (_ref) => {
    let {
      x,
      y,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return function onMouseMove(event) {
      function close() {
        clearTimeout(timeoutId);
        onClose();
      }
      clearTimeout(timeoutId);
      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains(elements.floating, target);
      const isOverReferenceEl = contains(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      const isFloatingWider = rect.width > refRect.width;
      const isFloatingTaller = rect.height > refRect.height;
      const left = (isFloatingWider ? refRect : rect).left;
      const right = (isFloatingWider ? refRect : rect).right;
      const top = (isFloatingTaller ? refRect : rect).top;
      const bottom = (isFloatingTaller ? refRect : rect).bottom;
      if (isOverFloatingEl) {
        hasLanded = true;
        if (!isLeave) {
          return;
        }
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2) => {
        let {
          context: context2
        } = _ref2;
        return context2 == null ? void 0 : context2.open;
      })) {
        return;
      }
      if (side === "top" && y >= refRect.bottom - 1 || side === "bottom" && y <= refRect.top + 1 || side === "left" && x >= refRect.right - 1 || side === "right" && x <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];
          break;
        case "bottom":
          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];
          break;
        case "left":
          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];
          break;
        case "right":
          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];
          break;
      }
      function getPolygon(_ref3) {
        let [x2, y2] = _ref3;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x2 + buffer + 1, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 + buffer + 1, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x2 - buffer, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 - buffer, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      if (isPointInPolygon([clientX, clientY], rectPoly)) {
        return;
      }
      if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isLeave && requireIntent) {
        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
        const cursorSpeedThreshold = 0.1;
        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
          return close();
        }
      }
      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {
        close();
      } else if (!hasLanded && requireIntent) {
        timeoutId = window.setTimeout(close, 40);
      }
    };
  };
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}

// node_modules/@tamagui/popover/dist/esm/useFloatingContext.mjs
var useFloatingContext = ({
  open,
  setOpen,
  disable,
  disableFocus,
  hoverable
}) => import_react34.default.useCallback((props) => {
  const floating = useFloating3({
    ...props,
    open,
    onOpenChange: (val, event) => {
      const type = (event == null ? void 0 : event.type) === "mousemove" || (event == null ? void 0 : event.type) === "mouseenter" || (event == null ? void 0 : event.type) === "mouseleave" ? "hover" : "press";
      setOpen(val, type);
    }
  }), {
    getReferenceProps,
    getFloatingProps
  } = useInteractions([hoverable ? useHover(floating.context, {
    enabled: !disable && hoverable,
    handleClose: safePolygon({
      requireIntent: true,
      blockPointerEvents: true,
      buffer: 1
    }),
    ...hoverable && typeof hoverable == "object" && hoverable
  }) : useHover(floating.context, {
    enabled: false
  }), useFocus(floating.context, {
    enabled: !disable && !disableFocus,
    visibleOnly: true
  }), useRole(floating.context, {
    role: "dialog"
  }), useDismiss(floating.context, {
    enabled: !disable
  })]);
  return {
    ...floating,
    open,
    getReferenceProps,
    getFloatingProps
  };
}, [open, setOpen, disable, disableFocus, hoverable]);

// node_modules/@tamagui/popover/dist/esm/Popover.mjs
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var POPOVER_SCOPE = "PopoverScope";
var PopoverContext = createStyledContext({});
var usePopoverContext = PopoverContext.useStyledContext;
var PopoverAnchor = React50.forwardRef(function(props, forwardedRef) {
  const {
    __scopePopover,
    ...rest
  } = props, context2 = usePopoverContext(__scopePopover), {
    onCustomAnchorAdd,
    onCustomAnchorRemove
  } = context2 || {};
  return React50.useEffect(() => (onCustomAnchorAdd(), () => onCustomAnchorRemove()), [onCustomAnchorAdd, onCustomAnchorRemove]), (0, import_jsx_runtime35.jsx)(PopperAnchor, {
    __scopePopper: __scopePopover || POPOVER_SCOPE,
    ...rest,
    ref: forwardedRef
  });
});
var PopoverTrigger = React50.forwardRef(function(props, forwardedRef) {
  const {
    __scopePopover,
    ...rest
  } = props, context2 = usePopoverContext(__scopePopover), anchorTo = context2.anchorTo, composedTriggerRef = useComposedRefs(forwardedRef, context2.triggerRef);
  if (!props.children) return null;
  const trigger = (0, import_jsx_runtime35.jsx)(View2, {
    "aria-expanded": context2.open,
    "data-state": getState5(context2.open),
    ...rest,
    ref: composedTriggerRef,
    onPress: composeEventHandlers(props.onPress, context2.onOpenToggle)
  }), virtualRef = React50.useMemo(() => anchorTo ? {
    current: {
      getBoundingClientRect: () => isWeb ? DOMRect.fromRect(anchorTo) : anchorTo,
      ...!isWeb && {
        measure: (c) => c(anchorTo == null ? void 0 : anchorTo.x, anchorTo == null ? void 0 : anchorTo.y, anchorTo == null ? void 0 : anchorTo.width, anchorTo == null ? void 0 : anchorTo.height),
        measureInWindow: (c) => c(anchorTo == null ? void 0 : anchorTo.x, anchorTo == null ? void 0 : anchorTo.y, anchorTo == null ? void 0 : anchorTo.width, anchorTo == null ? void 0 : anchorTo.height)
      }
    }
  } : null, [context2.anchorTo, anchorTo == null ? void 0 : anchorTo.x, anchorTo == null ? void 0 : anchorTo.y, anchorTo == null ? void 0 : anchorTo.x, anchorTo == null ? void 0 : anchorTo.height, anchorTo == null ? void 0 : anchorTo.width]);
  return context2.hasCustomAnchor ? trigger : (0, import_jsx_runtime35.jsx)(PopperAnchor, {
    ...virtualRef && {
      virtualRef
    },
    __scopePopper: __scopePopover || POPOVER_SCOPE,
    asChild: rest.asChild,
    children: trigger
  });
});
var PopoverContent = PopperContentFrame.extractable(React50.forwardRef(function(props, forwardedRef) {
  const {
    allowPinchZoom,
    trapFocus,
    disableRemoveScroll = true,
    zIndex,
    __scopePopover,
    ...contentImplProps
  } = props, context2 = usePopoverContext(__scopePopover), contentRef = React50.useRef(null), composedRefs = useComposedRefs(forwardedRef, contentRef), isRightClickOutsideRef = React50.useRef(false), [isFullyHidden, setIsFullyHidden] = React50.useState(!context2.open);
  return context2.open && isFullyHidden && setIsFullyHidden(false), React50.useEffect(() => {
    if (!context2.open) return;
    const content = contentRef.current;
    if (content) return hideOthers2(content);
  }, [context2.open]), !context2.keepChildrenMounted && isFullyHidden ? null : (0, import_jsx_runtime35.jsx)(PopoverContentPortal, {
    __scopePopover,
    zIndex,
    children: (0, import_jsx_runtime35.jsx)(Stack2, {
      pointerEvents: context2.open ? contentImplProps.pointerEvents ?? "auto" : "none",
      children: (0, import_jsx_runtime35.jsx)(PopoverContentImpl, {
        ...contentImplProps,
        disableRemoveScroll,
        ref: composedRefs,
        setIsFullyHidden,
        __scopePopover,
        trapFocus: trapFocus ?? context2.open,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: props.onCloseAutoFocus === false ? void 0 : composeEventHandlers(props.onCloseAutoFocus, (event) => {
          var _a;
          event.defaultPrevented || (event.preventDefault(), isRightClickOutsideRef.current || ((_a = context2.triggerRef.current) == null ? void 0 : _a.focus()));
        }),
        onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
          const originalEvent = event.detail.originalEvent, ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true, isRightClick = originalEvent.button === 2 || ctrlLeftClick;
          isRightClickOutsideRef.current = isRightClick;
        }, {
          checkDefaultPrevented: false
        }),
        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event) => event.preventDefault(), {
          checkDefaultPrevented: false
        })
      })
    })
  });
}));
function PopoverRepropagateContext(props) {
  return (0, import_jsx_runtime35.jsx)(PopperContext.Provider, {
    scope: props.scope,
    ...props.popperContext,
    children: (0, import_jsx_runtime35.jsx)(PopoverContext.Provider, {
      ...props.context,
      children: (0, import_jsx_runtime35.jsx)(ProvideAdaptContext, {
        ...props.adaptContext,
        children: props.children
      })
    })
  });
}
function PopoverContentPortal(props) {
  const {
    __scopePopover
  } = props, zIndex = props.zIndex, context2 = usePopoverContext(__scopePopover), popperContext = usePopperContext(__scopePopover || POPOVER_SCOPE), themeName = useThemeName(), adaptContext = useAdaptContext();
  let contents = props.children;
  return (Platform_default.OS === "android" || Platform_default.OS === "ios") && (contents = (0, import_jsx_runtime35.jsx)(PopoverRepropagateContext, {
    scope: __scopePopover || POPOVER_SCOPE,
    popperContext,
    context: context2,
    adaptContext,
    children: props.children
  })), (0, import_jsx_runtime35.jsx)(Portal, {
    stackZIndex: true,
    zIndex,
    children: (0, import_jsx_runtime35.jsxs)(Theme, {
      forceClassName: true,
      name: themeName,
      children: [!!context2.open && !context2.breakpointActive && (0, import_jsx_runtime35.jsx)(YStack, {
        fullscreen: true,
        onPress: composeEventHandlers(props.onPress, context2.onOpenToggle)
      }), (0, import_jsx_runtime35.jsx)(StackZIndexContext, {
        zIndex: resolveViewZIndex(zIndex),
        children: contents
      })]
    })
  });
}
var PopoverContentImpl = React50.forwardRef(function(props, forwardedRef) {
  const {
    trapFocus,
    __scopePopover,
    onOpenAutoFocus,
    onCloseAutoFocus,
    disableOutsidePointerEvents,
    disableFocusScope,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    children,
    disableRemoveScroll,
    freezeContentsWhenHidden,
    setIsFullyHidden,
    ...contentProps
  } = props, context2 = usePopoverContext(__scopePopover), {
    open,
    keepChildrenMounted
  } = context2, popperContext = usePopperContext(__scopePopover || POPOVER_SCOPE), handleExitComplete = React50.useCallback(() => {
    setIsFullyHidden == null ? void 0 : setIsFullyHidden(true);
  }, [setIsFullyHidden]);
  let contents = (0, import_jsx_runtime35.jsx)(ResetPresence, {
    children
  });
  if (context2.breakpointActive) {
    const childrenWithoutScrollView = React50.Children.toArray(children).map((child) => React50.isValidElement(child) && child.type === ScrollView_default ? child.props.children : child);
    return (0, import_jsx_runtime35.jsx)(AdaptPortalContents, {
      children: (0, import_jsx_runtime35.jsx)(PopperContext.Provider, {
        scope: __scopePopover || POPOVER_SCOPE,
        ...popperContext,
        children: childrenWithoutScrollView
      })
    });
  }
  return contents = (0, import_jsx_runtime35.jsx)(RemoveScroll2, {
    enabled: disableRemoveScroll ? false : open,
    allowPinchZoom: true,
    removeScrollBar: false,
    style: dspContentsStyle,
    children: (0, import_jsx_runtime35.jsx)(FocusScope, {
      loop: true,
      enabled: disableFocusScope ? false : open,
      trapped: trapFocus,
      onMountAutoFocus: onOpenAutoFocus,
      onUnmountAutoFocus: onCloseAutoFocus === false ? void 0 : onCloseAutoFocus,
      children: (0, import_jsx_runtime35.jsx)("div", {
        style: dspContentsStyle,
        children: contents
      })
    })
  }), (0, import_jsx_runtime35.jsx)(Animate, {
    type: "presence",
    present: !!open,
    keepChildrenMounted,
    onExitComplete: handleExitComplete,
    children: (0, import_jsx_runtime35.jsx)(PopperContent, {
      __scopePopper: __scopePopover || POPOVER_SCOPE,
      "data-state": getState5(open),
      id: context2.contentId,
      ref: forwardedRef,
      ...contentProps,
      children: contents
    }, context2.contentId)
  });
});
var dspContentsStyle = {
  display: "contents"
};
var PopoverClose = React50.forwardRef(function(props, forwardedRef) {
  const {
    __scopePopover,
    ...rest
  } = props, context2 = usePopoverContext(__scopePopover);
  return (0, import_jsx_runtime35.jsx)(YStack, {
    ...rest,
    ref: forwardedRef,
    componentName: "PopoverClose",
    onPress: composeEventHandlers(props.onPress, () => context2.onOpenChange(false, "press"))
  });
});
var PopoverArrow = PopperArrow.styleable(function(props, forwardedRef) {
  const {
    __scopePopover,
    ...rest
  } = props;
  return useAdaptIsActive() ? null : (0, import_jsx_runtime35.jsx)(PopperArrow, {
    __scopePopper: __scopePopover || POPOVER_SCOPE,
    componentName: "PopoverArrow",
    ...rest,
    ref: forwardedRef
  });
});
var Popover = withStaticProperties(React50.forwardRef(function(props, ref) {
  const id = React50.useId();
  return (0, import_jsx_runtime35.jsx)(AdaptParent, {
    scope: `${id}PopoverContents`,
    portal: true,
    children: (0, import_jsx_runtime35.jsx)(PopoverInner, {
      ref,
      id,
      ...props
    })
  });
}), {
  Anchor: PopoverAnchor,
  Arrow: PopoverArrow,
  Trigger: PopoverTrigger,
  Content: PopoverContent,
  Close: PopoverClose,
  Adapt,
  ScrollView: ScrollView_default,
  Sheet: Sheet.Controlled
});
var PopoverInner = React50.forwardRef(function(props, forwardedRef) {
  const {
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    __scopePopover,
    keepChildrenMounted,
    hoverable,
    disableFocus,
    id,
    ...restProps
  } = props, triggerRef = React50.useRef(null), [hasCustomAnchor, setHasCustomAnchor] = React50.useState(false), viaRef = React50.useRef(), [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen || false,
    onChange: (val) => {
      onOpenChange == null ? void 0 : onOpenChange(val, viaRef.current);
    }
  }), handleOpenChange = useEvent((val, via) => {
    viaRef.current = via, setOpen(val);
  }), isAdapted = useAdaptIsActive(), floatingContext = useFloatingContext({
    open,
    setOpen: handleOpenChange,
    disable: isAdapted,
    hoverable,
    disableFocus
  }), [anchorTo, setAnchorToRaw] = React50.useState(), setAnchorTo = createShallowSetState(setAnchorToRaw);
  React50.useImperativeHandle(forwardedRef, () => ({
    anchorTo: setAnchorTo,
    toggle: () => setOpen((prev) => !prev),
    open: () => setOpen(true),
    close: () => setOpen(false),
    setOpen
  }));
  const popoverContext = {
    id,
    contentId: React50.useId(),
    triggerRef,
    open,
    breakpointActive: isAdapted,
    onOpenChange: handleOpenChange,
    onOpenToggle: useEvent(() => {
      open && isAdapted || setOpen(!open);
    }),
    hasCustomAnchor,
    anchorTo,
    onCustomAnchorAdd: React50.useCallback(() => setHasCustomAnchor(true), []),
    onCustomAnchorRemove: React50.useCallback(() => setHasCustomAnchor(false), []),
    keepChildrenMounted
  }, contents = (0, import_jsx_runtime35.jsx)(Popper, {
    __scopePopper: __scopePopover || POPOVER_SCOPE,
    stayInFrame: true,
    ...restProps,
    children: (0, import_jsx_runtime35.jsx)(PopoverContext.Provider, {
      scope: __scopePopover,
      ...popoverContext,
      children: (0, import_jsx_runtime35.jsx)(PopoverSheetController, {
        onOpenChange: setOpen,
        children
      })
    })
  });
  return (0, import_jsx_runtime35.jsx)(import_jsx_runtime35.Fragment, {
    children: isWeb ? (0, import_jsx_runtime35.jsx)(FloatingOverrideContext.Provider, {
      value: floatingContext,
      children: contents
    }) : contents
  });
});
function getState5(open) {
  return open ? "open" : "closed";
}
var PopoverSheetController = ({
  __scopePopover,
  ...props
}) => {
  const context2 = usePopoverContext(__scopePopover), showSheet = useShowPopoverSheet(context2), breakpointActive = context2.breakpointActive, getShowSheet = useGet(showSheet);
  return (0, import_jsx_runtime35.jsx)(SheetController, {
    onOpenChange: (val) => {
      var _a;
      getShowSheet() && ((_a = props.onOpenChange) == null ? void 0 : _a.call(props, val));
    },
    open: context2.open,
    hidden: breakpointActive === false,
    children: props.children
  });
};
var useShowPopoverSheet = (context2) => {
  const isAdapted = useAdaptIsActive();
  return context2.open === false ? false : isAdapted;
};

// node_modules/@tamagui/progress/dist/esm/Progress.mjs
var React51 = __toESM(require_react(), 1);
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var PROGRESS_NAME = "Progress";
var [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);
var [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);
var INDICATOR_NAME2 = "ProgressIndicator";
var ProgressIndicatorFrame = styled(ThemeableStack, {
  name: INDICATOR_NAME2,
  variants: {
    unstyled: {
      false: {
        height: "100%",
        width: "100%",
        backgrounded: true
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ProgressIndicator = ProgressIndicatorFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeProgress,
    animation,
    ...indicatorProps
  } = props, context2 = useProgressContext(INDICATOR_NAME2, __scopeProgress), pct = context2.max - (context2.value ?? 0), x = -(context2.width === 0 ? 300 : context2.width) * (pct / 100);
  return (0, import_jsx_runtime36.jsx)(ProgressIndicatorFrame, {
    "data-state": getProgressState(context2.value, context2.max),
    "data-value": context2.value ?? void 0,
    "data-max": context2.max,
    x,
    width: context2.width,
    ...!props.unstyled && {
      animateOnly: ["transform"],
      opacity: context2.width === 0 ? 0 : 1
    },
    ...indicatorProps,
    ref: forwardedRef,
    animation: context2.width ? animation : null
  });
});
function defaultGetValueLabel(value, max2) {
  return `${Math.round(value / max2 * 100)}%`;
}
function getProgressState(value, maxValue) {
  return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
function isNumber(value) {
  return typeof value == "number";
}
function isValidMaxNumber(max2) {
  return isNumber(max2) && !Number.isNaN(max2) && max2 > 0;
}
function isValidValueNumber(value, max2) {
  return isNumber(value) && !Number.isNaN(value) && value <= max2 && value >= 0;
}
var DEFAULT_MAX = 100;
var ProgressFrame = styled(ThemeableStack, {
  name: "Progress",
  variants: {
    unstyled: {
      false: {
        borderRadius: 1e5,
        overflow: "hidden",
        backgrounded: true
      }
    },
    size: {
      "...size": (val) => {
        const size4 = Math.round(getVariableValue(getSize(val)) * 0.25);
        return {
          height: size4,
          minWidth: getVariableValue(size4) * 20,
          width: "100%"
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var Progress = withStaticProperties(ProgressFrame.styleable(function(props, forwardedRef) {
  const {
    // @ts-expect-error
    __scopeProgress,
    value: valueProp,
    max: maxProp,
    getValueLabel = defaultGetValueLabel,
    size: size4 = "$true",
    ...progressProps
  } = props, max2 = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX, value = isValidValueNumber(valueProp, max2) ? valueProp : null, valueLabel = isNumber(value) ? getValueLabel(value, max2) : void 0, [width, setWidth] = React51.useState(0);
  return (0, import_jsx_runtime36.jsx)(ProgressProvider, {
    scope: __scopeProgress,
    value,
    max: max2,
    width,
    children: (0, import_jsx_runtime36.jsx)(ProgressFrame, {
      "aria-valuemax": max2,
      "aria-valuemin": 0,
      "aria-valuenow": isNumber(value) ? value : void 0,
      "aria-valuetext": valueLabel,
      role: "progressbar",
      "data-state": getProgressState(value, max2),
      "data-value": value ?? void 0,
      "data-max": max2,
      ...progressProps.unstyled !== true && {
        size: size4
      },
      ...progressProps,
      onLayout: (e) => {
        var _a;
        setWidth(e.nativeEvent.layout.width), (_a = progressProps.onLayout) == null ? void 0 : _a.call(progressProps, e);
      },
      ref: forwardedRef
    })
  });
}), {
  Indicator: ProgressIndicator
});

// node_modules/@tamagui/radio-group/dist/esm/RadioGroup.mjs
var RADIO_GROUP_ITEM_NAME = "RadioGroupItem";
var RadioGroupItemFrame = styled(ThemeableStack, {
  name: RADIO_GROUP_ITEM_NAME,
  tag: "button",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        borderRadius: 1e3,
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        borderWidth: 1,
        borderColor: "$borderColor",
        padding: 0,
        hoverStyle: {
          borderColor: "$borderColorHover",
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          borderColor: "$borderColorHover",
          backgroundColor: "$backgroundHover"
        },
        focusVisibleStyle: {
          outlineStyle: "solid",
          outlineWidth: 2,
          outlineColor: "$outlineColor"
        },
        pressStyle: {
          borderColor: "$borderColorFocus",
          backgroundColor: "$backgroundFocus"
        }
      }
    },
    disabled: {
      true: {
        pointerEvents: "none",
        userSelect: "none",
        cursor: "not-allowed",
        hoverStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$background"
        },
        pressStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$background"
        },
        focusVisibleStyle: {
          outlineWidth: 0
        }
      }
    },
    size: {
      "...size": (value, {
        props
      }) => {
        const size4 = Math.floor(getVariableValue(getSize(value)) * (props.scaleSize ?? 0.5));
        return {
          width: size4,
          height: size4
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var RADIO_GROUP_INDICATOR_NAME = "RadioGroupIndicator";
var RadioGroupIndicatorFrame = styled(ThemeableStack, {
  name: RADIO_GROUP_INDICATOR_NAME,
  variants: {
    unstyled: {
      false: {
        width: "33%",
        height: "33%",
        borderRadius: 1e3,
        backgroundColor: "$color",
        pressTheme: true
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var RADIO_GROUP_NAME = "RadioGroup";
var RadioGroupFrame = styled(ThemeableStack, {
  name: RADIO_GROUP_NAME,
  variants: {
    orientation: {
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      },
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      }
    }
  }
});

// node_modules/@tamagui/radio-group/dist/esm/createRadioGroup.mjs
var import_react38 = __toESM(require_react(), 1);

// node_modules/@tamagui/radio-headless/dist/esm/useRadioGroup.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/@tamagui/radio-headless/dist/esm/BubbleInput.mjs
var import_react36 = __toESM(require_react(), 1);
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var BubbleInput2 = (props) => {
  const {
    checked,
    bubbles = true,
    control,
    isHidden: isHidden4,
    accentColor,
    ...inputProps
  } = props, ref = import_react36.default.useRef(null), prevChecked = usePrevious(checked);
  return import_react36.default.useEffect(() => {
    const input = ref.current, inputProto = window.HTMLInputElement.prototype, setChecked = Object.getOwnPropertyDescriptor(inputProto, "checked").set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", {
        bubbles
      });
      setChecked.call(input, checked), input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]), (0, import_jsx_runtime37.jsx)("input", {
    type: "radio",
    defaultChecked: checked,
    ...inputProps,
    tabIndex: -1,
    ref,
    "aria-hidden": isHidden4,
    style: {
      ...isHidden4 ? {
        // ...controlSize,
        position: "absolute",
        pointerEvents: "none",
        opacity: 0,
        margin: 0
      } : {
        appearance: "auto",
        accentColor
      },
      ...props.style
    }
  });
};

// node_modules/@tamagui/radio-headless/dist/esm/utils.mjs
function getState6(checked) {
  return checked ? "checked" : "unchecked";
}

// node_modules/@tamagui/radio-headless/dist/esm/useRadioGroup.mjs
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
function useRadioGroup(params) {
  const {
    value: valueProp,
    onValueChange,
    defaultValue,
    required,
    disabled,
    name,
    native,
    accentColor,
    orientation,
    ref
  } = params, [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  });
  return {
    providerValue: {
      value,
      onChange: setValue,
      required,
      disabled,
      name,
      native,
      accentColor
    },
    frameAttrs: {
      role: "radiogroup",
      "aria-orientation": orientation,
      "data-disabled": disabled ? "" : void 0
    },
    rovingFocusGroupAttrs: {
      orientation,
      loop: true
    }
  };
}
var ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var useRadioGroupItem = (params) => {
  const {
    radioGroupContext,
    value,
    labelledBy: ariaLabelledby,
    disabled: itemDisabled,
    ref: refProp,
    id,
    onPress,
    onKeyDown,
    onFocus
  } = params, {
    value: groupValue,
    disabled,
    required,
    onChange,
    name,
    native,
    accentColor
  } = (0, import_react37.useContext)(radioGroupContext), [button, setButton] = (0, import_react37.useState)(null), hasConsumerStoppedPropagationRef = (0, import_react37.useRef)(false), ref = (0, import_react37.useRef)(null), composedRefs = useComposedRefs(refProp, (node) => setButton(node), ref), isArrowKeyPressedRef = (0, import_react37.useRef)(false), isFormControl = isWeb ? button ? !!button.closest("form") : true : false, checked = groupValue === value, labelId = useLabelContext(button), labelledBy = ariaLabelledby || labelId;
  (0, import_react37.useEffect)(() => {
    if (isWeb) {
      const handleKeyDown = (event) => {
        ARROW_KEYS.includes(event.key) && (isArrowKeyPressedRef.current = true);
      }, handleKeyUp = () => {
        isArrowKeyPressedRef.current = false;
      };
      return document.addEventListener("keydown", handleKeyDown), document.addEventListener("keyup", handleKeyUp), () => {
        document.removeEventListener("keydown", handleKeyDown), document.removeEventListener("keyup", handleKeyUp);
      };
    }
  }, []);
  const isDisabled2 = disabled || itemDisabled;
  return {
    providerValue: {
      checked
    },
    checked,
    isFormControl,
    bubbleInput: (0, import_jsx_runtime38.jsx)(BubbleInput2, {
      isHidden: !native,
      control: button,
      bubbles: !hasConsumerStoppedPropagationRef.current,
      name,
      value,
      checked,
      required,
      disabled: isDisabled2,
      ...isWeb && native && {
        accentColor,
        id
      }
    }),
    native,
    frameAttrs: {
      "data-state": getState6(checked),
      "data-disabled": isDisabled2 ? "" : void 0,
      role: "radio",
      "aria-labelledby": labelledBy,
      "aria-checked": checked,
      "aria-required": required,
      disabled: isDisabled2,
      ref: composedRefs,
      ...isWeb && {
        type: "button",
        value
      },
      id,
      onPress: composeEventHandlers(onPress, (event) => {
        checked || (onChange == null ? void 0 : onChange(value)), isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
      }),
      ...isWeb && {
        onKeyDown: composeEventHandlers(onKeyDown, (event) => {
          event.key === "Enter" && event.preventDefault();
        }),
        onFocus: composeEventHandlers(onFocus, () => {
          var _a;
          isArrowKeyPressedRef.current && ((_a = ref.current) == null ? void 0 : _a.click());
        })
      }
    },
    rovingFocusGroupAttrs: {
      asChild: "expect-style",
      focusable: !isDisabled2,
      active: checked
    }
  };
};
function useRadioGroupItemIndicator(params) {
  const {
    radioGroupItemContext,
    disabled,
    ...rest
  } = params, {
    checked
  } = (0, import_react37.useContext)(radioGroupItemContext);
  return {
    checked,
    "data-state": getState6(checked),
    "data-disabled": disabled ? "" : void 0,
    ...rest
  };
}

// node_modules/@tamagui/roving-focus/dist/esm/RovingFocusGroup.mjs
var React53 = __toESM(require_react(), 1);
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
var EVENT_OPTIONS2 = {
  bubbles: false,
  cancelable: true
};
var RovingFocusGroupImpl = React53.forwardRef((props, forwardedRef) => {
  const {
    __scopeRovingFocusGroup,
    orientation,
    loop = false,
    dir,
    currentTabStopId: currentTabStopIdProp,
    defaultCurrentTabStopId,
    onCurrentTabStopIdChange,
    onEntryFocus,
    ...groupProps
  } = props, ref = React53.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), direction = useDirection(dir), [currentTabStopId = null, setCurrentTabStopId] = useControllableState({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId ?? null,
    onChange: onCurrentTabStopIdChange
  }), [isTabbingBackOut, setIsTabbingBackOut] = React53.useState(false), handleEntryFocus = useEvent(onEntryFocus), getItems = useCollection2(__scopeRovingFocusGroup || ROVING_FOCUS_GROUP_CONTEXT), isClickFocusRef = React53.useRef(false), [focusableItemsCount, setFocusableItemsCount] = React53.useState(0);
  return React53.useEffect(() => {
    const node = ref.current;
    if (node) return node.addEventListener(ENTRY_FOCUS, handleEntryFocus), () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
  }, [handleEntryFocus]), (0, import_jsx_runtime39.jsx)(RovingFocusProvider, {
    scope: __scopeRovingFocusGroup,
    orientation,
    dir: direction,
    loop,
    currentTabStopId,
    onItemFocus: React53.useCallback((tabStopId) => setCurrentTabStopId(tabStopId), [setCurrentTabStopId]),
    onItemShiftTab: React53.useCallback(() => setIsTabbingBackOut(true), []),
    onFocusableItemAdd: React53.useCallback(() => setFocusableItemsCount((prevCount) => prevCount + 1), []),
    onFocusableItemRemove: React53.useCallback(() => setFocusableItemsCount((prevCount) => prevCount - 1), []),
    children: (0, import_jsx_runtime39.jsx)(Stack2, {
      tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
      "data-orientation": orientation,
      ...groupProps,
      ref: composedRefs,
      style: [{
        outline: "none"
      }, props.style],
      onMouseDown: composeEventHandlers(props.onMouseDown, () => {
        isClickFocusRef.current = true;
      }),
      onFocus: composeEventHandlers(props.onFocus, (event) => {
        const isKeyboardFocus = !isClickFocusRef.current;
        if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
          const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS2);
          if (event.currentTarget.dispatchEvent(entryFocusEvent), !entryFocusEvent.defaultPrevented) {
            const items = getItems().filter((item) => item.focusable), activeItem = items.find((item) => item.active), currentItem = items.find((item) => item.id === currentTabStopId), candidateNodes = [activeItem, currentItem, ...items].filter(Boolean).map((item) => item.ref.current);
            focusFirst2(candidateNodes);
          }
        }
        isClickFocusRef.current = false;
      }),
      onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
    })
  });
});
var ITEM_NAME2 = "RovingFocusGroupItem";
var RovingFocusGroupItem = React53.forwardRef((props, forwardedRef) => {
  const {
    __scopeRovingFocusGroup,
    focusable = true,
    active = false,
    tabStopId,
    ...itemProps
  } = props, autoId = React53.useId(), id = tabStopId || autoId, context2 = useRovingFocusContext(__scopeRovingFocusGroup), isCurrentTabStop = context2.currentTabStopId === id, getItems = useCollection2(__scopeRovingFocusGroup || ROVING_FOCUS_GROUP_CONTEXT), {
    onFocusableItemAdd,
    onFocusableItemRemove
  } = context2;
  return React53.useEffect(() => {
    if (focusable) return onFocusableItemAdd(), () => onFocusableItemRemove();
  }, [focusable, onFocusableItemAdd, onFocusableItemRemove]), (0, import_jsx_runtime39.jsx)(Collection2.ItemSlot, {
    __scopeCollection: __scopeRovingFocusGroup || ROVING_FOCUS_GROUP_CONTEXT,
    id,
    focusable,
    active,
    children: (0, import_jsx_runtime39.jsx)(Stack2, {
      tabIndex: isCurrentTabStop ? 0 : -1,
      "data-orientation": context2.orientation,
      ...itemProps,
      ref: forwardedRef,
      onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
        focusable ? context2.onItemFocus(id) : event.preventDefault();
      }),
      onFocus: composeEventHandlers(props.onFocus, () => context2.onItemFocus(id)),
      ...isWeb && {
        onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
          if (event.key === "Tab" && event.shiftKey) {
            context2.onItemShiftTab();
            return;
          }
          if (event.target !== event.currentTarget) return;
          const focusIntent = getFocusIntent(event, context2.orientation, context2.dir);
          if (focusIntent !== void 0) {
            event.preventDefault();
            let candidateNodes = getItems().filter((item) => item.focusable).map((item) => item.ref.current);
            if (focusIntent === "last") candidateNodes.reverse();
            else if (focusIntent === "prev" || focusIntent === "next") {
              focusIntent === "prev" && candidateNodes.reverse();
              const currentIndex = candidateNodes.indexOf(event.currentTarget);
              candidateNodes = context2.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
            }
            setTimeout(() => focusFirst2(candidateNodes));
          }
        })
      }
    })
  });
});
RovingFocusGroupItem.displayName = ITEM_NAME2;
var GROUP_NAME2 = "RovingFocusGroup";
var [Collection2, useCollection2] = createCollection(GROUP_NAME2);
var {
  Provider: RovingFocusProvider,
  useStyledContext: useRovingFocusContext
} = createStyledContext();
var ROVING_FOCUS_GROUP_CONTEXT = "RovingFocusGroupContext";
var RovingFocusGroup = withStaticProperties(React53.forwardRef((props, forwardedRef) => (0, import_jsx_runtime39.jsx)(Collection2.Provider, {
  __scopeCollection: props.__scopeRovingFocusGroup || ROVING_FOCUS_GROUP_CONTEXT,
  children: (0, import_jsx_runtime39.jsx)(Collection2.Slot, {
    __scopeCollection: props.__scopeRovingFocusGroup || ROVING_FOCUS_GROUP_CONTEXT,
    children: (0, import_jsx_runtime39.jsx)(RovingFocusGroupImpl, {
      ...props,
      ref: forwardedRef
    })
  })
})), {
  Item: RovingFocusGroupItem
});
RovingFocusGroup.displayName = GROUP_NAME2;
var MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function getDirectionAwareKey(key, dir) {
  return dir !== "rtl" ? key : key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function getFocusIntent(event, orientation, dir) {
  const key = getDirectionAwareKey(event.key, dir);
  if (!(orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key)) && !(orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key))) return MAP_KEY_TO_FOCUS_INTENT[key];
}
function focusFirst2(candidates) {
  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (const candidate of candidates) if (candidate === PREVIOUSLY_FOCUSED_ELEMENT || (candidate.focus(), document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)) return;
}
function wrapArray(array, startIndex) {
  return array.map((_, index3) => array[(startIndex + index3) % array.length]);
}

// node_modules/@tamagui/radio-group/dist/esm/createRadioGroup.mjs
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var ensureContext2 = (x) => {
  x.context || (x.context = RadioGroupContext);
};
var RadioGroupContext = import_react38.default.createContext({});
var RadioGroupItemContext = import_react38.default.createContext({
  checked: false,
  disabled: false
});
function createRadioGroup(createProps) {
  const {
    disableActiveTheme,
    Frame: Frame2 = RadioGroupFrame,
    Indicator = RadioGroupIndicatorFrame,
    Item = RadioGroupItemFrame
  } = createProps;
  ensureContext2(Frame2), ensureContext2(Indicator), ensureContext2(Item);
  const RadioGroupImp = Frame2.styleable((props, ref) => {
    const {
      value,
      defaultValue,
      onValueChange,
      required = false,
      disabled = false,
      name,
      native,
      accentColor,
      orientation = "vertical",
      ...rest
    } = props, {
      providerValue,
      frameAttrs,
      rovingFocusGroupAttrs
    } = useRadioGroup({
      orientation,
      name,
      defaultValue,
      value,
      onValueChange,
      required,
      disabled,
      native,
      accentColor
    });
    return (0, import_jsx_runtime40.jsx)(RadioGroupContext.Provider, {
      value: providerValue,
      children: (0, import_jsx_runtime40.jsx)(RovingFocusGroup, {
        ...rovingFocusGroupAttrs,
        children: (0, import_jsx_runtime40.jsx)(RadioGroupFrame, {
          ...frameAttrs,
          ref,
          ...rest
        })
      })
    });
  }), RadioGroupItemImp = Item.styleable((props, ref) => {
    const {
      value,
      labelledBy,
      onPress,
      //@ts-expect-error
      onKeyDown,
      disabled,
      id,
      ...rest
    } = props, {
      providerValue,
      bubbleInput,
      rovingFocusGroupAttrs,
      frameAttrs,
      isFormControl,
      native
    } = useRadioGroupItem({
      radioGroupContext: RadioGroupContext,
      value,
      id,
      labelledBy,
      disabled,
      onPress,
      onKeyDown
    });
    return (0, import_jsx_runtime40.jsx)(RadioGroupItemContext.Provider, {
      value: providerValue,
      children: isWeb && native ? bubbleInput : (0, import_jsx_runtime40.jsxs)(import_jsx_runtime40.Fragment, {
        children: [(0, import_jsx_runtime40.jsx)(RovingFocusGroup.Item, {
          ...rovingFocusGroupAttrs,
          children: (0, import_jsx_runtime40.jsx)(RadioGroupItemFrame, {
            ...frameAttrs,
            ref,
            ...rest
          })
        }), isFormControl && bubbleInput]
      })
    });
  });
  RadioGroupItemImp.displayName = "RadioGroupItem";
  const RadioIndicator = Indicator.styleable((props, forwardedRef) => {
    const {
      forceMount,
      disabled,
      ...indicatorProps
    } = props, {
      checked,
      ...useIndicatorRest
    } = useRadioGroupItemIndicator({
      radioGroupItemContext: RadioGroupItemContext,
      disabled
    });
    return forceMount || checked ? (0, import_jsx_runtime40.jsx)(Indicator, {
      ...useIndicatorRest,
      ref: forwardedRef,
      ...indicatorProps
    }) : null;
  });
  RadioIndicator.displayName = "RadioIndicator";
  const RadioGroup2 = withStaticProperties(RadioGroupImp, {
    Item: RadioGroupItemImp,
    Indicator: RadioIndicator
  });
  return RadioGroup2.displayName = "RadioGroup", RadioGroup2;
}

// node_modules/@tamagui/radio-group/dist/esm/RadioGroupStyledContext.mjs
var RadioGroupStyledContext = createStyledContext({
  size: "$true",
  scaleIcon: 1
});

// node_modules/@tamagui/radio-group/dist/esm/index.mjs
var RadioGroup = createRadioGroup({
  Frame: RadioGroupFrame,
  Indicator: RadioGroupIndicatorFrame,
  Item: RadioGroupItemFrame
});

// node_modules/@tamagui/separator/dist/esm/Separator.mjs
var Separator = styled(Stack2, {
  name: "Separator",
  borderColor: "$borderColor",
  flexShrink: 0,
  borderWidth: 0,
  flex: 1,
  height: 0,
  maxHeight: 0,
  borderBottomWidth: 1,
  y: -0.5,
  variants: {
    vertical: {
      true: {
        y: 0,
        x: -0.5,
        height: isWeb ? "initial" : "auto",
        // maxHeight auto WILL BE passed to style attribute, but for some reason not used?
        // almost seems like a react or browser bug, but for now `initial` works
        // also, it doesn't happen for `height`, but for consistency using the same values
        maxHeight: isWeb ? "initial" : "auto",
        width: 0,
        maxWidth: 0,
        borderBottomWidth: 0,
        borderRightWidth: 1
      }
    }
  }
});

// node_modules/@tamagui/use-debounce/dist/esm/index.mjs
var React55 = __toESM(require_react(), 1);
function debounce(func, wait, leading) {
  let timeout, isCancelled = false;
  function debounced() {
    isCancelled = false;
    const args = arguments;
    leading && !timeout && func.apply(this, args), clearTimeout(timeout), timeout = setTimeout(() => {
      timeout = null, leading || isCancelled || func.apply(this, args), isCancelled = false;
    }, wait);
  }
  return debounced.cancel = () => {
    isCancelled = true;
  }, debounced;
}
var defaultOpts = {
  leading: false
};
function useDebounce(fn, wait, options = defaultOpts, mountArgs = [fn]) {
  const dbEffect = React55.useRef(null);
  return React55.useEffect(() => () => {
    var _a;
    (_a = dbEffect.current) == null ? void 0 : _a.cancel();
  }, []), React55.useMemo(() => (dbEffect.current = debounce(fn, wait, options.leading), dbEffect.current), [options.leading, ...mountArgs]);
}
function useDebounceValue(val, amt = 0) {
  const [state, setState] = React55.useState(val);
  return React55.useEffect(() => {
    const tm = setTimeout(() => {
      setState((prev) => prev === val ? prev : val);
    }, amt);
    return () => {
      clearTimeout(tm);
    };
  }, [val]), state;
}

// node_modules/@tamagui/select/dist/esm/Select.mjs
var React62 = __toESM(require_react(), 1);

// node_modules/@tamagui/select/dist/esm/constants.mjs
var SELECT_NAME = "Select";
var SCROLL_ARROW_THRESHOLD = 8;
var VIEWPORT_NAME = "SelectViewport";

// node_modules/@tamagui/select/dist/esm/context.mjs
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME);
var [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);
var [createSelectItemParentContext, createSelectItemParentScope] = createContextScope(SELECT_NAME);
var [SelectItemParentProvider, useSelectItemParentContext] = createSelectContext(SELECT_NAME);
var ForwardSelectContext = ({
  __scopeSelect,
  context: context2,
  itemContext,
  children
}) => (0, import_jsx_runtime41.jsx)(SelectProvider, {
  isInSheet: true,
  scope: __scopeSelect,
  ...context2,
  children: (0, import_jsx_runtime41.jsx)(SelectItemParentProvider, {
    scope: __scopeSelect,
    ...itemContext,
    children
  })
});

// node_modules/@tamagui/select/dist/esm/SelectContent.mjs
var import_react39 = __toESM(require_react(), 1);

// node_modules/@tamagui/select/dist/esm/useSelectBreakpointActive.mjs
var useShowSelectSheet = (context2) => {
  const breakpointActive = useAdaptIsActive();
  return context2.open === false ? false : breakpointActive;
};

// node_modules/@tamagui/select/dist/esm/SelectContent.mjs
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var CONTENT_NAME4 = "SelectContent";
var SelectContent = ({
  children,
  __scopeSelect,
  zIndex = 1e3,
  ...focusScopeProps
}) => {
  const context2 = useSelectContext(CONTENT_NAME4, __scopeSelect), itemParentContext = useSelectItemParentContext(CONTENT_NAME4, __scopeSelect), themeName = useThemeName(), showSheet = useShowSelectSheet(context2), contents = (0, import_jsx_runtime42.jsx)(Theme, {
    forceClassName: true,
    name: themeName,
    children
  }), touch = useIsTouchDevice(), overlayStyle = import_react39.default.useMemo(() => ({
    zIndex,
    pointerEvents: context2.open ? "auto" : "none"
  }), [context2.open]);
  return itemParentContext.shouldRenderWebNative ? (0, import_jsx_runtime42.jsx)(import_jsx_runtime42.Fragment, {
    children
  }) : showSheet ? context2.open ? (0, import_jsx_runtime42.jsx)(import_jsx_runtime42.Fragment, {
    children: contents
  }) : null : (0, import_jsx_runtime42.jsx)(FloatingPortal, {
    children: (0, import_jsx_runtime42.jsx)(FloatingOverlay, {
      style: overlayStyle,
      lockScroll: !context2.disablePreventBodyScroll && !!context2.open && !touch,
      children: (0, import_jsx_runtime42.jsx)(FocusScope, {
        loop: true,
        enabled: !!context2.open,
        trapped: true,
        ...focusScopeProps,
        children: contents
      })
    })
  });
};

// node_modules/@tamagui/select/dist/esm/SelectImpl.mjs
var React57 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var SelectInlineImpl = (props) => {
  const {
    __scopeSelect,
    children,
    open = false,
    selectedIndexRef,
    listContentRef
  } = props, selectContext = useSelectContext("SelectSheetImpl", __scopeSelect), selectItemParentContext = useSelectItemParentContext("SelectSheetImpl", __scopeSelect), {
    setActiveIndex,
    selectedIndex,
    activeIndex,
    forceUpdate
  } = selectContext, {
    setOpen,
    setSelectedIndex
  } = selectItemParentContext, [scrollTop, setScrollTop] = React57.useState(0), touch = useIsTouchDevice(), listItemsRef = React57.useRef([]), overflowRef = React57.useRef(null), upArrowRef = React57.useRef(null), downArrowRef = React57.useRef(null), allowSelectRef = React57.useRef(false), allowMouseUpRef = React57.useRef(true), selectTimeoutRef = React57.useRef(), state = React57.useRef({
    isMouseOutside: false,
    isTyping: false
  }), [controlledScrolling, setControlledScrolling] = React57.useState(false), [fallback, setFallback] = React57.useState(false), [innerOffset, setInnerOffset] = React57.useState(0), [blockSelection, setBlockSelection] = React57.useState(false), floatingStyle = React57.useRef({});
  useIsomorphicLayoutEffect(() => {
    queueMicrotask(() => {
      open || (setScrollTop(0), setFallback(false), setActiveIndex(null), setControlledScrolling(false));
    });
  }, [open, setActiveIndex]), isWeb && isClient && useIsomorphicLayoutEffect(() => {
    if (!open) return;
    const mouseUp = (e) => {
      state.current.isMouseOutside && setOpen(false);
    };
    return document.addEventListener("mouseup", mouseUp), () => {
      document.removeEventListener("mouseup", mouseUp);
    };
  }, [open]);
  const {
    x,
    y,
    strategy,
    context: context2,
    refs,
    update
  } = useFloating3({
    open,
    onOpenChange: setOpen,
    placement: "bottom-start",
    whileElementsMounted: autoUpdate,
    // biome-ignore lint/correctness/noConstantCondition: <explanation>
    middleware: [size3({
      apply({
        rects: {
          reference: {
            width
          }
        }
      }) {
        Object.assign(floatingStyle.current, {
          minWidth: width + 8
        }), refs.floating.current && Object.assign(refs.floating.current.style, floatingStyle.current);
      }
    }), inner({
      listRef: listItemsRef,
      overflowRef,
      index: selectedIndex,
      offset: innerOffset,
      onFallbackChange: setFallback,
      padding: 10,
      minItemsVisible: touch ? 10 : 4,
      referenceOverflowThreshold: 20
    }), offset3({
      crossAxis: -5
    })]
  }), floatingRef = refs.floating, showUpArrow = open && scrollTop > SCROLL_ARROW_THRESHOLD, showDownArrow = open && floatingRef.current && scrollTop < floatingRef.current.scrollHeight - floatingRef.current.clientHeight - SCROLL_ARROW_THRESHOLD, isScrollable = showDownArrow || showUpArrow;
  useIsomorphicLayoutEffect(() => (window.addEventListener("resize", update), open && update(), () => window.removeEventListener("resize", update)), [update, open]);
  const onMatch = useEvent((index3) => (open ? setActiveIndex : setSelectedIndex)(index3)), interactionsProps = [useClick(context2, {
    event: "mousedown",
    keyboardHandlers: false
  }), useDismiss(context2, {
    outsidePress: false
  }), useRole(context2, {
    role: "listbox"
  }), useInnerOffset(context2, {
    enabled: !fallback && isScrollable,
    onChange: setInnerOffset,
    overflowRef,
    scrollRef: refs.floating
  }), useListNavigation(context2, {
    listRef: listItemsRef,
    activeIndex: activeIndex || 0,
    selectedIndex,
    onNavigate: setActiveIndex,
    scrollItemIntoView: false
  }), useTypeahead(context2, {
    listRef: listContentRef,
    onMatch,
    selectedIndex,
    activeIndex,
    onTypingChange: (e) => {
      state.current.isTyping = e;
    }
  })], interactions = useInteractions(
    // unfortunately these memos will just always break due to floating-ui context always changing :/
    React57.useMemo(() => interactionsProps, interactionsProps)
  ), interactionsContext = React57.useMemo(() => ({
    ...interactions,
    getReferenceProps() {
      return interactions.getReferenceProps({
        ref: refs.reference,
        className: "SelectTrigger",
        onKeyDown(event) {
          (event.key === "Enter" || event.code === "Space" || event.key === " " && !state.current.isTyping) && (event.preventDefault(), setOpen(true));
        }
      });
    },
    getFloatingProps(props2) {
      return interactions.getFloatingProps({
        ref: refs.floating,
        className: "Select",
        ...props2,
        style: {
          position: strategy,
          top: y ?? "",
          left: x ?? "",
          outline: 0,
          scrollbarWidth: "none",
          ...floatingStyle.current,
          ...props2 == null ? void 0 : props2.style
        },
        onPointerEnter() {
          setControlledScrolling(false), state.current.isMouseOutside = false;
        },
        onPointerLeave() {
          state.current.isMouseOutside = true;
        },
        onPointerMove() {
          state.current.isMouseOutside = false, setControlledScrolling(false);
        },
        onKeyDown() {
          setControlledScrolling(true);
        },
        onContextMenu(e) {
          e.preventDefault();
        },
        onScroll(event) {
          (0, import_react_dom5.flushSync)(() => {
            setScrollTop(event.currentTarget.scrollTop);
          });
        }
      });
    }
  }), [refs.reference.current, x, y, refs.floating.current, interactions]);
  return useIsomorphicLayoutEffect(() => {
    if (open) return selectTimeoutRef.current = setTimeout(() => {
      allowSelectRef.current = true;
    }, 300), () => {
      clearTimeout(selectTimeoutRef.current);
    };
    allowSelectRef.current = false, allowMouseUpRef.current = true, setInnerOffset(0), setFallback(false), setBlockSelection(false);
  }, [open]), useIsomorphicLayoutEffect(() => {
    !open && state.current.isMouseOutside && (state.current.isMouseOutside = false);
  }, [open]), useIsomorphicLayoutEffect(() => {
    function onPointerDown(e) {
      var _a, _b, _c;
      const target = e.target;
      ((_a = refs.floating.current) == null ? void 0 : _a.contains(target)) || ((_b = upArrowRef.current) == null ? void 0 : _b.contains(target)) || ((_c = downArrowRef.current) == null ? void 0 : _c.contains(target)) || (setOpen(false), setControlledScrolling(false));
    }
    if (open) return document.addEventListener("pointerdown", onPointerDown), () => {
      document.removeEventListener("pointerdown", onPointerDown);
    };
  }, [open, refs, setOpen]), React57.useEffect(() => {
    var _a, _b;
    open && controlledScrolling && activeIndex != null && ((_a = listItemsRef.current[activeIndex]) == null ? void 0 : _a.scrollIntoView({
      block: "nearest"
    })), setScrollTop(((_b = refs.floating.current) == null ? void 0 : _b.scrollTop) ?? 0);
  }, [open, refs, controlledScrolling, activeIndex]), React57.useEffect(() => {
    var _a;
    open && fallback && selectedIndex != null && ((_a = listItemsRef.current[selectedIndex]) == null ? void 0 : _a.scrollIntoView({
      block: "nearest"
    }));
  }, [open, fallback, selectedIndex]), useIsomorphicLayoutEffect(() => {
    refs.floating.current && fallback && (refs.floating.current.style.maxHeight = "");
  }, [refs, fallback]), (0, import_jsx_runtime43.jsx)(SelectProvider, {
    scope: __scopeSelect,
    ...selectContext,
    setScrollTop,
    setInnerOffset,
    fallback,
    floatingContext: context2,
    activeIndex,
    canScrollDown: !!showDownArrow,
    canScrollUp: !!showUpArrow,
    controlledScrolling,
    blockSelection,
    upArrowRef,
    downArrowRef,
    update,
    children: (0, import_jsx_runtime43.jsx)(SelectItemParentProvider, {
      scope: __scopeSelect,
      ...selectItemParentContext,
      allowMouseUpRef,
      allowSelectRef,
      dataRef: context2.dataRef,
      interactions: interactionsContext,
      listRef: listItemsRef,
      selectTimeoutRef,
      children
    })
  });
};

// node_modules/@tamagui/select/dist/esm/SelectItem.mjs
var React58 = __toESM(require_react(), 1);
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var ITEM_NAME3 = "SelectItem";
var [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME3);
var SelectItem = ListItemFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeSelect,
    value,
    disabled = false,
    textValue: textValueProp,
    index: index3,
    ...restProps
  } = props, {
    props: listItemProps
  } = useListItem({
    ...!props.unstyled && {
      ellipse: true
    },
    ...restProps
  }), context2 = useSelectItemParentContext(ITEM_NAME3, __scopeSelect), {
    setSelectedIndex,
    listRef,
    setOpen,
    onChange,
    activeIndexSubscribe,
    valueSubscribe,
    allowMouseUpRef,
    allowSelectRef,
    setValueAtIndex,
    selectTimeoutRef,
    dataRef,
    interactions,
    shouldRenderWebNative,
    size: size4,
    onActiveChange,
    initialValue: initialValue2
  } = context2, [isSelected, setSelected] = React58.useState(initialValue2 === value);
  React58.useEffect(() => activeIndexSubscribe((i) => {
    var _a;
    index3 === i && (onActiveChange(value, index3), (_a = listRef == null ? void 0 : listRef.current[index3]) == null ? void 0 : _a.focus());
  }), [index3]), React58.useEffect(() => valueSubscribe((val) => {
    setSelected(val === value);
  }), [value]);
  const textId = React58.useId(), refCallback = React58.useCallback((node) => {
    isWeb && node instanceof HTMLElement && listRef && (listRef.current[index3] = node);
  }, []), composedRefs = useComposedRefs(forwardedRef, refCallback);
  useIsomorphicLayoutEffect(() => {
    setValueAtIndex(index3, value);
  }, [index3, setValueAtIndex, value]);
  function handleSelect() {
    setSelectedIndex(index3), onChange(value), setOpen(false);
  }
  const selectItemProps = React58.useMemo(() => interactions ? interactions.getItemProps({
    onTouchMove() {
      allowSelectRef.current = true, allowMouseUpRef.current = false;
    },
    onTouchEnd() {
      allowSelectRef.current = false, allowMouseUpRef.current = true;
    },
    onKeyDown(event) {
      event.key === "Enter" || event.key === " " && !(dataRef == null ? void 0 : dataRef.current.typing) ? (event.preventDefault(), handleSelect()) : allowSelectRef.current = true;
    },
    onClick() {
      allowSelectRef.current && handleSelect();
    },
    onMouseUp() {
      allowMouseUpRef.current && (allowSelectRef.current && handleSelect(), clearTimeout(selectTimeoutRef.current), selectTimeoutRef.current = setTimeout(() => {
        allowSelectRef.current = true;
      }));
    }
  }) : {
    onPress: handleSelect
  }, [handleSelect]);
  return (0, import_jsx_runtime44.jsx)(SelectItemContextProvider, {
    scope: __scopeSelect,
    value,
    textId: textId || "",
    isSelected,
    children: shouldRenderWebNative ? (0, import_jsx_runtime44.jsx)("option", {
      value,
      children: props.children
    }) : (0, import_jsx_runtime44.jsx)(ListItemFrame, {
      tag: "div",
      componentName: ITEM_NAME3,
      ref: composedRefs,
      "aria-labelledby": textId,
      "aria-selected": isSelected,
      "data-state": isSelected ? "active" : "inactive",
      "aria-disabled": disabled || void 0,
      "data-disabled": disabled ? "" : void 0,
      tabIndex: disabled ? void 0 : -1,
      ...!props.unstyled && {
        backgrounded: true,
        pressTheme: true,
        hoverTheme: true,
        focusTheme: true,
        cursor: "default",
        size: size4,
        outlineOffset: -0.5,
        focusVisibleStyle: {
          outlineColor: "$outlineColor",
          outlineWidth: 1,
          outlineStyle: "solid"
        }
      },
      ...listItemProps,
      ...selectItemProps
    })
  });
}, {
  disableTheme: true
});

// node_modules/@tamagui/select/dist/esm/SelectItemText.mjs
var React59 = __toESM(require_react(), 1);
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var ITEM_TEXT_NAME = "SelectItemText";
var SelectItemTextFrame = styled(SizableText, {
  name: ITEM_TEXT_NAME,
  variants: {
    unstyled: {
      false: {
        userSelect: "none",
        color: "$color",
        ellipse: true
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var SelectItemText = SelectItemTextFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeSelect,
    className,
    ...itemTextProps
  } = props, context2 = useSelectContext(ITEM_TEXT_NAME, __scopeSelect), itemParentContext = useSelectItemParentContext(ITEM_TEXT_NAME, __scopeSelect), ref = React59.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect), contents = React59.useRef();
  return contents.current = (0, import_jsx_runtime45.jsx)(SelectItemTextFrame, {
    className,
    size: itemParentContext.size,
    id: itemContext.textId,
    ...itemTextProps,
    ref: composedRefs
  }), React59.useEffect(() => {
    itemParentContext.initialValue === itemContext.value && !context2.selectedIndex && context2.setSelectedItem(contents.current);
  }, []), React59.useEffect(() => itemParentContext.valueSubscribe((val) => {
    val === itemContext.value && context2.setSelectedItem(contents.current);
  }), [itemContext.value]), itemParentContext.shouldRenderWebNative ? (0, import_jsx_runtime45.jsx)(import_jsx_runtime45.Fragment, {
    children: props.children
  }) : (0, import_jsx_runtime45.jsx)(import_jsx_runtime45.Fragment, {
    children: contents.current
  });
});

// node_modules/@tamagui/select/dist/esm/SelectScrollButton.mjs
var React60 = __toESM(require_react(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
var SelectScrollUpButton = React60.forwardRef((props, forwardedRef) => (0, import_jsx_runtime46.jsx)(SelectScrollButtonImpl, {
  componentName: SCROLL_UP_BUTTON_NAME,
  ...props,
  dir: "up",
  ref: forwardedRef
}));
SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
var SelectScrollDownButton = React60.forwardRef((props, forwardedRef) => (0, import_jsx_runtime46.jsx)(SelectScrollButtonImpl, {
  componentName: SCROLL_DOWN_BUTTON_NAME,
  ...props,
  dir: "down",
  ref: forwardedRef
}));
SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
var SelectScrollButtonImpl = React60.memo(React60.forwardRef((props, forwardedRef) => {
  var _a, _b;
  const {
    __scopeSelect,
    dir,
    componentName,
    ...scrollIndicatorProps
  } = props, {
    forceUpdate,
    open,
    fallback,
    setScrollTop,
    setInnerOffset,
    ...context2
  } = useSelectContext(componentName, __scopeSelect), floatingRef = (_a = context2.floatingContext) == null ? void 0 : _a.refs.floating, statusRef = React60.useRef("idle"), isVisible = context2[dir === "down" ? "canScrollDown" : "canScrollUp"], frameRef = React60.useRef(), {
    x,
    y,
    refs,
    strategy
  } = useFloating3({
    open: open && isVisible,
    strategy: "fixed",
    elements: {
      reference: floatingRef == null ? void 0 : floatingRef.current
    },
    placement: dir === "up" ? "top" : "bottom",
    middleware: [offset3(({
      rects
    }) => -rects.floating.height)],
    whileElementsMounted: (...args) => autoUpdate(...args, {
      animationFrame: true
    })
  }), composedRef = useComposedRefs(forwardedRef, refs.setFloating);
  if (!isVisible) return null;
  const onScroll = (amount) => {
    const floating = floatingRef;
    floating && (fallback ? floating.current && (floating.current.scrollTop -= amount, (0, import_react_dom6.flushSync)(() => {
      var _a2;
      return setScrollTop(((_a2 = floating.current) == null ? void 0 : _a2.scrollTop) ?? 0);
    })) : (0, import_react_dom6.flushSync)(() => setInnerOffset((value) => value - amount)));
  };
  return (0, import_jsx_runtime46.jsx)(YStack, {
    ref: composedRef,
    componentName,
    "aria-hidden": true,
    ...scrollIndicatorProps,
    zIndex: 1e3,
    position: strategy,
    left: x || 0,
    top: y || 0,
    width: `calc(${(((_b = floatingRef == null ? void 0 : floatingRef.current) == null ? void 0 : _b.offsetWidth) ?? 0) - 2}px)`,
    onPointerEnter: () => {
      statusRef.current = "active";
      let prevNow = Date.now();
      function frame() {
        const element = floatingRef == null ? void 0 : floatingRef.current;
        if (element) {
          const currentNow = Date.now(), msElapsed = currentNow - prevNow;
          prevNow = currentNow;
          const pixelsToScroll = msElapsed / 2, remainingPixels = dir === "up" ? element.scrollTop : element.scrollHeight - element.clientHeight - element.scrollTop, scrollRemaining = dir === "up" ? element.scrollTop - pixelsToScroll > 0 : element.scrollTop + pixelsToScroll < element.scrollHeight - element.clientHeight;
          onScroll(dir === "up" ? Math.min(pixelsToScroll, remainingPixels) : Math.max(-pixelsToScroll, -remainingPixels)), scrollRemaining && (frameRef.current = requestAnimationFrame(frame));
        }
      }
      cancelAnimationFrame(frameRef.current), frameRef.current = requestAnimationFrame(frame);
    },
    onPointerLeave: () => {
      statusRef.current = "idle", cancelAnimationFrame(frameRef.current);
    }
  });
}));

// node_modules/@tamagui/select/dist/esm/SelectTrigger.mjs
var React61 = __toESM(require_react(), 1);
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var TRIGGER_NAME5 = "SelectTrigger";
var isPointerCoarse = isWeb && isClient ? window.matchMedia("(pointer:coarse)").matches : true;
var SelectTrigger = React61.forwardRef(function(props, forwardedRef) {
  var _a;
  const {
    __scopeSelect,
    disabled = false,
    unstyled = false,
    ...triggerProps
  } = props, context2 = useSelectContext(TRIGGER_NAME5, __scopeSelect), itemParentContext = useSelectItemParentContext(TRIGGER_NAME5, __scopeSelect), composedRefs = useComposedRefs(forwardedRef, (_a = context2.floatingContext) == null ? void 0 : _a.refs.setReference);
  return itemParentContext.shouldRenderWebNative ? null : (0, import_jsx_runtime47.jsx)(ListItem2, {
    componentName: TRIGGER_NAME5,
    unstyled,
    tag: "button",
    type: "button",
    id: itemParentContext.id,
    ...!unstyled && {
      backgrounded: true,
      radiused: true,
      hoverTheme: true,
      pressTheme: true,
      focusable: true,
      focusVisibleStyle: {
        outlineStyle: "solid",
        outlineWidth: 2,
        outlineColor: "$outlineColor"
      },
      borderWidth: 1,
      size: itemParentContext.size
    },
    "aria-expanded": context2.open,
    "aria-autocomplete": "none",
    dir: context2.dir,
    disabled,
    "data-disabled": disabled ? "" : void 0,
    ...triggerProps,
    ref: composedRefs,
    ...itemParentContext.interactions ? {
      ...itemParentContext.interactions.getReferenceProps(),
      ...isPointerCoarse ? {
        onPress() {
          itemParentContext.setOpen(!context2.open);
        }
      } : {
        onMouseDown() {
          var _a2;
          (_a2 = context2.floatingContext) == null ? void 0 : _a2.update(), itemParentContext.setOpen(!context2.open);
        }
      }
    } : {
      onPress() {
        itemParentContext.setOpen(!context2.open);
      }
    }
  });
});

// node_modules/@tamagui/select/dist/esm/SelectViewport.mjs
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var SelectViewportFrame = styled(ThemeableStack, {
  name: VIEWPORT_NAME,
  variants: {
    unstyled: {
      false: {
        size: "$2",
        backgroundColor: "$background",
        elevate: true,
        bordered: true,
        userSelect: "none",
        outlineWidth: 0
      }
    },
    size: {
      "...size": (val, {
        tokens
      }) => ({
        borderRadius: tokens.radius[val] ?? val
      })
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var SelectViewport = SelectViewportFrame.styleable(function(props, forwardedRef) {
  var _a;
  const {
    __scopeSelect,
    children,
    disableScroll,
    ...viewportProps
  } = props, context2 = useSelectContext(VIEWPORT_NAME, __scopeSelect), itemContext = useSelectItemParentContext(VIEWPORT_NAME, __scopeSelect), isAdapted = useAdaptIsActive();
  if (useIsomorphicLayoutEffect(() => {
    context2.update && context2.update();
  }, [isAdapted]), itemContext.shouldRenderWebNative) return (0, import_jsx_runtime48.jsx)(import_jsx_runtime48.Fragment, {
    children
  });
  if (isAdapted || !isWeb) return (0, import_jsx_runtime48.jsx)(AdaptPortalContents, {
    children: (0, import_jsx_runtime48.jsx)(ForwardSelectContext, {
      __scopeSelect,
      itemContext,
      context: context2,
      children
    })
  });
  if (!itemContext.interactions) return console.warn("No interactions provided to Select, potentially missing Adapt"), null;
  const {
    style,
    // remove this, it was set to "Select" always
    className,
    ...floatingProps
  } = itemContext.interactions.getFloatingProps(), composedRefs = useComposedRefs(forwardedRef, (_a = context2.floatingContext) == null ? void 0 : _a.refs.setFloating);
  return (0, import_jsx_runtime48.jsxs)(import_jsx_runtime48.Fragment, {
    children: [!disableScroll && !props.unstyled && (0, import_jsx_runtime48.jsx)("style", {
      dangerouslySetInnerHTML: {
        __html: selectViewportCSS
      }
    }), (0, import_jsx_runtime48.jsx)(AnimatePresence, {
      children: context2.open ? (0, import_jsx_runtime48.jsx)(FloatingFocusManager, {
        context: context2.floatingContext,
        modal: false,
        children: (0, import_jsx_runtime48.jsx)(SelectViewportFrame, {
          size: itemContext.size,
          role: "presentation",
          ...viewportProps,
          ...style,
          ...floatingProps,
          ...!props.unstyled && {
            overflowY: disableScroll ? void 0 : style.overflow ?? "auto"
          },
          ref: composedRefs,
          children
        }, "select-viewport")
      }) : null
    }), !context2.open && (0, import_jsx_runtime48.jsx)("div", {
      style: {
        display: "none"
      },
      children: props.children
    })]
  });
});
var selectViewportCSS = `
.is_SelectViewport {
  scrollbar-width: none;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
}

.is_SelectViewport::-webkit-scrollbar{
  display:none
}
`;

// node_modules/@tamagui/select/dist/esm/Select.mjs
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var VALUE_NAME = "SelectValue";
var SelectValueFrame = styled(SizableText, {
  name: VALUE_NAME,
  userSelect: "none"
});
var SelectValue = SelectValueFrame.styleable(function({
  __scopeSelect,
  children: childrenProp,
  placeholder,
  ...props
}, forwardedRef) {
  const context2 = useSelectContext(VALUE_NAME, __scopeSelect), itemParentContext = useSelectItemParentContext(VALUE_NAME, __scopeSelect), composedRefs = useComposedRefs(forwardedRef, context2.onValueNodeChange), children = childrenProp ?? context2.selectedItem, selectValueChildren = context2.value == null || context2.value === "" ? placeholder ?? children : children;
  return (0, import_jsx_runtime49.jsx)(SelectValueFrame, {
    ...!props.unstyled && {
      size: itemParentContext.size,
      ellipse: true,
      // we don't want events from the portalled `SelectValue` children to bubble
      // through the item they came from
      pointerEvents: "none"
    },
    ref: composedRefs,
    ...props,
    children: unwrapSelectItem(selectValueChildren)
  });
});
function unwrapSelectItem(selectValueChildren) {
  return React62.Children.map(selectValueChildren, (child) => {
    var _a, _b, _c;
    if (child) {
      if (((_b = (_a = child.type) == null ? void 0 : _a.staticConfig) == null ? void 0 : _b.componentName) === ITEM_TEXT_NAME) return child.props.children;
      if ((_c = child.props) == null ? void 0 : _c.children) return unwrapSelectItem(child.props.children);
    }
    return child;
  });
}
var SelectIcon = styled(XStack, {
  name: "SelectIcon",
  // @ts-ignore
  "aria-hidden": true,
  children: (0, import_jsx_runtime49.jsx)(Paragraph, {
    children: "▼"
  })
});
var ITEM_INDICATOR_NAME = "SelectItemIndicator";
var SelectItemIndicatorFrame = styled(XStack, {
  name: ITEM_TEXT_NAME
});
var SelectItemIndicator = React62.forwardRef((props, forwardedRef) => {
  const {
    __scopeSelect,
    ...itemIndicatorProps
  } = props, context2 = useSelectItemParentContext(ITEM_INDICATOR_NAME, __scopeSelect), itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
  return context2.shouldRenderWebNative ? null : itemContext.isSelected ? (0, import_jsx_runtime49.jsx)(SelectItemIndicatorFrame, {
    "aria-hidden": true,
    ...itemIndicatorProps,
    ref: forwardedRef
  }) : null;
});
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
var GROUP_NAME3 = "SelectGroup";
var [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME3);
var SelectGroupFrame = styled(YStack, {
  name: GROUP_NAME3,
  width: "100%"
});
var NativeSelectTextFrame = styled(SizableText, {
  tag: "select",
  backgroundColor: "$background",
  borderColor: "$borderColor",
  hoverStyle: {
    backgroundColor: "$backgroundHover"
  }
});
var NativeSelectFrame = styled(ThemeableStack, {
  name: "NativeSelect",
  bordered: true,
  userSelect: "none",
  outlineWidth: 0,
  paddingRight: 10,
  variants: {
    size: {
      "...size": (val, extras) => {
        const {
          tokens
        } = extras, paddingHorizontal = getVariableValue(tokens.space[val]);
        return {
          borderRadius: tokens.radius[val] ?? val,
          minHeight: tokens.size[val],
          paddingRight: paddingHorizontal + 20,
          paddingLeft: paddingHorizontal,
          paddingVertical: getSpace(val, {
            shift: -3
          })
        };
      }
    }
  },
  defaultVariants: {
    size: "$2"
  }
});
var SelectGroup = React62.forwardRef((props, forwardedRef) => {
  const {
    __scopeSelect,
    ...groupProps
  } = props, groupId = React62.useId(), context2 = useSelectContext(GROUP_NAME3, __scopeSelect), itemParentContext = useSelectItemParentContext(GROUP_NAME3, __scopeSelect), size4 = itemParentContext.size ?? "$true", nativeSelectRef = React62.useRef(null), content = itemParentContext.shouldRenderWebNative ? (0, import_jsx_runtime49.jsx)(NativeSelectFrame, {
    asChild: true,
    size: size4,
    value: context2.value,
    id: itemParentContext.id,
    children: (0, import_jsx_runtime49.jsx)(NativeSelectTextFrame, {
      onChange: (event) => {
        itemParentContext.onChange(event.currentTarget.value);
      },
      size: size4,
      ref: nativeSelectRef,
      style: {
        color: "var(--color)",
        // @ts-ignore
        appearance: "none"
      },
      children: props.children
    })
  }) : (0, import_jsx_runtime49.jsx)(SelectGroupFrame, {
    role: "group",
    "aria-labelledby": groupId,
    ...groupProps,
    ref: forwardedRef
  });
  return (0, import_jsx_runtime49.jsx)(SelectGroupContextProvider, {
    scope: __scopeSelect,
    id: groupId || "",
    children: content
  });
});
SelectGroup.displayName = GROUP_NAME3;
var LABEL_NAME = "SelectLabel";
var SelectLabel = React62.forwardRef((props, forwardedRef) => {
  const {
    __scopeSelect,
    ...labelProps
  } = props, context2 = useSelectItemParentContext(LABEL_NAME, __scopeSelect), groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
  return context2.shouldRenderWebNative ? null : (0, import_jsx_runtime49.jsx)(ListItem2, {
    tag: "div",
    componentName: LABEL_NAME,
    fontWeight: "800",
    id: groupContext.id,
    size: context2.size,
    ...labelProps,
    ref: forwardedRef
  });
});
SelectLabel.displayName = LABEL_NAME;
var SelectSeparator = styled(Separator, {
  name: "SelectSeparator"
});
var SelectSheetController = (props) => {
  const context2 = useSelectContext("SelectSheetController", props.__scopeSelect), showSheet = useShowSelectSheet(context2), isAdapted = useAdaptIsActive(), getShowSheet = useGet(showSheet);
  return (0, import_jsx_runtime49.jsx)(SheetController, {
    onOpenChange: (val) => {
      getShowSheet() && props.onOpenChange(val);
    },
    open: context2.open,
    hidden: isAdapted === false,
    children: props.children
  });
};
var SelectSheetImpl = (props) => (0, import_jsx_runtime49.jsx)(import_jsx_runtime49.Fragment, {
  children: props.children
});
var Select = withStaticProperties(function(props) {
  const internalId = React62.useId(), scopeKey = props.__scopeSelect ? Object.keys(props.__scopeSelect)[0] ?? internalId : internalId;
  return (0, import_jsx_runtime49.jsx)(AdaptParent, {
    scope: `${scopeKey}SheetContents`,
    portal: true,
    children: (0, import_jsx_runtime49.jsx)(SelectInner, {
      scopeKey,
      ...props
    })
  });
}, {
  Adapt,
  Content: SelectContent,
  Group: SelectGroup,
  Icon: SelectIcon,
  Item: SelectItem,
  ItemIndicator: SelectItemIndicator,
  ItemText: SelectItemText,
  Label: SelectLabel,
  ScrollDownButton: SelectScrollDownButton,
  ScrollUpButton: SelectScrollUpButton,
  Trigger: SelectTrigger,
  Value: SelectValue,
  Viewport: SelectViewport,
  Sheet: Sheet.Controlled
});
function useEmitter() {
  const listeners = React62.useRef();
  listeners.current || (listeners.current = /* @__PURE__ */ new Set());
  const emit = (value) => {
    listeners.current.forEach((l) => l(value));
  }, subscribe2 = React62.useCallback((listener) => (listeners.current.add(listener), () => {
    listeners.current.delete(listener);
  }), []);
  return [emit, subscribe2];
}
function SelectInner(props) {
  const {
    __scopeSelect,
    native,
    children,
    open: openProp,
    defaultOpen,
    onOpenChange,
    value: valueProp,
    defaultValue,
    onValueChange,
    disablePreventBodyScroll,
    size: sizeProp = "$true",
    onActiveChange,
    dir,
    id
  } = props, SelectImpl = useAdaptIsActive() || !isWeb ? SelectSheetImpl : SelectInlineImpl, forceUpdate = React62.useReducer(() => ({}), {})[1], [selectedItem, setSelectedItem] = React62.useState(null), [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: defaultOpen || false,
    onChange: onOpenChange
  }), [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue || "",
    onChange: onValueChange,
    transition: true
  });
  React62.useEffect(() => {
    open && emitValue(value);
  }, [open]), React62.useEffect(() => {
    emitValue(value);
  }, [value]);
  const [activeIndex, setActiveIndex] = React62.useState(0), [emitValue, valueSubscribe] = useEmitter(), [emitActiveIndex, activeIndexSubscribe] = useEmitter(), selectedIndexRef = React62.useRef(null), activeIndexRef = React62.useRef(null), listContentRef = React62.useRef([]), [selectedIndex, setSelectedIndex] = React62.useState(0), [valueNode, setValueNode] = React62.useState(null);
  useIsomorphicLayoutEffect(() => {
    selectedIndexRef.current = selectedIndex, activeIndexRef.current = activeIndex;
  });
  const shouldRenderWebNative = isWeb && (native === true || native === "web" || Array.isArray(native) && native.includes("web")), setActiveIndexDebounced = useDebounce((index3) => {
    setActiveIndex((prev) => prev !== index3 ? (typeof index3 == "number" && emitActiveIndex(index3), index3) : prev);
  }, 1, {}, []);
  return (0, import_jsx_runtime49.jsx)(SelectItemParentProvider, {
    scope: __scopeSelect,
    initialValue: React62.useMemo(() => value, [open]),
    size: sizeProp,
    activeIndexSubscribe,
    valueSubscribe,
    setOpen,
    id,
    onChange: React62.useCallback((val) => {
      setValue(val), emitValue(val);
    }, []),
    onActiveChange: useEvent((...args) => {
      onActiveChange == null ? void 0 : onActiveChange(...args);
    }),
    setSelectedIndex,
    setValueAtIndex: React62.useCallback((index3, value2) => {
      listContentRef.current[index3] = value2;
    }, []),
    shouldRenderWebNative,
    children: (0, import_jsx_runtime49.jsx)(SelectProvider, {
      scope: __scopeSelect,
      disablePreventBodyScroll,
      dir,
      blockSelection: false,
      fallback: false,
      selectedItem,
      setSelectedItem,
      forceUpdate,
      valueNode,
      onValueNodeChange: setValueNode,
      scopeKey: props.scopeKey,
      activeIndex,
      selectedIndex,
      setActiveIndex: setActiveIndexDebounced,
      value,
      open,
      native,
      children: (0, import_jsx_runtime49.jsx)(SelectSheetController, {
        onOpenChange: setOpen,
        __scopeSelect,
        children: shouldRenderWebNative ? children : (0, import_jsx_runtime49.jsx)(SelectImpl, {
          activeIndexRef,
          listContentRef,
          selectedIndexRef,
          ...props,
          open,
          value,
          children
        })
      })
    })
  });
}

// node_modules/@tamagui/slider/dist/esm/Slider.mjs
var React64 = __toESM(require_react(), 1);

// node_modules/@tamagui/slider/dist/esm/constants.mjs
var SLIDER_NAME = "Slider";
var [createSliderContext, createSliderScope] = createContextScope(SLIDER_NAME);
var [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);
var [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
  startEdge: "left",
  endEdge: "right",
  sizeProp: "width",
  size: 0,
  direction: 1
});
var PAGE_KEYS = ["PageUp", "PageDown"];
var ARROW_KEYS2 = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var BACK_KEYS = {
  ltr: ["ArrowDown", "Home", "ArrowLeft", "PageDown"],
  rtl: ["ArrowDown", "Home", "ArrowRight", "PageDown"]
};

// node_modules/@tamagui/slider/dist/esm/helpers.mjs
function getNextSortedValues(prevValues = [], nextValue, atIndex) {
  const nextValues = [...prevValues];
  return nextValues[atIndex] = nextValue, nextValues.sort((a, b) => a - b);
}
function convertValueToPercentage(value, min2, max2) {
  return 100 / (max2 - min2) * (value - min2);
}
function getLabel(index3, totalValues) {
  if (totalValues > 2) return `Value ${index3 + 1} of ${totalValues}`;
  if (totalValues === 2) return ["Minimum", "Maximum"][index3];
}
function getClosestValueIndex(values, nextValue) {
  if (values.length === 1) return 0;
  const distances = values.map((value) => Math.abs(value - nextValue)), closestDistance = Math.min(...distances);
  return distances.indexOf(closestDistance);
}
function getThumbInBoundsOffset(width, left, direction) {
  const quarterWidth = width / 4, offset4 = linearScale([0, 50], [0, quarterWidth]);
  return (quarterWidth - offset4(left) * direction) * direction;
}
function getStepsBetweenValues(values) {
  return values.slice(0, -1).map((value, index3) => values[index3 + 1] - value);
}
function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
  if (minStepsBetweenValues > 0) {
    const stepsBetweenValues = getStepsBetweenValues(values);
    return Math.min(...stepsBetweenValues) >= minStepsBetweenValues;
  }
  return true;
}
function linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1]) return output[0];
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function getDecimalCount(value) {
  return (String(value).split(".")[1] || "").length;
}
function roundValue(value, decimalCount) {
  const rounder = 10 ** decimalCount;
  return Math.round(value * rounder) / rounder;
}

// node_modules/@tamagui/slider/dist/esm/SliderImpl.mjs
var React63 = __toESM(require_react(), 1);
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var SliderFrame = styled(YStack, {
  position: "relative",
  variants: {
    orientation: {
      horizontal: {},
      vertical: {}
    },
    size: (val, extras) => {
      if (!val) return;
      const orientation = extras.props.orientation, size4 = Math.round(getVariableValue(getSize(val)) / 6);
      return orientation === "horizontal" ? {
        height: size4,
        borderRadius: size4,
        justifyContent: "center"
      } : {
        width: size4,
        borderRadius: size4,
        alignItems: "center"
      };
    }
  }
});
var SliderImpl = React63.forwardRef((props, forwardedRef) => {
  const {
    __scopeSlider,
    onSlideStart,
    onSlideMove,
    onSlideEnd,
    onHomeKeyDown,
    onEndKeyDown,
    onStepKeyDown,
    ...sliderProps
  } = props, context2 = useSliderContext(SLIDER_NAME, __scopeSlider);
  return (0, import_jsx_runtime50.jsx)(SliderFrame, {
    size: "$4",
    ...sliderProps,
    "data-orientation": sliderProps.orientation,
    ref: forwardedRef,
    ...isWeb && {
      onKeyDown: (event) => {
        event.key === "Home" ? (onHomeKeyDown(event), event.preventDefault()) : event.key === "End" ? (onEndKeyDown(event), event.preventDefault()) : PAGE_KEYS.concat(ARROW_KEYS2).includes(event.key) && (onStepKeyDown(event), event.preventDefault());
      }
    },
    onMoveShouldSetResponderCapture: () => true,
    onScrollShouldSetResponder: () => true,
    onScrollShouldSetResponderCapture: () => true,
    onMoveShouldSetResponder: () => true,
    onStartShouldSetResponder: () => true,
    onResponderTerminationRequest: () => false,
    onResponderGrant: composeEventHandlers(props.onResponderGrant, (event) => {
      const target = event.target, thumbIndex = context2.thumbs.get(target), isStartingOnThumb = thumbIndex !== void 0;
      isWeb && target instanceof HTMLElement && context2.thumbs.has(target) && target.focus(), !isWeb && isStartingOnThumb && (context2.valueIndexToChangeRef.current = thumbIndex), onSlideStart(event, isStartingOnThumb ? "thumb" : "track");
    }),
    onResponderMove: composeEventHandlers(props.onResponderMove, (event) => {
      event.stopPropagation(), onSlideMove(event);
    }),
    onResponderRelease: composeEventHandlers(props.onResponderRelease, (event) => {
      onSlideEnd(event);
    })
  });
});

// node_modules/@tamagui/slider/dist/esm/Slider.mjs
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var activeSliderMeasureListeners = /* @__PURE__ */ new Set();
isWeb && isClient && (process.env.TAMAGUI_DISABLE_SLIDER_INTERVAL || (setInterval == null ? void 0 : setInterval(
  () => {
    activeSliderMeasureListeners.forEach((cb) => cb());
  },
  // really doesn't need to be super often
  1e3
)));
var SliderHorizontal = React64.forwardRef((props, forwardedRef) => {
  const {
    min: min2,
    max: max2,
    dir,
    onSlideStart,
    onSlideMove,
    onStepKeyDown,
    onSlideEnd,
    ...sliderProps
  } = props, direction = useDirection(dir), isDirectionLTR = direction === "ltr", sliderRef = React64.useRef(null), [state, setState_] = React64.useState(() => ({
    size: 0,
    offset: 0
  })), setState = createShallowSetState(setState_);
  function getValueFromPointer(pointerPosition) {
    const input = [0, state.size];
    return linearScale(input, isDirectionLTR ? [min2, max2] : [max2, min2])(pointerPosition);
  }
  const measure = () => {
    var _a;
    (_a = sliderRef.current) == null ? void 0 : _a.measure((_x, _y, width, _height, pageX, _pageY) => {
      setState({
        size: width,
        offset: pageX
      });
    });
  };
  return isClient && (useOnDebouncedWindowResize(measure), React64.useEffect(() => {
    const node = sliderRef.current;
    if (!node) return;
    let measureTm;
    const debouncedMeasure = () => {
      clearTimeout(measureTm), measureTm = setTimeout(() => {
        measure();
      }, 200);
    }, io = new IntersectionObserver((entries) => {
      debouncedMeasure(), (entries == null ? void 0 : entries[0].isIntersecting) ? activeSliderMeasureListeners.add(debouncedMeasure) : activeSliderMeasureListeners.delete(debouncedMeasure);
    }, {
      root: null,
      // Use the viewport as the container.
      rootMargin: "0px",
      threshold: [0, 0.5, 1]
    });
    return io.observe(node), () => {
      activeSliderMeasureListeners.delete(debouncedMeasure), io.disconnect();
    };
  }, [])), (0, import_jsx_runtime51.jsx)(SliderOrientationProvider, {
    scope: props.__scopeSlider,
    startEdge: isDirectionLTR ? "left" : "right",
    endEdge: isDirectionLTR ? "right" : "left",
    direction: isDirectionLTR ? 1 : -1,
    sizeProp: "width",
    size: state.size,
    children: (0, import_jsx_runtime51.jsx)(SliderImpl, {
      ref: composeRefs(forwardedRef, sliderRef),
      dir: direction,
      ...sliderProps,
      orientation: "horizontal",
      onLayout: measure,
      onSlideStart: (event, target) => {
        const value = getValueFromPointer(event.nativeEvent.locationX);
        value && (onSlideStart == null ? void 0 : onSlideStart(value, target, event));
      },
      onSlideMove: (event) => {
        const value = getValueFromPointer(event.nativeEvent.pageX - state.offset);
        value && (onSlideMove == null ? void 0 : onSlideMove(value, event));
      },
      onSlideEnd: (event) => {
        const value = getValueFromPointer(event.nativeEvent.pageX - state.offset);
        value && (onSlideEnd == null ? void 0 : onSlideEnd(event, value));
      },
      onStepKeyDown: (event) => {
        const isBackKey = BACK_KEYS[direction].includes(event.key);
        onStepKeyDown == null ? void 0 : onStepKeyDown({
          event,
          direction: isBackKey ? -1 : 1
        });
      }
    })
  });
});
function useOnDebouncedWindowResize(callback, amt = 200) {
  React64.useEffect(() => {
    let last;
    const onResize = () => {
      clearTimeout(last), last = setTimeout(callback, amt);
    };
    return window.addEventListener("resize", onResize), () => {
      clearTimeout(last), window.removeEventListener("resize", onResize);
    };
  }, []);
}
var SliderVertical = React64.forwardRef((props, forwardedRef) => {
  const {
    min: min2,
    max: max2,
    onSlideStart,
    onSlideMove,
    onStepKeyDown,
    onSlideEnd,
    ...sliderProps
  } = props, [state, setState_] = React64.useState(() => ({
    size: 0,
    offset: 0
  })), setState = createShallowSetState(setState_), sliderRef = React64.useRef(null);
  function getValueFromPointer(pointerPosition) {
    const input = [0, state.size];
    return linearScale(input, [max2, min2])(pointerPosition);
  }
  const measure = () => {
    var _a;
    (_a = sliderRef.current) == null ? void 0 : _a.measure((_x, _y, _width, height, _pageX, pageY) => {
      setState({
        size: height,
        offset: pageY
      });
    });
  };
  return isClient && useOnDebouncedWindowResize(measure), (0, import_jsx_runtime51.jsx)(SliderOrientationProvider, {
    scope: props.__scopeSlider,
    startEdge: "bottom",
    endEdge: "top",
    sizeProp: "height",
    size: state.size,
    direction: 1,
    children: (0, import_jsx_runtime51.jsx)(SliderImpl, {
      ref: composeRefs(forwardedRef, sliderRef),
      ...sliderProps,
      orientation: "vertical",
      onLayout: measure,
      onSlideStart: (event, target) => {
        const value = getValueFromPointer(event.nativeEvent.locationY);
        value && (onSlideStart == null ? void 0 : onSlideStart(value, target, event));
      },
      onSlideMove: (event) => {
        const value = getValueFromPointer(event.nativeEvent.pageY - state.offset);
        value && (onSlideMove == null ? void 0 : onSlideMove(value, event));
      },
      onSlideEnd: (event) => {
        const value = getValueFromPointer(event.nativeEvent.pageY - state.offset);
        onSlideEnd == null ? void 0 : onSlideEnd(event, value);
      },
      onStepKeyDown: (event) => {
        const isBackKey = BACK_KEYS.ltr.includes(event.key);
        onStepKeyDown == null ? void 0 : onStepKeyDown({
          event,
          direction: isBackKey ? -1 : 1
        });
      }
    })
  });
});
var TRACK_NAME = "SliderTrack";
var SliderTrackFrame = styled(SliderFrame, {
  name: "SliderTrack",
  variants: {
    unstyled: {
      false: {
        height: "100%",
        width: "100%",
        backgroundColor: "$background",
        position: "relative",
        borderRadius: 1e5,
        overflow: "hidden"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var SliderTrack = React64.forwardRef((props, forwardedRef) => {
  const {
    __scopeSlider,
    ...trackProps
  } = props, context2 = useSliderContext(TRACK_NAME, __scopeSlider);
  return (0, import_jsx_runtime51.jsx)(SliderTrackFrame, {
    "data-disabled": context2.disabled ? "" : void 0,
    "data-orientation": context2.orientation,
    orientation: context2.orientation,
    size: context2.size,
    ...trackProps,
    ref: forwardedRef
  });
});
SliderTrack.displayName = TRACK_NAME;
var RANGE_NAME = "SliderTrackActive";
var SliderTrackActiveFrame = styled(SliderFrame, {
  name: "SliderTrackActive",
  backgroundColor: "$background",
  position: "absolute",
  pointerEvents: "box-none"
});
var SliderTrackActive = React64.forwardRef((props, forwardedRef) => {
  const {
    __scopeSlider,
    ...rangeProps
  } = props, context2 = useSliderContext(RANGE_NAME, __scopeSlider), orientation = useSliderOrientationContext(RANGE_NAME, __scopeSlider), ref = React64.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), valuesCount = context2.values.length, percentages = context2.values.map((value) => convertValueToPercentage(value, context2.min, context2.max)), offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0, offsetEnd = 100 - Math.max(...percentages);
  return (0, import_jsx_runtime51.jsx)(SliderTrackActiveFrame, {
    orientation: context2.orientation,
    "data-orientation": context2.orientation,
    "data-disabled": context2.disabled ? "" : void 0,
    size: context2.size,
    animateOnly: ["left", "top", "right", "bottom"],
    ...rangeProps,
    ref: composedRefs,
    [orientation.startEdge]: `${offsetStart}%`,
    [orientation.endEdge]: `${offsetEnd}%`,
    ...orientation.sizeProp === "width" ? {
      height: "100%"
    } : {
      left: 0,
      right: 0
    }
  });
});
SliderTrackActive.displayName = RANGE_NAME;
var THUMB_NAME = "SliderThumb";
var getThumbSize = (val) => {
  const tokens = getTokens(), size4 = typeof val == "number" ? val : getSize(tokens.size[val], {
    shift: -1
  });
  return {
    width: size4,
    height: size4,
    minWidth: size4,
    minHeight: size4
  };
};
var SliderThumbFrame = styled(ThemeableStack, {
  name: "SliderThumb",
  variants: {
    size: {
      "...size": getThumbSize
    },
    unstyled: {
      false: {
        position: "absolute",
        bordered: 2,
        borderWidth: 2,
        backgrounded: true,
        pressTheme: isWeb,
        focusTheme: isWeb,
        hoverTheme: isWeb
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var SliderThumb = SliderThumbFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeSlider,
    index: index3,
    size: sizeProp,
    ...thumbProps
  } = props, context2 = useSliderContext(THUMB_NAME, __scopeSlider), orientation = useSliderOrientationContext(THUMB_NAME, __scopeSlider), [thumb, setThumb] = React64.useState(null), composedRefs = useComposedRefs(forwardedRef, setThumb), value = context2.values[index3], percent = value === void 0 ? 0 : convertValueToPercentage(value, context2.min, context2.max), label = getLabel(index3, context2.values.length), sizeIn = sizeProp ?? context2.size ?? "$true", [size4, setSize] = React64.useState(() => getVariableValue(getThumbSize(sizeIn).width)), thumbInBoundsOffset = size4 ? getThumbInBoundsOffset(size4, percent, orientation.direction) : 0;
  React64.useEffect(() => {
    if (thumb) return context2.thumbs.set(thumb, index3), () => {
      context2.thumbs.delete(thumb);
    };
  }, [thumb, context2.thumbs, index3]);
  const positionalStyles = context2.orientation === "horizontal" ? {
    x: thumbInBoundsOffset - size4 / 2,
    y: -size4 / 2,
    top: "50%",
    ...size4 === 0 && {
      top: "auto",
      bottom: "auto"
    }
  } : {
    x: -size4 / 2,
    y: size4 / 2,
    left: "50%",
    ...size4 === 0 && {
      left: "auto",
      right: "auto"
    }
  };
  return (0, import_jsx_runtime51.jsx)(SliderThumbFrame, {
    ref: composedRefs,
    role: "slider",
    "aria-label": props["aria-label"] || label,
    "aria-valuemin": context2.min,
    "aria-valuenow": value,
    "aria-valuemax": context2.max,
    "aria-orientation": context2.orientation,
    "data-orientation": context2.orientation,
    "data-disabled": context2.disabled ? "" : void 0,
    tabIndex: context2.disabled ? void 0 : 0,
    animateOnly: ["transform", "left", "top", "right", "bottom"],
    ...positionalStyles,
    [orientation.startEdge]: `${percent}%`,
    size: sizeIn,
    ...thumbProps,
    onLayout: (e) => {
      setSize(e.nativeEvent.layout[orientation.sizeProp]);
    },
    onFocus: composeEventHandlers(props.onFocus, () => {
      context2.valueIndexToChangeRef.current = index3;
    })
  });
}, {
  staticConfig: {
    memo: true
  }
});
var SliderComponent = React64.forwardRef((props, forwardedRef) => {
  const {
    name,
    min: min2 = 0,
    max: max2 = 100,
    step = 1,
    orientation = "horizontal",
    disabled = false,
    minStepsBetweenThumbs = 0,
    defaultValue = [min2],
    value,
    onValueChange = () => {
    },
    size: sizeProp,
    onSlideEnd,
    onSlideMove,
    onSlideStart,
    ...sliderProps
  } = props, sliderRef = React64.useRef(null), composedRefs = useComposedRefs(sliderRef, forwardedRef), thumbRefs = React64.useRef(/* @__PURE__ */ new Map()), valueIndexToChangeRef = React64.useRef(0), isHorizontal = orientation === "horizontal", [values = [], setValues] = useControllableState({
    prop: value,
    defaultProp: defaultValue,
    transition: true,
    onChange: (value2) => {
      updateThumbFocus(valueIndexToChangeRef.current), onValueChange(value2);
    }
  });
  isWeb && React64.useEffect(() => {
    const node = sliderRef.current;
    if (!node) return;
    const preventDefault = (e) => {
      e.preventDefault();
    };
    return node.addEventListener("touchstart", preventDefault), () => {
      node.removeEventListener("touchstart", preventDefault);
    };
  }, []);
  function updateThumbFocus(focusIndex) {
    if (isWeb) {
      for (const [node, index3] of thumbRefs.current.entries()) if (index3 === focusIndex) {
        node.focus();
        return;
      }
    }
  }
  function handleSlideMove(value2, event) {
    updateValues(value2, valueIndexToChangeRef.current), onSlideMove == null ? void 0 : onSlideMove(event, value2);
  }
  function updateValues(value2, atIndex) {
    const decimalCount = getDecimalCount(step), snapToStep = roundValue(Math.round((value2 - min2) / step) * step + min2, decimalCount), nextValue = clamp(snapToStep, [min2, max2]);
    setValues((prevValues = []) => {
      const nextValues = getNextSortedValues(prevValues, nextValue, atIndex);
      return hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step) ? (valueIndexToChangeRef.current = nextValues.indexOf(nextValue), String(nextValues) === String(prevValues) ? prevValues : nextValues) : prevValues;
    });
  }
  const SliderOriented = isHorizontal ? SliderHorizontal : SliderVertical;
  return (0, import_jsx_runtime51.jsx)(SliderProvider, {
    scope: props.__scopeSlider,
    disabled,
    min: min2,
    max: max2,
    valueIndexToChangeRef,
    thumbs: thumbRefs.current,
    values,
    orientation,
    size: sizeProp,
    children: (0, import_jsx_runtime51.jsx)(SliderOriented, {
      "aria-disabled": disabled,
      "data-disabled": disabled ? "" : void 0,
      ...sliderProps,
      ref: composedRefs,
      min: min2,
      max: max2,
      onSlideEnd,
      onSlideStart: disabled ? void 0 : (value2, target, event) => {
        if (target !== "thumb") {
          const closestIndex = getClosestValueIndex(values, value2);
          updateValues(value2, closestIndex);
        }
        onSlideStart == null ? void 0 : onSlideStart(event, value2, target);
      },
      onSlideMove: disabled ? void 0 : handleSlideMove,
      onHomeKeyDown: () => !disabled && updateValues(min2, 0),
      onEndKeyDown: () => !disabled && updateValues(max2, values.length - 1),
      onStepKeyDown: ({
        event,
        direction: stepDirection
      }) => {
        if (!disabled) {
          const multiplier = PAGE_KEYS.includes(event.key) || event.shiftKey && ARROW_KEYS2.includes(event.key) ? 10 : 1, atIndex = valueIndexToChangeRef.current, value2 = values[atIndex], stepInDirection = step * multiplier * stepDirection;
          updateValues(value2 + stepInDirection, atIndex);
        }
      }
    })
  });
});
var Slider = withStaticProperties(SliderComponent, {
  Track: SliderTrack,
  TrackActive: SliderTrackActive,
  Thumb: SliderThumb
});
Slider.displayName = SLIDER_NAME;
var Track = SliderTrack;
var Range = SliderTrackActive;
var Thumb = SliderThumb;

// node_modules/@tamagui/switch-headless/dist/esm/useSwitch.mjs
var React65 = __toESM(require_react(), 1);
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
function getState7(checked) {
  return checked ? "checked" : "unchecked";
}
var BubbleInput3 = (props) => {
  const {
    control,
    checked,
    bubbles = true,
    ...inputProps
  } = props, ref = React65.useRef(null), prevChecked = usePrevious(checked);
  return React65.useEffect(() => {
    const input = ref.current, inputProto = window.HTMLInputElement.prototype, setChecked = Object.getOwnPropertyDescriptor(inputProto, "checked").set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", {
        bubbles
      });
      setChecked.call(input, checked), input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]), // @ts-ignore
  (0, import_jsx_runtime52.jsx)("input", {
    type: "checkbox",
    "aria-hidden": true,
    defaultChecked: checked,
    ...inputProps,
    tabIndex: -1,
    ref,
    style: {
      ...props.style,
      position: "absolute",
      pointerEvents: "none",
      opacity: 0,
      margin: 0
    }
  });
};
function useSwitch(props, [checked, setChecked], ref) {
  {
    const {
      disabled,
      name,
      value,
      required
    } = props, hasConsumerStoppedPropagationRef = React65.useRef(false), [button, setButton] = React65.useState(null), composedRefs = useComposedRefs(ref, setButton), isFormControl = isWeb ? button ? !!button.closest("form") : true : false, labelId = useLabelContext(button), ariaLabelledBy = props["aria-labelledby"] || props.labeledBy || labelId;
    return {
      switchProps: {
        role: "switch",
        "aria-checked": checked,
        ...isWeb ? {
          tabIndex: disabled ? void 0 : 0,
          "data-state": getState7(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled
        } : {},
        "aria-labelledby": ariaLabelledBy,
        onPress: composeEventHandlers(props.onPress, (event) => {
          setChecked((prevChecked) => !prevChecked), isWeb && isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
        })
      },
      switchRef: composedRefs,
      /**
       * insert as a sibling of your switch (should not be inside the switch)
       */
      bubbleInput: isWeb && isFormControl ? (0, import_jsx_runtime52.jsx)(BubbleInput3, {
        control: button,
        bubbles: !hasConsumerStoppedPropagationRef.current,
        name,
        value,
        checked,
        required,
        disabled,
        style: {
          transform: "translateX(-100%)"
        }
      }) : null
    };
  }
}

// node_modules/@tamagui/switch/dist/esm/createSwitch.mjs
var React66 = __toESM(require_react(), 1);

// node_modules/@tamagui/switch/dist/esm/StyledContext.mjs
var SwitchStyledContext = createStyledContext({
  size: void 0,
  unstyled: process.env.TAMAGUI_HEADLESS === "1"
});

// node_modules/@tamagui/switch/dist/esm/Switch.mjs
var SwitchThumb = styled(ThemeableStack, {
  name: "SwitchThumb",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        borderRadius: 1e3
      }
    },
    checked: {
      true: {}
    },
    size: {
      "...size": (val) => {
        const size4 = getSwitchHeight(val);
        return {
          height: size4,
          width: size4
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var getSwitchHeight = (val) => Math.round(getVariableValue(getSize(val)) * 0.65);
var getSwitchWidth = (val) => getSwitchHeight(val) * 2;
var SwitchFrame = styled(YStack, {
  name: "Switch",
  tag: "button",
  tabIndex: 0,
  variants: {
    unstyled: {
      false: {
        borderRadius: 1e3,
        backgroundColor: "$background",
        borderWidth: 2,
        borderColor: "$background",
        focusVisibleStyle: {
          outlineColor: "$outlineColor",
          outlineStyle: "solid",
          outlineWidth: 2
        }
      }
    },
    checked: {
      true: {}
    },
    size: {
      "...size": (val) => {
        const height = getSwitchHeight(val) + 4, width = getSwitchWidth(val) + 4;
        return {
          height,
          minHeight: height,
          width
        };
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});

// node_modules/@tamagui/switch/dist/esm/createSwitch.mjs
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var SwitchContext = React66.createContext({
  checked: false,
  disabled: false,
  frameWidth: 0
});
function createSwitch(createProps) {
  const {
    disableActiveTheme,
    Frame: Frame2 = SwitchFrame,
    Thumb: Thumb2 = SwitchThumb
  } = createProps;
  (Frame2 !== SwitchFrame && Frame2.staticConfig.context && Frame2.staticConfig.context !== SwitchStyledContext || Thumb2 !== SwitchThumb && Thumb2.staticConfig.context && Thumb2.staticConfig.context !== SwitchStyledContext) && console.warn("Warning: createSwitch() needs to control context to pass checked state from Frame to Thumb, any custom context passed will be overridden."), Frame2.staticConfig.context = SwitchStyledContext, Thumb2.staticConfig.context = SwitchStyledContext;
  const SwitchThumbComponent = Thumb2.styleable(function(props, forwardedRef) {
    const {
      size: sizeProp,
      unstyled: unstyledProp,
      nativeID,
      ...thumbProps
    } = props, context2 = React66.useContext(SwitchContext), {
      checked,
      disabled,
      frameWidth
    } = context2, styledContext = SwitchStyledContext.useStyledContext(), {
      unstyled: unstyledContext,
      size: sizeContext
    } = styledContext, unstyled = process.env.TAMAGUI_HEADLESS === "1" ? true : unstyledProp ?? unstyledContext ?? false, size4 = sizeProp ?? sizeContext ?? "$true", initialChecked = React66.useRef(checked).current, initialWidth = getVariableValue(props.width, "size"), [thumbWidth, setThumbWidth] = React66.useState(typeof initialWidth == "number" ? initialWidth : 0), distance = frameWidth - thumbWidth, x = initialChecked ? checked ? 0 : -distance : checked ? distance : 0;
    return (0, import_jsx_runtime53.jsx)(Thumb2, {
      ref: forwardedRef,
      unstyled,
      ...unstyled === false && {
        size: size4,
        ...!disableActiveTheme && !unstyled && {
          theme: checked ? "active" : null
        }
      },
      alignSelf: initialChecked ? "flex-end" : "flex-start",
      x,
      onLayout: composeEventHandlers(props.onLayout, (e) => {
        const next = e.nativeEvent.layout.width;
        next !== thumbWidth && setThumbWidth(next);
      }),
      checked,
      disabled,
      ...thumbProps
    });
  }), SwitchComponent = Frame2.styleable(function(_props, forwardedRef) {
    const {
      native,
      nativeProps,
      checked: checkedProp,
      defaultChecked,
      onCheckedChange,
      ...props
    } = _props, [checked, setChecked] = useControllableState({
      prop: checkedProp,
      defaultProp: defaultChecked || false,
      onChange: onCheckedChange,
      transition: true
    }), styledContext = React66.useContext(SwitchStyledContext.context);
    let estimatedInitialWidth = 0;
    const estWidth = getVariableValue(getShorthandValue(props, "width"), "size");
    if (estWidth) {
      const estPad = getShorthandValue(props, "paddingHorizontal") ?? getShorthandValue(props, "padding") ?? 0, estLeftPad = getShorthandValue(props, "paddingLeft") ?? estPad ?? 0, estRightPad = getShorthandValue(props, "paddingRight") ?? estPad ?? 0;
      estimatedInitialWidth = estWidth - (estLeftPad ? getVariableValue(estLeftPad, "size") : 0) - (estRightPad ? getVariableValue(estRightPad, "size") : 0);
    }
    const [frameWidth, setFrameInnerWidth] = React66.useState(estimatedInitialWidth), {
      switchProps,
      bubbleInput,
      switchRef
    } = useSwitch(
      // @ts-ignore
      props,
      [checked, setChecked],
      forwardedRef
    ), renderNative = shouldRenderNativePlatform(native);
    if (renderNative === "android" || renderNative === "ios") return (0, import_jsx_runtime53.jsx)(Switch_default, {
      value: checked,
      onValueChange: setChecked,
      ...nativeProps
    });
    const disabled = props.disabled, value = React66.useMemo(() => ({
      checked,
      disabled,
      frameWidth
    }), [checked, disabled, frameWidth]), handleLayout = (e) => {
      const next = e.nativeEvent.layout.width;
      next !== frameWidth && setFrameInnerWidth(next);
    }, unstyled = styledContext.unstyled ?? props.unstyled ?? false;
    return (0, import_jsx_runtime53.jsxs)(SwitchContext.Provider, {
      value,
      children: [(0, import_jsx_runtime53.jsx)(Frame2, {
        ref: switchRef,
        tag: "button",
        ...isWeb && {
          type: "button"
        },
        ...!unstyled && {
          size: styledContext.size ?? props.size ?? "$true"
        },
        unstyled,
        ...props,
        ...switchProps,
        ...!disableActiveTheme && !props.unstyled && {
          theme: checked ? "active" : null
        },
        checked,
        disabled,
        children: (0, import_jsx_runtime53.jsx)(View_default, {
          style: measureContainerStyle,
          onLayout: handleLayout,
          children: frameWidth ? props.children : null
        })
      }), bubbleInput]
    });
  }, {
    disableTheme: true
  });
  return withStaticProperties(SwitchComponent, {
    Thumb: SwitchThumbComponent
  });
}
var measureContainerStyle = {
  alignSelf: "stretch",
  flex: 1
};

// node_modules/@tamagui/switch/dist/esm/index.mjs
var Switch = createSwitch({
  Frame: SwitchFrame,
  Thumb: SwitchThumb
});

// node_modules/@tamagui/tabs/dist/esm/Tabs.mjs
var React67 = __toESM(require_react(), 1);
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var TABS_CONTEXT = "TabsContext";
var TAB_LIST_NAME = "TabsList";
var TabsList = React67.forwardRef((props, forwardedRef) => {
  const {
    __scopeTabs,
    loop = true,
    children,
    ...listProps
  } = props, context2 = useTabsContext(__scopeTabs);
  return (0, import_jsx_runtime54.jsx)(RovingFocusGroup, {
    __scopeRovingFocusGroup: __scopeTabs || TABS_CONTEXT,
    orientation: context2.orientation,
    dir: context2.dir,
    loop,
    asChild: true,
    children: (0, import_jsx_runtime54.jsx)(Group, {
      role: "tablist",
      componentName: TAB_LIST_NAME,
      "aria-orientation": context2.orientation,
      ref: forwardedRef,
      orientation: context2.orientation,
      ...listProps,
      children
    })
  });
});
TabsList.displayName = TAB_LIST_NAME;
var TRIGGER_NAME6 = "TabsTrigger";
var TabsTriggerFrame = styled(ThemeableStack, {
  name: TRIGGER_NAME6,
  tag: "button",
  variants: {
    size: {
      "...size": getButtonSized
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    },
    active: {
      true: {
        hoverStyle: {
          backgroundColor: "$background"
        },
        focusStyle: {
          backgroundColor: "$background"
        }
      }
    },
    unstyled: {
      false: {
        borderWidth: 0,
        backgroundColor: "$background",
        userSelect: "none",
        justifyContent: "center",
        alignItems: "center",
        flexWrap: "nowrap",
        flexDirection: "row",
        cursor: "pointer",
        pressStyle: {
          backgroundColor: "$backgroundPress"
        },
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var TabsTrigger = TabsTriggerFrame.styleable((props, forwardedRef) => {
  const {
    __scopeTabs,
    value,
    disabled = false,
    onInteraction,
    disableActiveTheme,
    ...triggerProps
  } = props, context2 = useTabsContext(__scopeTabs), triggerId = makeTriggerId(context2.baseId, value), contentId = makeContentId(context2.baseId, value), isSelected = value === context2.value, [layout, setLayout] = React67.useState(null), triggerRef = React67.useRef(null), groupItemProps = useGroupItem({
    disabled: !!disabled
  });
  return React67.useEffect(() => (context2.registerTrigger(), () => context2.unregisterTrigger()), []), React67.useEffect(() => {
    if (!triggerRef.current || !isWeb) return;
    function getTriggerSize() {
      triggerRef.current && setLayout({
        width: triggerRef.current.offsetWidth,
        height: triggerRef.current.offsetHeight,
        x: triggerRef.current.offsetLeft,
        y: triggerRef.current.offsetTop
      });
    }
    getTriggerSize();
    const observer = new ResizeObserver(getTriggerSize);
    return observer.observe(triggerRef.current), () => {
      triggerRef.current && observer.unobserve(triggerRef.current);
    };
  }, [context2.triggersCount]), React67.useEffect(() => {
    isSelected && layout && (onInteraction == null ? void 0 : onInteraction("select", layout));
  }, [isSelected, value, layout]), (0, import_jsx_runtime54.jsx)(Theme, {
    name: isSelected && !disableActiveTheme ? "active" : null,
    children: (0, import_jsx_runtime54.jsx)(RovingFocusGroup.Item, {
      __scopeRovingFocusGroup: __scopeTabs || TABS_CONTEXT,
      asChild: true,
      focusable: !disabled,
      active: isSelected,
      children: (0, import_jsx_runtime54.jsx)(TabsTriggerFrame, {
        onLayout: (event) => {
          isWeb || setLayout(event.nativeEvent.layout);
        },
        onHoverIn: composeEventHandlers(props.onHoverIn, () => {
          layout && (onInteraction == null ? void 0 : onInteraction("hover", layout));
        }),
        onHoverOut: composeEventHandlers(props.onHoverOut, () => {
          onInteraction == null ? void 0 : onInteraction("hover", null);
        }),
        role: "tab",
        "aria-selected": isSelected,
        "aria-controls": contentId,
        "data-state": isSelected ? "active" : "inactive",
        "data-disabled": disabled ? "" : void 0,
        disabled,
        id: triggerId,
        ...!props.unstyled && {
          size: context2.size
        },
        ...isSelected && {
          forceStyle: "focus"
        },
        ...groupItemProps,
        ...triggerProps,
        ref: composeRefs(forwardedRef, triggerRef),
        onPress: composeEventHandlers(props.onPress ?? void 0, (event) => {
          const webChecks = !isWeb || event.button === 0 && event.ctrlKey === false;
          !disabled && !isSelected && webChecks ? context2.onChange(value) : event.preventDefault();
        }),
        ...isWeb && {
          type: "button",
          onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
            [" ", "Enter"].includes(event.key) && (context2.onChange(value), event.preventDefault());
          }),
          onFocus: composeEventHandlers(props.onFocus, (event) => {
            layout && (onInteraction == null ? void 0 : onInteraction("focus", layout));
            const isAutomaticActivation = context2.activationMode !== "manual";
            !isSelected && !disabled && isAutomaticActivation && context2.onChange(value);
          }),
          onBlur: composeEventHandlers(props.onFocus, () => {
            onInteraction == null ? void 0 : onInteraction("focus", null);
          })
        }
      })
    })
  });
});
TabsTrigger.displayName = TRIGGER_NAME6;
var CONTENT_NAME5 = "TabsContent";
var TabsContentFrame = styled(ThemeableStack, {
  name: CONTENT_NAME5
});
var TabsContent = TabsContentFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeTabs,
    value,
    forceMount,
    children,
    ...contentProps
  } = props, context2 = useTabsContext(__scopeTabs), isSelected = value === context2.value, show = forceMount || isSelected, triggerId = makeTriggerId(context2.baseId, value), contentId = makeContentId(context2.baseId, value);
  return show ? (0, import_jsx_runtime54.jsx)(TabsContentFrame, {
    "data-state": isSelected ? "active" : "inactive",
    "data-orientation": context2.orientation,
    role: "tabpanel",
    "aria-labelledby": triggerId,
    hidden: !show,
    id: contentId,
    tabIndex: 0,
    ...contentProps,
    ref: forwardedRef,
    children
  }, value) : null;
});
var TABS_NAME = "Tabs";
var {
  Provider: TabsProvider,
  useStyledContext: useTabsContext
} = createStyledContext();
var TabsFrame = styled(SizableStack, {
  name: TABS_NAME
});
var TabsComponent = TabsFrame.styleable(function(props, forwardedRef) {
  const {
    __scopeTabs,
    value: valueProp,
    onValueChange,
    defaultValue,
    orientation = "horizontal",
    dir,
    activationMode = "automatic",
    size: size4 = "$true",
    ...tabsProps
  } = props, direction = useDirection(dir), [value, setValue] = useControllableState({
    prop: valueProp,
    onChange: onValueChange,
    defaultProp: defaultValue ?? ""
  }), [triggersCount, setTriggersCount] = React67.useState(0), registerTrigger = useEvent(() => setTriggersCount((v) => v + 1)), unregisterTrigger = useEvent(() => setTriggersCount((v) => v - 1));
  return (0, import_jsx_runtime54.jsx)(TabsProvider, {
    scope: __scopeTabs,
    baseId: React67.useId(),
    value,
    onChange: setValue,
    orientation,
    dir: direction,
    activationMode,
    size: size4,
    registerTrigger,
    triggersCount,
    unregisterTrigger,
    children: (0, import_jsx_runtime54.jsx)(TabsFrame, {
      direction,
      "data-orientation": orientation,
      ...tabsProps,
      ref: forwardedRef
    })
  });
});
var Tabs2 = withStaticProperties(TabsComponent, {
  List: TabsList,
  /**
   * @deprecated Use Tabs.Tab instead
   */
  Trigger: TabsTrigger,
  Tab: TabsTrigger,
  Content: TabsContent
});
function makeTriggerId(baseId, value) {
  return `${baseId}-trigger-${value}`;
}
function makeContentId(baseId, value) {
  return `${baseId}-content-${value}`;
}

// node_modules/@tamagui/theme/dist/esm/_mutateTheme.mjs
function mutateThemes({
  themes,
  batch,
  insertCSS = true,
  ...props
}) {
  const allThemesProxied = {}, allThemesRaw = {};
  for (const {
    name,
    theme
  } of themes) {
    const res = _mutateTheme({
      ...props,
      name,
      theme,
      // we'll do one update at the end
      avoidUpdate: true,
      // always add which also replaces but doesnt fail first time
      mutationType: "add"
    });
    res && (allThemesProxied[name] = res.theme, allThemesRaw[name] = res.themeRaw);
  }
  const cssRules = insertCSS ? insertThemeCSS(allThemesRaw, batch) : [];
  return startTransition(() => {
    for (const themeName in allThemesProxied) {
      const theme = allThemesProxied[themeName];
      updateThemeConfig(themeName, theme);
    }
    updateThemeStates();
  }), {
    themes: allThemesProxied,
    themesRaw: allThemesRaw,
    cssRules
  };
}
function _mutateTheme(props) {
  if (isServer) {
    console.warn("Theme mutation is not supported on server side");
    return;
  }
  const config = getConfig(), {
    name: themeName,
    theme: themeIn,
    insertCSS,
    mutationType
  } = props;
  if (true) {
    if (!config) throw new Error("No config");
    const theme2 = config.themes[props.name];
    if (mutationType !== "add" && !theme2) throw new Error(`${mutationType === "replace" ? "Replace" : "Update"} theme failed! Theme ${props.name} does not exist`);
  }
  const theme = {
    ...mutationType === "update" ? config.themes[themeName] ?? {} : {},
    ...themeIn
  };
  for (const key in theme) ensureThemeVariable(theme, key);
  const themeProxied = proxyThemeToParents(themeName, theme), response = {
    themeRaw: theme,
    theme: themeProxied,
    cssRules: []
  };
  return props.avoidUpdate || (insertCSS && (response.cssRules = insertThemeCSS({
    [themeName]: theme
  })), updateThemeConfig(themeName, themeProxied), updateThemeStates()), response;
}
function updateThemeConfig(themeName, theme) {
  const config = getConfig();
  config.themes[themeName] = theme, updateConfig("themes", config.themes);
}
function updateThemeStates() {
  forceUpdateThemes();
}
function insertThemeCSS(themes, batch = false) {
  const config = getConfig();
  let cssRules = [];
  for (const themeName in themes) {
    const theme = themes[themeName], rules = getThemeCSSRules({
      config,
      themeName,
      names: [themeName],
      hasDarkLight: true,
      theme
    });
    cssRules = [...cssRules, ...rules], batch || updateStyle(`t_theme_style_${themeName}`, rules);
  }
  if (batch) {
    const id = typeof batch == "string" ? batch : simpleHash(Object.keys(themes).join(""));
    updateStyle(`t_theme_style_${id}`, cssRules);
  }
  return cssRules;
}
function updateStyle(id, rules) {
  var _a;
  const existing = document.querySelector(`#${id}`), style = document.createElement("style");
  style.id = id, style.appendChild(document.createTextNode(rules.join(`
`))), document.head.appendChild(style), existing && ((_a = existing.parentElement) == null ? void 0 : _a.removeChild(existing));
}

// node_modules/@tamagui/theme/dist/esm/addTheme.mjs
function addTheme(props) {
  return _mutateTheme({
    ...props,
    insertCSS: true,
    mutationType: "add"
  });
}

// node_modules/@tamagui/theme/dist/esm/updateTheme.mjs
function updateTheme({
  name,
  theme
}) {
  return _mutateTheme({
    name,
    theme,
    insertCSS: true,
    mutationType: "update"
  });
}

// node_modules/@tamagui/theme/dist/esm/replaceTheme.mjs
function replaceTheme({
  name,
  theme
}) {
  return _mutateTheme({
    name,
    theme,
    insertCSS: true,
    mutationType: "replace"
  });
}

// node_modules/@tamagui/toggle-group/dist/esm/ToggleGroup.mjs
var import_react44 = __toESM(require_react(), 1);

// node_modules/@tamagui/toggle-group/dist/esm/Toggle.mjs
var React68 = __toESM(require_react(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var context = createStyledContext({
  color: ""
});
var NAME3 = "Toggle";
var ToggleFrame = styled(ThemeableStack, {
  name: NAME3,
  tag: "button",
  context,
  variants: {
    unstyled: {
      false: {
        pressTheme: true,
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        display: "flex",
        borderColor: "$borderColor",
        borderWidth: 1,
        margin: -1,
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        pressStyle: {
          backgroundColor: "$backgroundPress"
        },
        focusStyle: {
          borderColor: "$borderColorFocus"
        },
        focusVisibleStyle: {
          outlineColor: "$outlineColor",
          outlineWidth: 2,
          outlineStyle: "solid"
        }
      }
    },
    color: {
      "...color": () => ({})
    },
    active: {
      true: {
        zIndex: 1,
        hoverStyle: {
          backgroundColor: "$background"
        },
        focusStyle: {
          borderColor: "$borderColor",
          backgroundColor: "$background"
        }
      }
    },
    orientation: {
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      },
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var Toggle = React68.forwardRef(function(props, forwardedRef) {
  const {
    pressed: pressedProp,
    defaultPressed = false,
    onPressedChange,
    ...buttonProps
  } = props, [pressed = false, setPressed] = useControllableState({
    prop: pressedProp,
    onChange: onPressedChange,
    defaultProp: defaultPressed
  });
  return (0, import_jsx_runtime55.jsx)(ToggleFrame, {
    ...!props.unstyled && {
      theme: pressed ? "active" : null,
      themeShallow: true
    },
    active: props.unstyled ? void 0 : pressed,
    "aria-pressed": pressed,
    "data-state": pressed ? "on" : "off",
    "data-disabled": props.disabled ? "" : void 0,
    ...buttonProps,
    ref: forwardedRef,
    onPress: composeEventHandlers(props.onPress ?? void 0, () => {
      props.disabled || setPressed(!pressed);
    })
  });
});

// node_modules/@tamagui/toggle-group/dist/esm/ToggleGroup.mjs
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var TOGGLE_GROUP_NAME = "ToggleGroup";
var TOGGLE_GROUP_ITEM_NAME = "ToggleGroupItem";
var TOGGLE_GROUP_CONTEXT = "ToggleGroup";
var {
  Provider: ToggleGroupItemProvider,
  useStyledContext: useToggleGroupItemContext
} = createStyledContext();
var {
  Provider: ToggleGroupContext,
  useStyledContext: useToggleGroupContext
} = createStyledContext();
var ToggleGroupItem = ToggleFrame.extractable(import_react44.default.forwardRef((props, forwardedRef) => {
  const [_, {
    color
  }] = usePropsAndStyle(props), {
    disablePassStyles,
    ...rest
  } = props, valueContext = useToggleGroupValueContext(props.__scopeToggleGroup), context2 = useToggleGroupContext(props.__scopeToggleGroup), pressed = valueContext == null ? void 0 : valueContext.value.includes(props.value), disabled = context2.disabled || props.disabled || false, groupItemProps = useGroupItem({
    disabled
  }), size4 = props.size ?? context2.size, sizeProps = props.unstyled ? {} : {
    width: void 0,
    height: void 0,
    padding: getVariableValue(size4) * 0.6
  }, iconSize = (typeof size4 == "number" ? size4 * 0.7 : getFontSize(size4)) * 1.2, theme = useTheme(), getThemedIcon = useGetThemedIcon({
    size: iconSize,
    color: color ?? theme.color
  }), children = import_react44.default.Children.toArray(props.children).map((child) => props.disablePassStyles || !import_react44.default.isValidElement(child) ? child : getThemedIcon(child)), commonProps = {
    pressed,
    disabled,
    ...sizeProps,
    ...rest,
    children
  }, inner2 = (0, import_jsx_runtime56.jsx)(ToggleGroupItemImpl, {
    ...commonProps,
    ref: forwardedRef,
    tabIndex: disabled ? -1 : 0,
    disabled,
    ...groupItemProps
  });
  return (0, import_jsx_runtime56.jsx)(ToggleGroupItemProvider, {
    scope: props.__scopeToggleGroup,
    children: context2.rovingFocus ? (0, import_jsx_runtime56.jsx)(RovingFocusGroup.Item, {
      asChild: "except-style",
      __scopeRovingFocusGroup: props.__scopeToggleGroup || TOGGLE_GROUP_CONTEXT,
      focusable: !disabled,
      active: pressed,
      children: inner2
    }) : inner2
  });
}));
ToggleGroupItem.displayName = TOGGLE_GROUP_ITEM_NAME;
var ToggleGroupItemImpl = import_react44.default.forwardRef((props, forwardedRef) => {
  const {
    __scopeToggleGroup,
    value,
    ...itemProps
  } = props, valueContext = useToggleGroupValueContext(__scopeToggleGroup), singleProps = {
    "aria-pressed": void 0
  }, typeProps = valueContext.type === "single" ? singleProps : void 0;
  return (0, import_jsx_runtime56.jsx)(Toggle, {
    ...typeProps,
    ...itemProps,
    ref: forwardedRef,
    onPressedChange: (pressed) => {
      pressed ? valueContext.onItemActivate(value) : valueContext.onItemDeactivate(value);
    }
  });
});
var ToggleGroup = withStaticProperties(import_react44.default.forwardRef((props, forwardedRef) => {
  const {
    type,
    ...toggleGroupProps
  } = props;
  if (isWeb || import_react44.default.useEffect(() => {
    if (props.id) return registerFocusable(props.id, {
      // TODO: would be nice to focus on the first child later - could be done with reforest
      // for now leaving it empty
      focus: () => {
      }
    });
  }, [props.id]), type === "single") return (0, import_jsx_runtime56.jsx)(ToggleGroupImplSingle, {
    ...toggleGroupProps,
    ref: forwardedRef
  });
  if (type === "multiple") return (0, import_jsx_runtime56.jsx)(ToggleGroupImplMultiple, {
    ...toggleGroupProps,
    ref: forwardedRef
  });
  throw new Error(`Missing prop \`type\` expected on \`${TOGGLE_GROUP_NAME}\``);
}), {
  Item: ToggleGroupItem
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
var {
  Provider: ToggleGroupValueProvider,
  useStyledContext: useToggleGroupValueContext
} = createStyledContext();
var ToggleGroupImplSingle = import_react44.default.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    disableDeactivation = false,
    ...toggleGroupSingleProps
  } = props, [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  });
  return (0, import_jsx_runtime56.jsx)(ToggleGroupValueProvider, {
    scope: props.__scopeToggleGroup,
    type: "single",
    value: value ? [value] : [],
    defaultValue: value,
    onItemActivate: setValue,
    onItemDeactivate: import_react44.default.useCallback(() => disableDeactivation ? null : setValue(""), [setValue, disableDeactivation]),
    children: (0, import_jsx_runtime56.jsx)(ToggleGroupImpl, {
      ...toggleGroupSingleProps,
      ref: forwardedRef
    })
  });
});
var ToggleGroupImplMultiple = import_react44.default.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    disableDeactivation,
    ...toggleGroupMultipleProps
  } = props, [value = [], setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  }), handleButtonActivate = import_react44.default.useCallback((itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]), [setValue]), handleButtonDeactivate = import_react44.default.useCallback((itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)), [setValue]);
  return (0, import_jsx_runtime56.jsx)(ToggleGroupValueProvider, {
    scope: props.__scopeToggleGroup,
    type: "multiple",
    value,
    defaultValue: value,
    onItemActivate: handleButtonActivate,
    onItemDeactivate: handleButtonDeactivate,
    children: (0, import_jsx_runtime56.jsx)(ToggleGroupImpl, {
      ...toggleGroupMultipleProps,
      ref: forwardedRef
    })
  });
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
var ToggleGroupImplElementFrame = styled(Group, {
  name: TOGGLE_GROUP_NAME,
  variants: {
    unstyled: {
      false: {
        backgroundColor: "$background"
      }
    },
    orientation: {
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      },
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var ToggleGroupImpl = ToggleGroupImplElementFrame.extractable(import_react44.default.forwardRef((props, forwardedRef) => {
  const {
    __scopeToggleGroup,
    disabled = false,
    orientation = "horizontal",
    dir,
    rovingFocus = true,
    loop = true,
    unstyled = false,
    size: sizeProp = "$true",
    sizeAdjust = 0,
    ...toggleGroupProps
  } = props, direction = useDirection(dir), commonProps = {
    role: "group",
    dir: direction,
    ...toggleGroupProps
  }, adjustedSize = getVariableValue(getSize(sizeProp, {
    shift: sizeAdjust
  })), size4 = Math.round(adjustedSize * 0.45);
  return (0, import_jsx_runtime56.jsx)(ToggleGroupContext, {
    scope: __scopeToggleGroup,
    rovingFocus,
    disabled,
    size: size4,
    children: rovingFocus ? (0, import_jsx_runtime56.jsx)(RovingFocusGroup, {
      asChild: "except-style",
      __scopeRovingFocusGroup: __scopeToggleGroup || TOGGLE_GROUP_CONTEXT,
      orientation,
      dir: direction,
      loop,
      children: (0, import_jsx_runtime56.jsx)(ToggleGroupImplElementFrame, {
        "aria-orientation": orientation,
        orientation,
        axis: orientation,
        ref: forwardedRef,
        "data-disabled": disabled ? "" : void 0,
        unstyled,
        ...commonProps
      })
    }) : (0, import_jsx_runtime56.jsx)(ToggleGroupImplElementFrame, {
      "aria-orientation": orientation,
      ref: forwardedRef,
      orientation,
      "data-disabled": disabled ? "" : void 0,
      unstyled,
      ...commonProps
    })
  });
}));

// node_modules/@tamagui/tooltip/dist/esm/Tooltip.mjs
var React70 = __toESM(require_react(), 1);
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var TOOLTIP_SCOPE = "tooltip";
var TooltipContent = PopperContentFrame.extractable(React70.forwardRef(({
  __scopeTooltip,
  ...props
}, ref) => {
  const preventAnimation = React70.useContext(PreventTooltipAnimationContext), popper = usePopperContext(__scopeTooltip || TOOLTIP_SCOPE), padding = props.unstyled ? void 0 : props.padding ?? props.size ?? popper.size ?? getSize("$true", {
    shift: -2
  });
  return (0, import_jsx_runtime57.jsx)(PopoverContent, {
    __scopePopover: __scopeTooltip || TOOLTIP_SCOPE,
    componentName: "Tooltip",
    disableRemoveScroll: true,
    disableFocusScope: true,
    ...!props.unstyled && {
      padding,
      pointerEvents: "none"
    },
    ref,
    ...props,
    ...preventAnimation && {
      animation: null
    }
  });
}));
var TooltipArrow = React70.forwardRef((props, ref) => {
  const {
    __scopeTooltip,
    ...rest
  } = props;
  return (0, import_jsx_runtime57.jsx)(PopoverArrow, {
    __scopePopper: __scopeTooltip || TOOLTIP_SCOPE,
    componentName: "Tooltip",
    ref,
    ...rest
  });
});
var PreventTooltipAnimationContext = React70.createContext(false);
var TooltipGroup = ({
  children,
  delay,
  preventAnimation = false,
  timeoutMs
}) => (0, import_jsx_runtime57.jsx)(PreventTooltipAnimationContext.Provider, {
  value: preventAnimation,
  children: (0, import_jsx_runtime57.jsx)(FloatingDelayGroup, {
    timeoutMs,
    delay: React70.useMemo(() => delay, [JSON.stringify(delay)]),
    children
  })
});
var setOpens = /* @__PURE__ */ new Set();
var closeOpenTooltips = () => {
  setOpens.forEach((x) => x(false));
};
var TooltipComponent = React70.forwardRef(function(props, ref) {
  const {
    children,
    delay: delayProp,
    restMs = typeof delayProp > "u" ? 500 : typeof delayProp == "number" ? delayProp : 0,
    onOpenChange: onOpenChangeProp,
    focus: focus2,
    open: openProp,
    disableAutoCloseOnScroll,
    __scopeTooltip,
    ...restProps
  } = props, triggerRef = React70.useRef(null), [hasCustomAnchor, setHasCustomAnchor] = React70.useState(false), {
    delay: delayGroup,
    setCurrentId
  } = useDelayGroupContext(), delay = delayProp ?? delayGroup, [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: false,
    onChange: onOpenChangeProp
  }), id = props.groupId, onOpenChange = useEvent((open2) => {
    open2 && setCurrentId(id), setOpen(open2);
  });
  React70.useEffect(() => {
    if (!open || disableAutoCloseOnScroll || typeof document > "u") return;
    const openIt = () => {
      setOpen(false);
    };
    return setOpens.add(setOpen), document.documentElement.addEventListener("scroll", openIt), () => {
      setOpens.delete(setOpen), document.documentElement.removeEventListener("scroll", openIt);
    };
  }, [open, disableAutoCloseOnScroll]);
  const useFloatingFn = (props2) => {
    const floating = useFloating3({
      ...props2,
      open,
      onOpenChange
    }), {
      delay: delayContext
    } = useDelayGroup(floating.context, {
      id
    }), {
      getReferenceProps,
      getFloatingProps
    } = useInteractions([useHover(floating.context, {
      delay: delay ?? delayContext,
      restMs
    }), useFocus(floating.context, focus2), useRole(floating.context, {
      role: "tooltip"
    }), useDismiss(floating.context)]);
    return {
      ...floating,
      open,
      getReferenceProps,
      getFloatingProps
    };
  }, useFloatingContext2 = React70.useCallback(useFloatingFn, [id, delay, open, restMs, focus2 ? JSON.stringify(focus2) : 0]), onCustomAnchorAdd = React70.useCallback(() => setHasCustomAnchor(true), []), onCustomAnchorRemove = React70.useCallback(() => setHasCustomAnchor(false), []), contentId = React70.useId(), smallerSize = props.unstyled ? null : getSize("$true", {
    shift: -2,
    bounds: [0]
  });
  return (
    // TODO: FloatingOverrideContext might also need to be scoped
    (0, import_jsx_runtime57.jsx)(FloatingOverrideContext.Provider, {
      value: useFloatingContext2,
      children: (0, import_jsx_runtime57.jsx)(Popper, {
        __scopePopper: __scopeTooltip || TOOLTIP_SCOPE,
        size: smallerSize == null ? void 0 : smallerSize.key,
        allowFlip: true,
        stayInFrame: true,
        ...restProps,
        children: (0, import_jsx_runtime57.jsx)(PopoverContext.Provider, {
          contentId,
          triggerRef,
          open,
          scope: __scopeTooltip || TOOLTIP_SCOPE,
          onOpenChange: setOpen,
          onOpenToggle: voidFn,
          hasCustomAnchor,
          onCustomAnchorAdd,
          onCustomAnchorRemove,
          children
        })
      })
    })
  );
});
var TooltipTrigger = React70.forwardRef(function(props, ref) {
  const {
    __scopeTooltip,
    ...rest
  } = props;
  return (0, import_jsx_runtime57.jsx)(PopoverTrigger, {
    ...rest,
    __scopePopover: __scopeTooltip || TOOLTIP_SCOPE,
    ref
  });
});
var TooltipAnchor = React70.forwardRef(function(props, ref) {
  const {
    __scopeTooltip,
    ...rest
  } = props;
  return (0, import_jsx_runtime57.jsx)(PopoverAnchor, {
    ...rest,
    __scopePopover: __scopeTooltip || TOOLTIP_SCOPE,
    ref
  });
});
var Tooltip2 = withStaticProperties(TooltipComponent, {
  Anchor: TooltipAnchor,
  Arrow: TooltipArrow,
  Content: TooltipContent,
  Trigger: TooltipTrigger
});
var voidFn = () => {
};

// node_modules/@tamagui/tooltip/dist/esm/TooltipSimple.mjs
var React71 = __toESM(require_react(), 1);
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var TooltipSimple = React71.forwardRef(({
  label,
  children,
  contentProps,
  disabled,
  ...tooltipProps
}, ref) => {
  const child = React71.Children.only(children);
  return label ? (0, import_jsx_runtime58.jsxs)(Tooltip2, {
    disableRTL: true,
    offset: 15,
    restMs: 40,
    delay: 40,
    ...tooltipProps,
    ...disabled ? {
      open: false
    } : null,
    children: [(0, import_jsx_runtime58.jsx)(Tooltip2.Trigger, {
      ...typeof label == "string" && {
        "aria-label": label
      },
      asChild: "except-style",
      children: ref && React71.isValidElement(child) ? React71.cloneElement(child, {
        ref
      }) : child
    }), (0, import_jsx_runtime58.jsxs)(Tooltip2.Content, {
      zIndex: 1e9,
      enterStyle: {
        x: 0,
        y: -4,
        opacity: 0,
        scale: 0.96
      },
      exitStyle: {
        x: 0,
        y: -4,
        opacity: 0,
        scale: 0.96
      },
      x: 0,
      scale: 1,
      y: 0,
      elevation: "$0.5",
      opacity: 1,
      pointerEvents: "none",
      paddingVertical: getSpace(tooltipProps.size || "$true", {
        shift: -4
      }),
      animateOnly: ["transform", "opacity"],
      animation: ["quicker", {
        opacity: {
          overshootClamping: true
        }
      }],
      ...contentProps,
      children: [(0, import_jsx_runtime58.jsx)(Tooltip2.Arrow, {}), (0, import_jsx_runtime58.jsx)(Paragraph, {
        size: "$3",
        children: label
      })]
    })]
  }) : children;
});

// node_modules/@tamagui/use-window-dimensions/dist/esm/index.mjs
var import_react46 = __toESM(require_react(), 1);
var initialValue = {
  height: 800,
  width: 600
};
function configureInitialWindowDimensions(next) {
  Object.assign(initialValue, next);
}
Dimensions.addEventListener("change", () => {
  cbs.forEach((cb) => cb(window));
});
var cbs = /* @__PURE__ */ new Set();
function subscribe(cb) {
  return cbs.add(cb), () => cbs.delete(cb);
}
function useWindowDimensions({
  serverValue = initialValue
} = {}) {
  return import_react46.default.useSyncExternalStore(subscribe, () => Dimensions.get("window"), () => isWeb ? serverValue : Dimensions.get("window"));
}

// node_modules/@tamagui/visually-hidden/dist/esm/VisuallyHidden.mjs
var VisuallyHidden = styled(Text, {
  position: "absolute",
  width: 1,
  height: 1,
  margin: -1,
  zIndex: -1e4,
  overflow: "hidden",
  opacity: 1e-8,
  pointerEvents: "none",
  variants: {
    preserveDimensions: {
      true: {
        position: "relative",
        width: "auto",
        height: "auto"
      }
    },
    visible: {
      true: {
        position: "relative",
        width: "auto",
        height: "auto",
        margin: 0,
        zIndex: 1,
        overflow: "visible",
        opacity: 1,
        pointerEvents: "auto"
      }
    }
  }
});
VisuallyHidden.isVisuallyHidden = true;

// node_modules/tamagui/dist/esm/createTamagui.mjs
var createTamagui2 = false ? createTamagui : (conf) => {
  const sizeTokenKeys = ["$true"], hasKeys = (expectedKeys, obj) => expectedKeys.every((k) => typeof obj[k] < "u"), tamaguiConfig = createTamagui(conf);
  for (const name of ["size", "space"]) {
    const tokenSet = tamaguiConfig.tokensParsed[name];
    if (!tokenSet) throw new Error(`Expected tokens for "${name}" in ${Object.keys(tamaguiConfig.tokensParsed).join(", ")}`);
    if (!hasKeys(sizeTokenKeys, tokenSet)) throw new Error(`
createTamagui() missing expected tokens.${name}:

Received: ${Object.keys(tokenSet).join(", ")}

Expected: ${sizeTokenKeys.join(", ")}

Tamagui expects a "true" key that is the same value as your default size. This is so 
it can size things up or down from the defaults without assuming which keys you use.

Please define a "true" or "$true" key on your size and space tokens like so (example):

size: {
  sm: 2,
  md: 10,
  true: 10, // this means "md" is your default size
  lg: 20,
}

`);
  }
  const expected = Object.keys(tamaguiConfig.tokensParsed.size);
  for (const name of ["radius", "zIndex"]) {
    const tokenSet = tamaguiConfig.tokensParsed[name], received = Object.keys(tokenSet);
    if (!received.some((rk) => expected.includes(rk))) throw new Error(`
createTamagui() invalid tokens.${name}:

Received: ${received.join(", ")}

Expected a subset of: ${expected.join(", ")}

`);
  }
  return tamaguiConfig;
};

// node_modules/tamagui/dist/esm/views/TamaguiProvider.mjs
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var TamaguiProvider2 = ({
  children,
  ...props
}) => (0, import_jsx_runtime59.jsx)(TamaguiProvider, {
  ...props,
  children: (0, import_jsx_runtime59.jsx)(ZIndexStackContext.Provider, {
    value: 1,
    children: (0, import_jsx_runtime59.jsx)(PortalProvider, {
      shouldAddRootHost: true,
      children
    })
  })
});

// node_modules/tamagui/dist/esm/views/Anchor.mjs
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var AnchorFrame = styled(SizableText, {
  name: "Anchor",
  tag: "a",
  accessibilityRole: "link"
});
var Anchor = AnchorFrame.styleable(({
  href,
  target,
  ...props
}, ref) => (0, import_jsx_runtime60.jsx)(AnchorFrame, {
  ...props,
  ...isWeb ? {
    href,
    target
  } : {
    onPress: (event) => {
      var _a;
      (_a = props.onPress) == null ? void 0 : _a.call(props, event), href !== void 0 && Linking_default.openURL(href);
    }
  },
  ref
}));

// node_modules/tamagui/dist/esm/views/EnsureFlexed.mjs
var EnsureFlexed = styled(Text2, {
  opacity: 0,
  lineHeight: 0,
  height: 0,
  display: "flex",
  fontSize: 200,
  children: "wwwwwwwwwwwwwwwwwww",
  pointerEvents: "none"
});
EnsureFlexed.isVisuallyHidden = true;

// node_modules/tamagui/dist/esm/views/Fieldset.mjs
var Fieldset = styled(YStack, {
  name: "Fieldset",
  tag: "fieldset",
  variants: {
    horizontal: {
      true: {
        flexDirection: "row",
        alignItems: "center"
      }
    }
  }
});

// node_modules/tamagui/dist/esm/views/Input.mjs
var import_react47 = __toESM(require_react(), 1);

// node_modules/tamagui/dist/esm/helpers/inputHelpers.mjs
var inputSizeVariant = (val = "$true", extras) => {
  if (extras.props.multiline || extras.props.numberOfLines > 1) return textAreaSizeVariant(val, extras);
  const buttonStyles = getButtonSized(val, extras), paddingHorizontal = getSpace(val, {
    shift: -1,
    bounds: [2]
  }), fontStyle = getFontSized(val, extras);
  return !isWeb && fontStyle && delete fontStyle.lineHeight, {
    ...fontStyle,
    ...buttonStyles,
    paddingHorizontal
  };
};
var textAreaSizeVariant = (val = "$true", extras) => {
  const {
    props
  } = extras, buttonStyles = getButtonSized(val, extras), fontStyle = getFontSized(val, extras), lines = props.rows ?? props.numberOfLines, height = typeof lines == "number" ? lines * getVariableValue(fontStyle.lineHeight) : "auto", paddingVertical = getSpace(val, {
    shift: -2,
    bounds: [2]
  }), paddingHorizontal = getSpace(val, {
    shift: -1,
    bounds: [2]
  });
  return {
    ...buttonStyles,
    ...fontStyle,
    paddingVertical,
    paddingHorizontal,
    height
  };
};

// node_modules/tamagui/dist/esm/views/Input.mjs
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var defaultStyles = {
  size: "$true",
  fontFamily: "$body",
  borderWidth: 1,
  outlineWidth: 0,
  color: "$color",
  ...isWeb ? {
    tabIndex: 0
  } : {
    focusable: true
  },
  borderColor: "$borderColor",
  backgroundColor: "$background",
  // this fixes a flex bug where it overflows container
  minWidth: 0,
  hoverStyle: {
    borderColor: "$borderColorHover"
  },
  focusStyle: {
    borderColor: "$borderColorFocus"
  },
  focusVisibleStyle: {
    outlineColor: "$outlineColor",
    outlineWidth: 2,
    outlineStyle: "solid"
  }
};
var InputFrame = styled(TextInput_default, {
  name: "Input",
  variants: {
    unstyled: {
      false: defaultStyles
    },
    size: {
      "...size": inputSizeVariant
    },
    disabled: {
      true: {}
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
}, {
  isInput: true,
  accept: {
    placeholderTextColor: "color",
    selectionColor: "color"
  }
});
var Input = InputFrame.styleable((propsIn, forwardedRef) => {
  const ref = import_react47.default.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), props = useInputProps(propsIn, composedRefs);
  return (0, import_jsx_runtime61.jsx)(InputFrame, {
    ...props
  });
});
function useInputProps(props, ref) {
  const theme = useTheme(), focusableProps = useFocusable({
    props,
    ref,
    isInput: true
  }), placeholderTextColor = import_react47.default.useMemo(() => {
    var _a, _b;
    const placeholderColorProp = props.placeholderTextColor;
    return ((_a = theme[placeholderColorProp]) == null ? void 0 : _a.get()) ?? placeholderColorProp ?? ((_b = theme.placeholderColor) == null ? void 0 : _b.get());
  }, [props.placeholderTextColor, theme]);
  return import_react47.default.useMemo(() => ({
    ref: focusableProps.ref,
    readOnly: props.disabled,
    ...props,
    placeholderTextColor,
    onChangeText: focusableProps.onChangeText
  }), [focusableProps.ref, focusableProps.onChangeText, props.disabled, props, placeholderTextColor]);
}

// node_modules/tamagui/dist/esm/views/Spinner.mjs
var React74 = __toESM(require_react(), 1);
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var Spinner = YStack.extractable(themeable(React74.forwardRef((props, ref) => {
  const {
    size: size4,
    color: colorProp,
    ...stackProps
  } = props, theme = useTheme();
  let color = colorProp;
  return color && color[0] === "$" && (color = variableToString(theme[color])), (0, import_jsx_runtime62.jsx)(YStack, {
    ref,
    ...stackProps,
    children: (0, import_jsx_runtime62.jsx)(ActivityIndicator_default, {
      size: size4,
      color
    })
  });
}), {
  componentName: "Spinner"
}));

// node_modules/tamagui/dist/esm/views/TextArea.mjs
var import_react48 = __toESM(require_react(), 1);
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var TextAreaFrame = styled(InputFrame, {
  name: "TextArea",
  multiline: true,
  // this attribute fixes firefox newline issue
  whiteSpace: "pre-wrap",
  variants: {
    unstyled: {
      false: {
        height: "auto",
        ...defaultStyles
      }
    },
    size: {
      "...size": textAreaSizeVariant
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
var TextArea = TextAreaFrame.styleable((propsIn, forwardedRef) => {
  const ref = import_react48.default.useRef(null), composedRefs = useComposedRefs(forwardedRef, ref), props = useInputProps(propsIn, composedRefs), linesProp = {
    // web uses rows now, but native not caught up :/
    [isWeb ? "rows" : "numberOfLines"]: propsIn.unstyled ? void 0 : 4
  };
  return (0, import_jsx_runtime63.jsx)(TextAreaFrame, {
    ...linesProp,
    ...props
  });
});

// node_modules/tamagui/dist/esm/views/Text.mjs
var Text3 = styled(Text2, {
  variants: {
    unstyled: {
      false: {
        color: "$color"
      }
    }
  },
  defaultVariants: {
    unstyled: process.env.TAMAGUI_HEADLESS === "1"
  }
});
export {
  ACTIONS,
  Accordion,
  Adapt,
  AdaptContents,
  AdaptContext,
  AdaptParent,
  AdaptPortalContents,
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
  Anchor,
  AnimatePresence,
  Article,
  Aside,
  Avatar,
  AvatarFallback,
  AvatarFallbackFrame,
  AvatarFrame,
  AvatarImage,
  Button2 as Button,
  ButtonContext,
  ButtonFrame,
  ButtonIcon,
  ButtonNestingContext,
  ButtonText,
  Card,
  CardBackground,
  CardFooter,
  CardFrame,
  CardHeader,
  Checkbox,
  CheckboxContext,
  CheckboxFrame,
  CheckboxIndicatorFrame,
  CheckboxStyledContext,
  Circle,
  ComponentContext,
  Configuration,
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogOverlay,
  DialogOverlayFrame,
  DialogPortal,
  DialogPortalFrame,
  DialogTitle,
  DialogTrigger,
  DialogWarningProvider,
  EnsureFlexed,
  Fieldset,
  FontLanguage,
  Footer,
  Form2 as Form,
  FormFrame,
  FormProvider,
  FormTrigger,
  ForwardSelectContext,
  Frame,
  Group,
  GroupFrame,
  H1,
  H2,
  H3,
  H4,
  H5,
  H6,
  Handle,
  Header,
  Heading,
  INITIAL_STATE,
  IS_FABRIC,
  Image,
  Input,
  InputFrame,
  Label,
  LabelFrame,
  ListItem2 as ListItem,
  ListItemFrame,
  ListItemSubtitle,
  ListItemText,
  ListItemTitle,
  Main,
  Nav,
  Overlay,
  Paragraph,
  ParentSheetContext,
  Popover,
  PopoverAnchor,
  PopoverArrow,
  PopoverClose,
  PopoverContent,
  PopoverContext,
  PopoverTrigger,
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperContext,
  PopperProvider,
  Portal,
  PortalHost,
  GorhomPortalItem as PortalItem,
  PortalProvider,
  PresenceChild,
  PresenceContext,
  Progress,
  ProgressFrame,
  ProgressIndicator,
  ProgressIndicatorFrame,
  ProvideAdaptContext,
  RadioGroup,
  RadioGroupFrame,
  RadioGroupIndicatorFrame,
  RadioGroupItemFrame,
  RadioGroupStyledContext,
  Range,
  ResetPresence,
  ScrollView,
  Section,
  Select,
  SelectGroupFrame,
  SelectIcon,
  SelectItemParentProvider,
  SelectProvider,
  SelectSeparator,
  Separator,
  Sheet,
  SheetController,
  SheetControllerContext,
  SheetHandleFrame,
  SheetInsideSheetContext,
  SheetOverlayFrame,
  SheetScrollView,
  SizableStack,
  SizableText,
  Slider,
  SliderFrame,
  SliderThumb,
  SliderThumbFrame,
  SliderTrack,
  SliderTrackActive,
  SliderTrackActiveFrame,
  SliderTrackFrame,
  Spacer,
  Spinner,
  Square,
  Stack2 as Stack,
  StyleObjectIdentifier,
  StyleObjectProperty,
  StyleObjectPseudo,
  StyleObjectRules,
  StyleObjectValue,
  Switch,
  SwitchContext,
  SwitchFrame,
  SwitchStyledContext,
  SwitchThumb,
  Tabs2 as Tabs,
  TamaguiProvider2 as TamaguiProvider,
  Text3 as Text,
  TextArea,
  TextAreaFrame,
  Theme,
  ThemeableStack,
  Thumb,
  ToggleGroup,
  Tooltip2 as Tooltip,
  TooltipGroup,
  TooltipSimple,
  Track,
  USE_NATIVE_PORTAL,
  Unspaced,
  View2 as View,
  VisuallyHidden,
  XGroup,
  XStack,
  YGroup,
  YStack,
  ZStack,
  addTheme,
  allPortalHosts,
  clamp,
  closeOpenTooltips,
  composeEventHandlers,
  composeRefs,
  concatClassName,
  configureInitialWindowDimensions,
  createAlertDialogScope,
  createAvatarScope,
  createCheckbox,
  createComponent,
  createContext6 as createContext,
  createContextScope,
  createDialogScope,
  createFont,
  createMedia,
  createProgressScope,
  createRadioGroup,
  createSelectContext,
  createSelectItemParentContext,
  createSelectItemParentScope,
  createSelectScope,
  createSheet,
  createSheetScope,
  createShorthands,
  createStyledContext,
  createSwitch,
  createTamagui2 as createTamagui,
  createTheme,
  createTokens,
  createVariable,
  debounce,
  defaultStyles,
  fullscreenStyle,
  getCSSStylesAtomic,
  getConfig,
  getFontSize,
  getFontSizeToken,
  getFontSizeVariable,
  getMedia,
  getNativeSheet,
  getShapeSize,
  getThemes,
  getToken,
  getTokenValue,
  getTokens,
  getVariable,
  getVariableName,
  getVariableValue,
  insertFont,
  isChrome,
  isClient,
  isPresent,
  isServer,
  isServerSide,
  isTamaguiComponent,
  isTamaguiElement,
  isTouchable,
  isVariable,
  isWeb,
  isWebTouchable,
  matchMedia,
  mediaObjectToString,
  mediaQueryConfig,
  mediaState,
  mutateThemes,
  portalListeners,
  prevent,
  replaceTheme,
  resolveViewZIndex,
  setConfig,
  setRef,
  setupDev,
  setupNativeSheet,
  setupPopper,
  setupReactNative,
  shouldRenderNativePlatform,
  simpleHash,
  spacedChildren,
  stylePropsAll,
  stylePropsText,
  stylePropsTextOnly,
  stylePropsTransform,
  stylePropsUnitless,
  stylePropsView,
  styled,
  themeable,
  themeableVariants,
  tokenCategories,
  updateTheme,
  useAdaptContext,
  useAdaptIsActive,
  useButton,
  useComposedRefs,
  useConfiguration,
  useControllableState,
  useCurrentColor,
  useDebounce,
  useDebounceValue,
  useDidFinishSSR,
  useEvent,
  useFloatingContext,
  useForceUpdate,
  useFormContext,
  useGet,
  useGetThemedIcon,
  useGroupItem,
  useInputProps,
  useIsPresent,
  useIsTouchDevice,
  useIsomorphicLayoutEffect,
  useLabelContext,
  useListItem,
  useMedia,
  usePopoverContext,
  usePopperContext,
  usePortal,
  usePresence,
  useProps,
  usePropsAndStyle,
  useSelectContext,
  useSelectItemParentContext,
  useSheet,
  useSheetController,
  useSheetOffscreenSize,
  useSheetOpenState,
  useStyle,
  useTabsContext,
  useTheme,
  useThemeName,
  useWindowDimensions,
  validPseudoKeys,
  validStyles,
  variableToString,
  withStaticProperties,
  wrapChildrenInText
};
/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=tamagui.js.map
